// Generated by CoffeeScript 1.10.0

/*
 * class Invoice
 *
 * @author    Alexey Kapitonov
 * @email     kapitonoval2012@gmail.com
 * @version   06.06.2016 11:03
 */


/*
 * возвращяет текущую дату в читабельном формате
 */

(function() {
  var calc_price_with_discount, createPensionTbl, createZpMenKonTbl, createZpMenRekTbl, cyrill_to_latin, getDateNow, getDateTomorrow, mainMenuTab, modalConfirm, modalWindow, pensionTrObj, round_money, sendAjax, tdEditRow, zpMenRekTrObj,
    slice = [].slice;

  getDateNow = function() {
    var d, dd, mm, yy;
    d = new Date();
    dd = d.getDate();
    if (dd < 10) {
      dd = '0' + dd;
    }
    mm = d.getMonth() + 1;
    if (mm < 10) {
      mm = '0' + mm;
    }
    yy = d.getFullYear();
    return dd + '.' + mm + '.' + yy;
  };


  /*
   * возвращяет текущую дату в читабельном формате
   */

  getDateTomorrow = function() {
    var d, dd, mm, yy;
    d = new Date();
    d.setDate(d.getDate() + 1);
    dd = d.getDate();
    if (dd < 10) {
      dd = '0' + dd;
    }
    mm = d.getMonth() + 1;
    if (mm < 10) {
      mm = '0' + mm;
    }
    yy = d.getFullYear();
    return dd + '.' + mm + '.' + yy;
  };


  /*
   * округляет и приводит числа к денежному формату
   * строку преобразует в число
   */

  round_money = function(num) {
    var new_num;
    num = Number(num);
    new_num = Math.ceil(num * 100) / 100;
    return num.toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1");
  };


  /*
   * подсчет скидки
   * @param      price_out - входящая цена
   * @discount   discount - скидка
   */

  calc_price_with_discount = function(price_out, discount) {
    return Number(price_out / 100) * (100 + Number(discount));
  };


  /*
   * транслитерация
   */

  cyrill_to_latin = function(text) {
    var arren, arrru, i, itm, j, len1, reg;
    arrru = ['Я', 'я', 'Ю', 'ю', 'Ч', 'ч', 'Ш', 'ш', 'Щ', 'щ', 'Ж', 'ж', 'А', 'а', 'Б', 'б', 'В', 'в', 'Г', 'г', 'Д', 'д', 'Е', 'е', 'Ё', 'ё', 'З', 'з', 'И', 'и', 'Й', 'й', 'К', 'к', 'Л', 'л', 'М', 'м', 'Н', 'н', 'О', 'о', 'П', 'п', 'Р', 'р', 'С', 'с', 'Т', 'т', 'У', 'у', 'Ф', 'ф', 'Х', 'х', 'Ц', 'ц', 'Ы', 'ы', 'Ь', 'ь', 'Ъ', 'ъ', 'Э', 'э', ' '];
    arren = ['Ya', 'ya', 'Yu', 'yu', 'Ch', 'ch', 'Sh', 'sh', 'Sh', 'sh', 'Zh', 'zh', 'A', 'a', 'B', 'b', 'V', 'v', 'G', 'g', 'D', 'd', 'E', 'e', 'E', 'e', 'Z', 'z', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'R', 'r', 'S', 's', 'T', 't', 'U', 'u', 'F', 'f', 'H', 'h', 'C', 'c', 'Y', 'y', '`', '`', '\'', '\'', 'E', 'e', '_'];
    for (i = j = 0, len1 = arrru.length; j < len1; i = ++j) {
      itm = arrru[i];
      reg = new RegExp(arrru[i], "g");
      text = text.replace(reg, arren[i]);
    }
    return text;
  };


  /*
   * метод отправки запроса AJAX
   */

  sendAjax = (function() {
    sendAjax.prototype.defaults = {
      AJAX: 'test',
      options: {}
    };

    sendAjax.prototype.func = function() {
      return true;
    };

    sendAjax.prototype.response = {};

    function sendAjax(ajaxName, options, func) {
      var opt;
      if (options == null) {
        options = {};
      }
      if (func == null) {
        func = function() {
          return true;
        };
      }
      this.href = window.location.href;
      if (options.url) {
        this.href = options.url;
        options.url = void 0;
      }
      opt = {
        AJAX: ajaxName,
        options: options
      };
      this.func = func;
      this.options = $.extend({}, this.defaults, opt);
      this.sendAjax();
    }

    sendAjax.prototype.sendAjax = function() {
      var _this, data, k, ref, v;
      _this = this;
      data = {
        AJAX: this.options.AJAX
      };
      ref = this.options.options;
      for (k in ref) {
        v = ref[k];
        data[k] = v;
      }
      return $.ajax({
        url: this.href,
        type: "POST",
        data: data,
        dataType: "json",
        error: function(jqXHR, textStatus, errorThrown) {
          echo_message_js("AJAX Error: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
          _this.response = $.extend({}, _this.response, jqXHR.responseJSON);
          standard_response_handler(_this.response);
          return _this.func(_this.response);
        }
      });
    };

    return sendAjax;

  })();


  /*
   * прототип окна Confirm
   *
   * @version   21.04.2016 11:20:30
   */

  modalConfirm = (function() {
    modalConfirm.prototype.defaults = {
      title: 'Подтвердите действие',
      html: 'Вы уверены'
    };

    function modalConfirm(data, func, func2) {
      var _this;
      if (data == null) {
        data = {};
      }
      if (func == null) {
        func = function() {};
      }
      if (func2 == null) {
        func2 = function() {};
      }
      _this = this;
      this.options = $.extend({}, this.defaults, data);
      this.options.buttons = [
        {
          text: 'Да',
          "class": 'button_yes_or_no no',
          style: 'float:right;',
          click: function() {
            func();
            return $(_this.selfObj.winDiv).dialog('close').dialog('destroy').remove();
          }
        }, {
          text: 'Нет, Спасибо.',
          "class": 'button_yes_or_no no',
          style: 'float:right;',
          click: function() {
            func2();
            return $(_this.selfObj.winDiv).dialog('close').dialog('destroy').remove();
          }
        }
      ];
      this.selfObj = new modalWindow(this.options, {
        single: false
      });
    }

    return modalConfirm;

  })();


  /*
   * прототип окна
   *
   * @param     data = {html='текст не был передан', title='имя окна не было передано', buttons={}}
   * @version   18.04.2016 12:53:01
   */

  modalWindow = (function() {
    modalWindow.prototype.sittings = {
      modal: true,
      autoOpen: true,
      closeOnEscape: false,
      single: true,
      close: function(event, ui) {
        return true;
      },
      beforeClose: function(event, ui) {
        return true;
      }
    };

    modalWindow.prototype.defaults = {
      id: 'js-alert_union',
      title: '*** Название окна ***',
      width: 'auto',
      height: 'auto',
      html: 'Текст в окне',
      buttons: []
    };

    function modalWindow(data, sittings) {
      if (data == null) {
        data = {};
      }
      if (sittings == null) {
        sittings = {};
      }
      this.options = $.extend({}, this.defaults, data);
      this.sittings = $.extend({}, this.sittings, sittings);
      if (this.options.maxWidth && this.options.maxWidth.indexOf('%') + 1) {
        this.options.maxWidth = $(window).width() / 100 * Number(this.options.maxWidth.substring(this.options.maxWidth.length - 1, 0));
      }
      if (this.options.maxHeight && this.options.maxHeight.indexOf('%') + 1) {
        this.options.maxHeight = $(window).height() / 100 * Number(this.options.maxHeight.substring(this.options.maxHeight.length - 1, 0));
      }
      this.init();
    }

    modalWindow.prototype.destroy = function() {
      return this.winDiv.dialog('close').dialog('destroy').remove();
    };

    modalWindow.prototype.init = function() {
      var _this, button, button_n, buttons_html, i, j, len, len1, ref, self, td, tr;
      _this = this;
      if (this.sittings.single) {
        if ($('#js-alert_union').length > 0) {
          $('#js-alert_union').remove();
        }
        $('body').append(this.winDiv = $('<div/>', {
          "id": this.defaults.id,
          "style": "height:45px;",
          'html': this.options.html,
          "class": "js-alert_union"
        }));
      } else {
        len = $('.js-alert_union').length;
        this.defaults.id = this.defaults.id + len;
        $('body').append(this.winDiv = $('<div/>', {
          "id": this.defaults.id,
          "style": "height:45px;",
          'html': this.options.html,
          "class": "js-alert_union"
        }));
      }
      self = this.winDiv.dialog({
        width: this.options.width,
        height: this.options.height,
        modal: this.sittings.modal,
        title: this.options.title,
        autoOpen: this.sittings.autoOpen,
        closeOnEscape: this.sittings.closeOnEscape,
        beforeClose: function(event, ui) {
          return _this.sittings.beforeClose(event, ui);
        },
        close: function(event, ui) {
          return _this.sittings.close(event, ui);
        }
      }).parent();
      if (this.options.buttons.length === 0) {
        this.options.buttons.push({
          text: 'Закрыть',
          "class": 'button_yes_or_no no',
          style: 'float:right;',
          click: function() {
            return $('#' + _this.defaults.id).dialog('close').dialog('destroy').remove();
          }
        });
      }
      this.winDiv.dialog("option", "buttons", {
        buttons: {
          text: 'Закрыть',
          "class": 'button_yes_or_no no',
          style: 'float:right;',
          click: function() {
            return $('#' + _this.defaults.id).dialog('close').dialog('destroy').remove();
          }
        }
      });
      if (this.options.maxHeight) {
        this.winDiv.dialog("option", "maxHeight", this.options.maxHeight);
      }
      if (this.options.maxWidth) {
        this.winDiv.dialog("option", "maxWidth", this.options.maxWidth);
      }
      buttons_html = $('<table/>').append(tr = $('<tr/>'));
      ref = this.options.buttons;
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        button_n = ref[i];
        button = $('<button/>', {
          html: button_n['text'],
          click: button_n['click']
        });
        if (button_n['class']) {
          button.attr('class', button_n['class']);
        }
        if (button_n['style']) {
          button.attr('style', button_n['style']);
        }
        if (button_n['id']) {
          button.attr('id', button_n['id']);
        }
        tr.append(td = $('<td/>').append(button));
        if (button_n.data !== void 0) {
          button.data(button_n.data);
        }
        if (i > 0) {
          td.css('textAlign', 'right');
        }
      }
      return self.find('.ui-dialog-buttonpane').html(this.buttonDiv = $('<div/>', {
        'class': 'js-alert_union_buttons ui-dialog-buttonpane ui-widget-content ui-helper-clearfix'
      }).append(buttons_html));
    };

    return modalWindow;

  })();


  /*
   * прототип объекта данных строки таблицы пенсий
   */

  pensionTrObj = (function() {
    pensionTrObj.prototype.defaults = {
      id: 0,
      date: '00.00.0000',
      n_0_2: '0.00',
      n_2_3: '0.00',
      n_3_5: '0.00',
      n_5_7: '0.00',
      n_7_10: '0.00',
      n_10_15: '0.00',
      n_15_99: '0.00'
    };

    pensionTrObj.prototype.enterObj = {};

    pensionTrObj.prototype.options = {};

    function pensionTrObj(data) {
      var el, key;
      if (data == null) {
        data = {};
      }
      this.options = {};
      if (data.edit === void 0) {
        data.edit = 1;
      }
      for (key in data) {
        el = data[key];
        if (el !== null) {
          this.options[key] = el;
        }
      }
      return $.extend({}, this.defaults, this.options);
    }

    return pensionTrObj;

  })();


  /*
   * прототип редактируемой ячейки в таблице
   */

  tdEditRow = (function() {
    function tdEditRow(val, key, type, saveFunc) {
      var td;
      if (type == null) {
        type = 'int';
      }
      if (saveFunc == null) {
        saveFunc = function() {
          return true;
        };
      }
      td = $('<td/>', {
        'html': val,
        'class': 'mayBeEdit',
        click: function() {
          var input;
          if ($(this).find('input').length === 0) {
            $(this).html(input = $('<input/>', {
              'type': 'text',
              'val': $(this).html(),
              keyup: function(e) {
                if (e.keyCode === 13) {
                  return $(this).blur();
                }
              },
              change: function() {
                var data;
                data = $(this).parent().data();
                data[key] = $(this).val();
                return $(this).parent().data(data);
              },
              focus: function() {
                var t;
                if (Number($(this).val()) === 0) {
                  return $(this).val('');
                } else {
                  t = $(this);
                  return setTimeout(function() {
                    return t.select();
                  }, 50);
                }
              }
            }));
            if (type === 'date') {
              input.addClass('date');
              input.datetimepicker({
                timepicker: false,
                dayOfWeekStart: 1,
                onSelectDate: function(ct, $i) {
                  return $i.blur();
                },
                onGenerate: function(ct) {
                  $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
                  return $(this).find('.xdsoft_date');
                },
                closeOnDateSelect: true,
                format: 'd.m.Y'
              });
            }
            $(this).addClass('tdInputHere');
            return input.css('textAlign', $(this).css('textAlign')).focus().blur(function() {
              var data;
              data = $(this).parent().parent().data();
              if (Number($(this).val()) === 0 || isNaN($(this).val()) && type === 'int') {
                $(this).val(0);
              }
              if (type === 'money') {
                if (isNaN($(this).val())) {
                  $(this).val(data[key]);
                } else {
                  $(this).val(round_money(Number($(this).val())));
                }
              }
              if (data[key] !== $(this).val()) {
                data[key] = $(this).val();
                $(this).parent().parent().data(data);
                saveFunc(key, data);
              }
              $(this).parent().removeClass('tdInputHere');
              return $(this).replaceWith(data[key]);
            });
          }
        }
      });
      if (type === 'date') {
        td.addClass('date');
      }
      return td;
    }

    return tdEditRow;

  })();


  /*
   * таблица пенсии
   */

  createPensionTbl = (function() {
    function createPensionTbl(data) {
      var i, j, len1, n, tbl, tblCase;
      tbl = $('<table/>', {
        id: 'js-options-tbl'
      });
      tbl.append(this.penciaTrHead());
      for (i = j = 0, len1 = data.length; j < len1; i = ++j) {
        n = data[i];
        tbl.append(this.penciaTrSimple(new pensionTrObj(data[i])));
      }
      tbl.append(this.penciaTrFooter());
      tblCase = $('<div/>').css({
        'width': "1020px"
      });
      return tblCase.append(tbl);
    }

    createPensionTbl.prototype.penciaTrFooter = function() {
      var j, num, self, tr;
      self = this;
      tr = $('<tr/>', {
        "class": 'footer'
      });
      tr.append($('<td/>'));
      for (num = j = 9; j >= 1; num = --j) {
        tr.append($('<td/>', {
          "class": 'mayBeEdit',
          click: function() {
            var t;
            t = $(this);
            new sendAjax('create_pension_row', {}, function(response) {
              var obj;
              obj = self.penciaTrSimple(new pensionTrObj(response.data));
              tr.before(obj);
              return obj.find('td').eq(t.index()).click();
            });
          }
        }));
      }
      tr.append($('<td/>'));
      return tr;
    };

    createPensionTbl.prototype.penciaTrHead = function() {
      var px, tr;
      tr = $('<tr/>', {
        "class": 'head'
      });
      tr.append($('<th/>'));
      tr.append($('<th/>', {
        html: 'Исп'
      }));
      px = 86;
      tr.append($('<th/>', {
        html: 'действует с:',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '0 - 2',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '2 - 3',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '3 - 5',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '5 - 7',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '7 - 10',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '10 - 15',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '15 - 99'
      }));
      tr.append($('<th/>'));
      return tr;
    };

    createPensionTbl.prototype.penciaTrSimple = function(data) {
      var tr;
      tr = $('<tr/>', {
        "class": 'body'
      });
      if (Number(data.checked) > 0) {
        tr.addClass('checked');
      }
      tr.data(data);
      tr.append($('<td/>'));
      tr.append($('<td/>', {
        click: function() {
          var curData, prevCheckData;
          prevCheckData = [];
          prevCheckData.id = 0;
          tr.parent().find('tr.checked').each(function() {
            var prevCheckTr;
            prevCheckTr = $(this);
            prevCheckData = prevCheckTr.data();
            prevCheckData.checked = 0;
            return prevCheckTr.data(prevCheckData).removeClass('checked');
          });
          curData = tr.data();
          curData.checked = 1;
          tr.data(curData).addClass('checked');
          return new sendAjax('check_other_pension_row', {
            prev_id: prevCheckData.id,
            new_id: curData.id
          });
        }
      }));
      tr.append(new tdEditRow(data.date, 'date', 'date', this.saveFunc));
      tr.append(new tdEditRow(data.n_0_2, 'n_0_2', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.n_2_3, 'n_2_3', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.n_3_5, 'n_3_5', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.n_5_7, 'n_5_7', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.n_7_10, 'n_7_10', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.n_10_15, 'n_10_15', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.n_15_99, 'n_15_99', 'money', this.saveFunc));
      tr.append($('<td/>', {
        "class": "delete_row",
        click: function() {
          if (Number(tr.data().checked) > 0) {
            echo_message_js("Нельзя удалить выбранную строку.", 'error_message');
            return false;
          }
          return new modalConfirm({
            html: 'Вы уверены, что хотите удалить данную строку?'
          }, function() {
            return new sendAjax('delete_pension_row', {
              id: data.id
            }, function() {
              return tr.remove();
            });
          });
        }
      }));
      return tr;
    };

    createPensionTbl.prototype.saveFunc = function(key, allData) {
      return new sendAjax('savePensionData', {
        id: allData.id,
        key: key,
        val: allData[key]
      }, function() {});
    };

    return createPensionTbl;

  })();


  /*
   * прототип объекта данных строки таблицы мен рекламщики
   */

  zpMenRekTrObj = (function() {
    zpMenRekTrObj.prototype.defaults = {
      id: 0,
      date: '00.00.0000',
      profit_start: '0.00',
      profit_end: '0.00',
      salary: '0.00',
      premium: '0.00',
      "return": '0.00'
    };

    zpMenRekTrObj.prototype.enterObj = {};

    zpMenRekTrObj.prototype.options = {};

    function zpMenRekTrObj(data) {
      var el, key;
      if (data == null) {
        data = {};
      }
      this.options = {};
      if (data.edit === void 0) {
        data.edit = 1;
      }
      for (key in data) {
        el = data[key];
        if (el !== null) {
          this.options[key] = el;
        }
      }
      return $.extend({}, this.defaults, this.options);
    }

    return zpMenRekTrObj;

  })();


  /*
   * таблица зарплат мен рекламщики
   */

  createZpMenRekTbl = (function() {
    createZpMenRekTbl.prototype.width = 900;

    function createZpMenRekTbl(data) {
      var i, j, len1, n, tbl, tblCase;
      tbl = $('<table/>', {
        id: 'js-options-tbl',
        'class': 'zp_men_rek'
      });
      tbl.append(this.trHead());
      for (i = j = 0, len1 = data.length; j < len1; i = ++j) {
        n = data[i];
        tbl.append(this.trSimple(new zpMenRekTrObj(data[i])));
      }
      tbl.append(this.trFooter());
      tblCase = $('<div/>').css({
        'width': this.width
      });
      return tblCase.append(tbl);
    }

    createZpMenRekTbl.prototype.trFooter = function() {
      var j, num, self, tr;
      self = this;
      tr = $('<tr/>', {
        "class": 'footer'
      });
      for (num = j = 5; j >= 1; num = --j) {
        tr.append($('<td/>', {
          "class": 'mayBeEdit',
          click: function() {
            var t;
            t = $(this);
            new sendAjax('create_men_zp_rec_row', {}, function(response) {
              var obj;
              obj = self.trSimple(new zpMenRekTrObj(response.data));
              tr.before(obj);
              return obj.find('td').eq(t.index()).click();
            });
          }
        }));
      }
      tr.append($('<td/>'));
      return tr;
    };

    createZpMenRekTbl.prototype.trHead = function() {
      var px, tr;
      tr = $('<tr/>', {
        "class": 'head'
      });
      px = 250;
      tr.append($('<th/>', {
        html: 'прибыль от',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'прибыль до',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'премия(%)',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'оборот',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'премия(%)'
      }));
      tr.append($('<th/>'));
      return tr;
    };

    createZpMenRekTbl.prototype.trSimple = function(data) {
      var tr;
      tr = $('<tr/>', {
        "class": 'body'
      });
      if (Number(data.checked) > 0) {
        tr.addClass('checked');
      }
      tr.data(data);
      tr.append(new tdEditRow(data.profit_start, 'profit_start', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.profit_end, 'profit_end', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.salary, 'salary', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.premium, 'premium', 'money', this.saveFunc));
      tr.append(new tdEditRow(data["return"], 'return', 'money', this.saveFunc));
      tr.append($('<td/>', {
        "class": "delete_row",
        click: function() {
          if (Number(tr.data().checked) > 0) {
            echo_message_js("Нельзя удалить выбранную строку.", 'error_message');
            return false;
          }
          return new modalConfirm({
            html: 'Вы уверены, что хотите удалить данную строку?'
          }, function() {
            return new sendAjax('delete_zp_men_rek_row', {
              id: data.id
            }, function() {
              return tr.remove();
            });
          });
        }
      }));
      return tr;
    };

    createZpMenRekTbl.prototype.saveFunc = function(key, allData) {
      return new sendAjax('saveRecData', {
        id: allData.id,
        key: key,
        val: allData[key]
      }, function() {});
    };

    return createZpMenRekTbl;

  })();


  /*
   * таблица зарплат мен конечники
   */

  createZpMenKonTbl = (function() {
    createZpMenKonTbl.prototype.width = 900;

    function createZpMenKonTbl(data) {
      var i, j, len1, n, tbl, tblCase;
      tbl = $('<table/>', {
        id: 'js-options-tbl',
        'class': 'zp_men_kon'
      });
      tbl.append(this.trHead());
      for (i = j = 0, len1 = data.length; j < len1; i = ++j) {
        n = data[i];
        tbl.append(this.trSimple(new zpMenRekTrObj(data[i])));
      }
      tbl.append(this.trFooter());
      tblCase = $('<div/>').css({
        'width': this.width
      });
      return tblCase.append(tbl);
    }

    createZpMenKonTbl.prototype.trFooter = function() {
      var j, num, self, tr;
      self = this;
      tr = $('<tr/>', {
        "class": 'footer'
      });
      for (num = j = 3; j >= 1; num = --j) {
        tr.append($('<td/>', {
          "class": 'mayBeEdit',
          click: function() {
            var t;
            t = $(this);
            new sendAjax('create_men_zp_kon_row', {}, function(response) {
              var obj;
              obj = self.trSimple(new zpMenRekTrObj(response.data));
              tr.before(obj);
              return obj.find('td').eq(t.index()).click();
            });
          }
        }));
      }
      tr.append($('<td/>'));
      return tr;
    };

    createZpMenKonTbl.prototype.trHead = function() {
      var px, tr;
      tr = $('<tr/>', {
        "class": 'head'
      });
      px = 200;
      tr.append($('<th/>', {
        html: 'прибыль от',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'прибыль до',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'премия(%)',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>'));
      return tr;
    };

    createZpMenKonTbl.prototype.trSimple = function(data) {
      var tr;
      tr = $('<tr/>', {
        "class": 'body'
      });
      if (Number(data.checked) > 0) {
        tr.addClass('checked');
      }
      tr.data(data);
      tr.append(new tdEditRow(data.profit_start, 'profit_start', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.profit_end, 'profit_end', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.salary, 'salary', 'money', this.saveFunc));
      tr.append($('<td/>', {
        "class": "delete_row",
        click: function() {
          if (Number(tr.data().checked) > 0) {
            echo_message_js("Нельзя удалить выбранную строку.", 'error_message');
            return false;
          }
          return new modalConfirm({
            html: 'Вы уверены, что хотите удалить данную строку?'
          }, function() {
            return new sendAjax('delete_zp_men_kon_row', {
              id: data.id
            }, function() {
              return tr.remove();
            });
          });
        }
      }));
      return tr;
    };

    createZpMenKonTbl.prototype.saveFunc = function(key, allData) {
      return new sendAjax('saveKonData', {
        id: allData.id,
        key: key,
        val: allData[key]
      }, function() {});
    };

    return createZpMenKonTbl;

  })();


  /*
   * Модуль учёт -> настройки
   */

  (function($, window) {
    var accountingOptions;
    accountingOptions = (function() {
      accountingOptions.prototype.defaults = {
        start: false
      };

      accountingOptions.prototype.tabs = [
        {
          index: 0,
          name_en: 'options',
          name: 'Настройки'
        }
      ];

      function accountingOptions(el, options) {
        var self;
        this.$el = $(el);
        self = this;
        this.tabs2level = [
          {
            index: 0,
            name_en: 'konechniki',
            name: 'Конечники',
            click: function() {
              return new sendAjax('get_zp_kon_data', {
                options: 'all_data'
              }, function(response) {
                return self.body.html(new createZpMenKonTbl(response.data));
              });
            }
          }, {
            index: 1,
            name_en: 'reklamshchiki',
            name: 'Рекламщики',
            click: function() {
              return new sendAjax('get_zp_rek_data', {
                options: 'all_data'
              }, function(response) {
                return self.body.html(new createZpMenRekTbl(response.data));
              });
            }
          }, {
            index: 2,
            name_en: 'pensiya',
            name: 'Пенсия',
            click: function() {
              return new sendAjax('get_pension_tbl_data', {
                options: 'all_data'
              }, function(response) {
                return self.body.html(new createPensionTbl(response.data));
              });
            }
          }
        ];

        /*
         * добавление меню
         */
        this.addMenu();
        this.body = $(el).find('#js-main-accounting-div');
      }

      accountingOptions.prototype.click = function() {
        return this.mainTabHtml.click();
      };

      accountingOptions.prototype.konechniki = function() {
        new sendAjax('get_zp_kon_data', {
          options: 'all_data'
        }, function() {});
        return this.body.html('@body');
      };

      accountingOptions.prototype.reklamshchiki = function() {
        new sendAjax('get_zp_rek_data', {
          options: 'all_data'
        }, function() {});
        return this.body.html('@body');
      };

      accountingOptions.prototype.addMenu = function() {
        var i, j, len1, n, ref, results, section, self, ul;
        self = this;
        if (this.$el.find('#js-general-accounting-menu').length > 0) {
          ul = this.$el.find('#js-general-accounting-menu ul');
        } else {
          ul = $('<ul/>', {
            'class': 'central_menu'
          });
          this.$el.prepend($('<div/>', {
            'id': 'js-general-accounting-menu',
            'class': 'cabinet_top_menu first_line',
            html: ul
          }));
        }
        section = Number($.urlVar('section'));
        ref = this.tabs;
        results = [];
        for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
          n = ref[i];
          results.push(ul.append(this.mainTabHtml = new mainMenuTab(n, section, ul, 'section', function() {
            return self.addMenu2();
          })));
        }
        return results;
      };

      accountingOptions.prototype.addMenu2 = function() {
        var i, j, len1, n, num, ref, subsection, tab, tab1, ul;
        if (this.$el.find('#js-accounting-menu').length > 0) {
          ul = this.$el.find('#js-accounting-menu ul');
          ul.html('');
        } else {
          ul = $('<ul/>', {
            'class': 'central_menu'
          });
          ul.html('');
          this.$el.find('#js-general-accounting-menu').after($('<div/>', {
            'id': 'js-accounting-menu',
            'class': 'cabinet_top_menu',
            css: {
              'background': '#92b73e'
            },
            html: ul
          }));
        }
        subsection = Number($.urlVar('subsection'));
        num = 0;
        ref = this.tabs2level;
        for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
          n = ref[i];
          tab = new mainMenuTab(n, subsection, ul, 'subsection');
          ul.append(tab);
          if (num === 0) {
            tab1 = tab;
            num++;
          }
        }
        return tab1.click();
      };

      return accountingOptions;

    })();
    return $.fn.extend({
      accountingOptions: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('accountingOptions');
          if (!data) {
            $this.data('accountingOptions', (data = new accountingOptions(this, option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);

  (function($, window) {

    /*
     * Define the plugin class Invoice
     */
    var accountingCalculation;
    accountingCalculation = (function() {
      accountingCalculation.prototype.defaults = {
        start: false
      };

      accountingCalculation.prototype.tabs = [
        {
          index: 0,
          name_en: 'options',
          name: 'Учёт'
        }
      ];

      function accountingCalculation(el, options) {
        this.$el = $(el);

        /*
         * добавление меню
         */
        this.addMenu();

        /*
         * добавляем подменю
         */
        this.body = $(el).find('#js-main-accounting-div');
        this.body.html('').append($('<div/>', {
          html: '654654'
        }));
      }

      accountingCalculation.prototype.addMenu = function() {
        var i, j, len1, n, ref, results, section, self, ul;
        self = this;
        if (this.$el.find('#js-general-accounting-menu').length > 0) {
          ul = this.$el.find('#js-general-accounting-menu ul');
        } else {
          ul = $('<ul/>', {
            'class': 'central_menu'
          });
          this.$el.prepend($('<div/>', {
            'id': 'js-general-accounting-menu',
            'class': 'cabinet_top_menu first_line',
            html: ul
          }));
        }
        section = Number($.urlVar('section'));
        ref = this.tabs;
        results = [];
        for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
          n = ref[i];
          results.push(ul.append(this.mainTabHtml = new mainMenuTab(n, section, ul, 'section', function() {
            return self.addMenu2();
          })));
        }
        return results;
      };

      accountingCalculation.prototype.addMenu2 = function() {
        var self, subsection, ul;
        self = this;
        if (this.$el.find('#js-accounting-menu').length > 0) {
          ul = this.$el.find('#js-accounting-menu ul');
          ul.html('').css({
            'float': 'left'
          });
        } else {
          ul = $('<ul/>', {
            'class': 'central_menu'
          }).css({
            'float': 'left'
          });
          this.$el.append($('<div/>', {
            'id': 'js-accounting-menu',
            'class': 'cabinet_top_menu first_line',
            html: ul
          }));
        }
        subsection = Number($.urlVar('subsection'));
        new sendAjax('get_managers_tabs', {}, function(response) {
          var i, j, len1, n, ref, results;
          console.log(response);
          ref = response.data;
          results = [];
          for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
            n = ref[i];
            results.push(ul.append(new mainMenuTab(n, subsection, ul, 'manager_id', function() {
              return self.constructMainContent();
            })));
          }
          return results;
        });
        return {
          constructMainContent: function() {}
        };
      };

      return accountingCalculation;

    })();
    return $.fn.extend({
      accountingCalculation: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('accountingCalculation');
          if (!data) {
            $this.data('accountingCalculation', (data = new accountingCalculation(this, option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);


  /*
   * прототип html пункта главного меню
   */

  mainMenuTab = (function() {
    function mainMenuTab(tab, section, menu, key, func) {
      var li, span;
      if (func == null) {
        func = function() {
          return true;
        };
      }
      li = $('<li/>', {
        click: function(e) {
          $.urlVar(key, tab.index);
          menu.find('.selected').removeClass('selected');
          $(this).addClass('selected');
          if (tab.click !== void 0) {
            tab.click();
          }
          return func();
        }
      });
      li.append(span = $('<span/>'));
      span.append($('<div/>', {
        'class': 'border',
        'html': tab.name
      }));
      li.data('index', tab.index);
      if (tab.index === section) {
        li.addClass('selected');
      }
      return li;
    }

    return mainMenuTab;

  })();

}).call(this);

//# sourceMappingURL=accounting.js.map
