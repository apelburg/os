// Generated by CoffeeScript 1.9.3

/*
 * class Invoice
 *
 * @author    Alexey Kapitonov
 * @email     kapitonoval2012@gmail.com
 * @version   06.06.2016 11:03
 */


/*
 * прототип объекта данных строки таблицы пенсий
 */

(function() {
  var accrualsObj, accruals_tbl, billTrPrototipe, compRow, createPensionTbl, createZpMenKonTbl, createZpMenRekTbl, create_bill_tbl, credit_tbl, credit_tbl_rowObj, dopCompRow, dopCompRowObj, mainMenuTab, payments_tbl, payments_tblObj, pensionTrObj, row, rowCredit, tdEditRow, zpMenRekTrObj,
    slice = [].slice;

  pensionTrObj = (function() {
    pensionTrObj.prototype.defaults = {
      id: 0,
      date: '00.00.0000',
      n_0_2: '0.00',
      n_2_3: '0.00',
      n_3_5: '0.00',
      n_5_7: '0.00',
      n_7_10: '0.00',
      n_10_15: '0.00',
      n_15_99: '0.00'
    };

    pensionTrObj.prototype.enterObj = {};

    pensionTrObj.prototype.options = {};

    function pensionTrObj(data) {
      var el, key;
      if (data == null) {
        data = {};
      }
      this.options = {};
      if (data.edit === void 0) {
        data.edit = 1;
      }
      for (key in data) {
        el = data[key];
        if (el !== null) {
          this.options[key] = el;
        }
      }
      return $.extend({}, this.defaults, this.options);
    }

    return pensionTrObj;

  })();


  /*
   * прототип редактируемой ячейки в таблице
   */

  tdEditRow = (function() {
    function tdEditRow(val, key, type, saveFunc) {
      var td;
      if (type == null) {
        type = 'int';
      }
      if (saveFunc == null) {
        saveFunc = function() {
          return true;
        };
      }
      td = $('<td/>', {
        'html': val,
        'class': 'mayBeEdit',
        click: function() {
          var input;
          if ($(this).find('input').length === 0) {
            $(this).html(input = $('<input/>', {
              'type': 'text',
              'val': $(this).html(),
              keyup: function(e) {
                if (e.keyCode === 13) {
                  return $(this).blur();
                }
              },
              change: function() {
                var data;
                data = $(this).parent().data();
                data[key] = $(this).val();
                return $(this).parent().data(data);
              },
              focus: function() {
                var t;
                if (Number($(this).val()) === 0) {
                  return $(this).val('');
                } else {
                  t = $(this);
                  return setTimeout(function() {
                    return t.select();
                  }, 50);
                }
              }
            }));
            if (type === 'date') {
              input.addClass('date');
              input.datetimepicker({
                timepicker: false,
                dayOfWeekStart: 1,
                onSelectDate: function(ct, $i) {
                  return $i.blur();
                },
                onGenerate: function(ct) {
                  $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
                  return $(this).find('.xdsoft_date');
                },
                closeOnDateSelect: true,
                format: 'd.m.Y'
              });
            }
            $(this).addClass('tdInputHere');
            return input.css('textAlign', $(this).css('textAlign')).focus().blur(function() {
              var data;
              data = $(this).parent().parent().data();
              if (Number($(this).val()) === 0 || isNaN($(this).val()) && type === 'int') {
                $(this).val(0);
              }
              if (type === 'money') {
                if (isNaN($(this).val())) {
                  $(this).val(data[key]);
                } else {
                  $(this).val(round_money(Number($(this).val())));
                }
              }
              if (data[key] !== $(this).val()) {
                data[key] = $(this).val();
                $(this).parent().parent().data(data);
                saveFunc(key, data);
              }
              $(this).parent().removeClass('tdInputHere');
              return $(this).replaceWith(data[key]);
            });
          }
        }
      });
      if (type === 'date') {
        td.addClass('date');
      }
      return td;
    }

    return tdEditRow;

  })();


  /*
   * таблица пенсии
   */

  createPensionTbl = (function() {
    function createPensionTbl(data) {
      var i, j, len, n, tbl, tblCase;
      tbl = $('<table/>', {
        id: 'js-options-tbl'
      });
      tbl.append(this.penciaTrHead());
      for (i = j = 0, len = data.length; j < len; i = ++j) {
        n = data[i];
        tbl.append(this.penciaTrSimple(new pensionTrObj(data[i])));
      }
      tbl.append(this.penciaTrFooter());
      tblCase = $('<div/>').css({
        'width': "1020px"
      });
      return tblCase.append(tbl);
    }

    createPensionTbl.prototype.penciaTrFooter = function() {
      var j, num, self, tr;
      self = this;
      tr = $('<tr/>', {
        "class": 'footer'
      });
      tr.append($('<td/>'));
      for (num = j = 9; j >= 1; num = --j) {
        tr.append($('<td/>', {
          "class": 'mayBeEdit',
          click: function() {
            var t;
            t = $(this);
            new sendAjax('create_pension_row', {}, function(response) {
              var obj;
              obj = self.penciaTrSimple(new pensionTrObj(response.data));
              tr.before(obj);
              return obj.find('td').eq(t.index()).click();
            });
          }
        }));
      }
      tr.append($('<td/>'));
      return tr;
    };

    createPensionTbl.prototype.penciaTrHead = function() {
      var px, tr;
      tr = $('<tr/>', {
        "class": 'head'
      });
      tr.append($('<th/>'));
      tr.append($('<th/>', {
        html: 'Исп'
      }));
      px = 86;
      tr.append($('<th/>', {
        html: 'действует с:',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '0 - 2',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '2 - 3',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '3 - 5',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '5 - 7',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '7 - 10',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '10 - 15',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: '15 - 99'
      }));
      tr.append($('<th/>'));
      return tr;
    };

    createPensionTbl.prototype.penciaTrSimple = function(data) {
      var tr;
      tr = $('<tr/>', {
        "class": 'body'
      });
      if (Number(data.checked) > 0) {
        tr.addClass('checked');
      }
      tr.data(data);
      tr.append($('<td/>'));
      tr.append($('<td/>', {
        click: function() {
          var curData, prevCheckData;
          prevCheckData = [];
          prevCheckData.id = 0;
          tr.parent().find('tr.checked').each(function() {
            var prevCheckTr;
            prevCheckTr = $(this);
            prevCheckData = prevCheckTr.data();
            prevCheckData.checked = 0;
            return prevCheckTr.data(prevCheckData).removeClass('checked');
          });
          curData = tr.data();
          curData.checked = 1;
          tr.data(curData).addClass('checked');
          return new sendAjax('check_other_pension_row', {
            prev_id: prevCheckData.id,
            new_id: curData.id
          });
        }
      }));
      tr.append(new tdEditRow(data.date, 'date', 'date', this.saveFunc));
      tr.append(new tdEditRow(data.n_0_2, 'n_0_2', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.n_2_3, 'n_2_3', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.n_3_5, 'n_3_5', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.n_5_7, 'n_5_7', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.n_7_10, 'n_7_10', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.n_10_15, 'n_10_15', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.n_15_99, 'n_15_99', 'money', this.saveFunc));
      tr.append($('<td/>', {
        "class": "delete_row",
        click: function() {
          if (Number(tr.data().checked) > 0) {
            echo_message_js("Нельзя удалить выбранную строку.", 'error_message');
            return false;
          }
          return new modalConfirm({
            html: 'Вы уверены, что хотите удалить данную строку?'
          }, function() {
            return new sendAjax('delete_pension_row', {
              id: data.id
            }, function() {
              return tr.remove();
            });
          });
        }
      }));
      return tr;
    };

    createPensionTbl.prototype.saveFunc = function(key, allData) {
      return new sendAjax('savePensionData', {
        id: allData.id,
        key: key,
        val: allData[key]
      }, function() {});
    };

    return createPensionTbl;

  })();


  /*
   * прототип объекта данных строки таблицы мен рекламщики
   */

  zpMenRekTrObj = (function() {
    zpMenRekTrObj.prototype.defaults = {
      id: 0,
      date: '00.00.0000',
      profit_start: '0.00',
      profit_end: '0.00',
      salary: '0.00',
      premium: '0.00',
      "return": '0.00',
      premium2: '0.00'
    };

    zpMenRekTrObj.prototype.enterObj = {};

    zpMenRekTrObj.prototype.options = {};

    function zpMenRekTrObj(data) {
      var el, key;
      if (data == null) {
        data = {};
      }
      this.options = {};
      if (data.edit === void 0) {
        data.edit = 1;
      }
      for (key in data) {
        el = data[key];
        if (el !== null) {
          this.options[key] = el;
        }
      }
      return $.extend({}, this.defaults, this.options);
    }

    return zpMenRekTrObj;

  })();


  /*
   * таблица зарплат мен рекламщики
   */

  createZpMenRekTbl = (function() {
    createZpMenRekTbl.prototype.width = 900;

    function createZpMenRekTbl(data) {
      var i, j, len, n, tbl, tblCase;
      tbl = $('<table/>', {
        id: 'js-options-tbl',
        'class': 'zp_men_rek'
      });
      tbl.append(this.trHead());
      for (i = j = 0, len = data.length; j < len; i = ++j) {
        n = data[i];
        tbl.append(this.trSimple(new zpMenRekTrObj(data[i])));
      }
      tbl.append(this.trFooter());
      tblCase = $('<div/>').css({
        'width': this.width
      });
      return tblCase.append(tbl);
    }

    createZpMenRekTbl.prototype.trFooter = function() {
      var j, num, self, tr;
      self = this;
      tr = $('<tr/>', {
        "class": 'footer'
      });
      for (num = j = 6; j >= 1; num = --j) {
        tr.append($('<td/>', {
          "class": 'mayBeEdit',
          click: function() {
            var t;
            t = $(this);
            new sendAjax('create_men_zp_rec_row', {}, function(response) {
              var obj;
              obj = self.trSimple(new zpMenRekTrObj(response.data));
              tr.before(obj);
              return obj.find('td').eq(t.index()).click();
            });
          }
        }));
      }
      tr.append($('<td/>'));
      return tr;
    };

    createZpMenRekTbl.prototype.trHead = function() {
      var px, tr;
      tr = $('<tr/>', {
        "class": 'head'
      });
      px = 250;
      tr.append($('<th/>', {
        html: 'прибыль от',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'прибыль до',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'оклдад',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'премия(%)'
      }));
      tr.append($('<th/>', {
        html: 'оборот',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'премия(%)'
      }));
      tr.append($('<th/>'));
      return tr;
    };

    createZpMenRekTbl.prototype.trSimple = function(data) {
      var tr;
      tr = $('<tr/>', {
        "class": 'body'
      });
      if (Number(data.checked) > 0) {
        tr.addClass('checked');
      }
      tr.data(data);
      tr.append(new tdEditRow(data.profit_start, 'profit_start', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.profit_end, 'profit_end', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.salary, 'salary', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.premium, 'premium', 'money', this.saveFunc));
      tr.append(new tdEditRow(data["return"], 'return', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.premium, 'premium2', 'money', this.saveFunc));
      tr.append($('<td/>', {
        "class": "delete_row",
        click: function() {
          if (Number(tr.data().checked) > 0) {
            echo_message_js("Нельзя удалить выбранную строку.", 'error_message');
            return false;
          }
          return new modalConfirm({
            html: 'Вы уверены, что хотите удалить данную строку?'
          }, function() {
            return new sendAjax('delete_zp_men_rek_row', {
              id: data.id
            }, function() {
              return tr.remove();
            });
          });
        }
      }));
      return tr;
    };

    createZpMenRekTbl.prototype.saveFunc = function(key, allData) {
      return new sendAjax('saveRecData', {
        id: allData.id,
        key: key,
        val: allData[key]
      }, function() {});
    };

    return createZpMenRekTbl;

  })();


  /*
   * таблица зарплат мен конечники
   */

  createZpMenKonTbl = (function() {
    createZpMenKonTbl.prototype.width = 900;

    function createZpMenKonTbl(data) {
      var i, j, len, n, tbl, tblCase;
      tbl = $('<table/>', {
        id: 'js-options-tbl',
        'class': 'zp_men_kon'
      });
      tbl.append(this.trHead());
      for (i = j = 0, len = data.length; j < len; i = ++j) {
        n = data[i];
        tbl.append(this.trSimple(new zpMenRekTrObj(data[i])));
      }
      tbl.append(this.trFooter());
      tblCase = $('<div/>').css({
        'width': this.width
      });
      return tblCase.append(tbl);
    }

    createZpMenKonTbl.prototype.trFooter = function() {
      var j, num, self, tr;
      self = this;
      tr = $('<tr/>', {
        "class": 'footer'
      });
      for (num = j = 4; j >= 1; num = --j) {
        tr.append($('<td/>', {
          "class": 'mayBeEdit',
          click: function() {
            var t;
            t = $(this);
            new sendAjax('create_men_zp_kon_row', {}, function(response) {
              var obj;
              obj = self.trSimple(new zpMenRekTrObj(response.data));
              tr.before(obj);
              return obj.find('td').eq(t.index()).click();
            });
          }
        }));
      }
      tr.append($('<td/>'));
      return tr;
    };

    createZpMenKonTbl.prototype.trHead = function() {
      var px, tr;
      tr = $('<tr/>', {
        "class": 'head'
      });
      px = 200;
      tr.append($('<th/>', {
        html: 'прибыль от',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'прибыль до',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'оклдад',
        css: {
          'width': px
        }
      }));
      tr.append($('<th/>', {
        html: 'премия(%)'
      }));
      tr.append($('<th/>'));
      return tr;
    };

    createZpMenKonTbl.prototype.trSimple = function(data) {
      var tr;
      tr = $('<tr/>', {
        "class": 'body'
      });
      if (Number(data.checked) > 0) {
        tr.addClass('checked');
      }
      tr.data(data);
      tr.append(new tdEditRow(data.profit_start, 'profit_start', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.profit_end, 'profit_end', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.salary, 'salary', 'money', this.saveFunc));
      tr.append(new tdEditRow(data.premium, 'premium', 'money', this.saveFunc));
      tr.append($('<td/>', {
        "class": "delete_row",
        click: function() {
          if (Number(tr.data().checked) > 0) {
            echo_message_js("Нельзя удалить выбранную строку.", 'error_message');
            return false;
          }
          return new modalConfirm({
            html: 'Вы уверены, что хотите удалить данную строку?'
          }, function() {
            return new sendAjax('delete_zp_men_kon_row', {
              id: data.id
            }, function() {
              return tr.remove();
            });
          });
        }
      }));
      return tr;
    };

    createZpMenKonTbl.prototype.saveFunc = function(key, allData) {
      return new sendAjax('saveKonData', {
        id: allData.id,
        key: key,
        val: allData[key]
      }, function() {});
    };

    return createZpMenKonTbl;

  })();


  /*
   * прототип - вкладка настройки
   */

  (function($, window) {
    var accountingOptions;
    accountingOptions = (function() {
      accountingOptions.prototype.defaults = {
        start: false
      };

      accountingOptions.prototype.tabs = [
        {
          index: 0,
          name_en: 'options',
          name: 'Настройки'
        }
      ];

      function accountingOptions(el, options) {
        var self;
        this.$el = $(el);
        self = this;
        this.tabs2level = [
          {
            index: 0,
            name_en: 'konechniki',
            name: 'Конечники',
            click: function() {
              return new sendAjax('get_zp_kon_data', {
                options: 'all_data'
              }, function(response) {
                return self.constructMainContent(new createZpMenKonTbl(response.data));
              });
            }
          }, {
            index: 1,
            name_en: 'reklamshchiki',
            name: 'Рекламщики',
            click: function() {
              return new sendAjax('get_zp_rek_data', {
                options: 'all_data'
              }, function(response) {
                return self.constructMainContent(new createZpMenRekTbl(response.data));
              });
            }
          }, {
            index: 2,
            name_en: 'pensiya',
            name: 'Пенсия',
            click: function() {
              return new sendAjax('get_pension_tbl_data', {
                options: 'all_data'
              }, function(response) {
                return self.constructMainContent(new createPensionTbl(response.data));
              });
            }
          }
        ];
        this.body = $(el).find('#js-main-accounting-div');
        this.body.html('');

        /*
         * добавление меню
         */
        this.addMenu();
      }

      accountingOptions.prototype.constructMainContent = function(content) {
        var div;
        if (this.body.find('#js-accounting-main-content-container').length > 0) {
          this.$el.find('#js-accounting-main-content-container').remove();
        }
        this.body.append(div = $('<div/>', {
          'id': 'js-accounting-main-content-container',
          html: ''
        }));
        return div.append(content);
      };

      accountingOptions.prototype.click = function() {
        return this.mainTabHtml.click();
      };

      accountingOptions.prototype.addMenu = function() {
        var i, j, len, n, ref, results, section, self, ul;
        self = this;
        if (this.$el.find('#js-general-accounting-menu').length > 0) {
          ul = this.$el.find('#js-general-accounting-menu ul');
        } else {
          ul = $('<ul/>', {
            'class': 'central_menu'
          });
          this.$el.prepend($('<div/>', {
            'id': 'js-general-accounting-menu',
            'class': 'cabinet_top_menu first_line',
            html: ul
          }));
        }
        section = Number($.urlVar('section'));
        ref = this.tabs;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          n = ref[i];
          results.push(ul.append(this.mainTabHtml = new mainMenuTab(n, section, ul, 'section', function() {
            self.addMenu2();
            $.delUrlVal('manager_id');
            $.delUrlVal('month_number');
            return $.delUrlVal('year');
          })));
        }
        return results;
      };

      accountingOptions.prototype.addMenu2 = function() {
        var i, j, len, n, num, ref, subsection, tab, tab1, ul;
        this.body.html('');
        if (this.$el.find('#js-accounting-menu').length > 0) {
          ul = this.$el.find('#js-accounting-menu ul');
          ul.html('');
        } else {
          ul = $('<ul/>', {
            'class': 'central_menu'
          });
          ul.html('');
          this.body.append($('<div/>', {
            'id': 'js-accounting-menu',
            'class': 'cabinet_top_menu',
            css: {
              'background': '#92b73e'
            },
            html: ul
          }));
        }
        subsection = Number($.urlVar('subsection'));
        num = 0;
        ref = this.tabs2level;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          n = ref[i];
          tab = new mainMenuTab(n, subsection, ul, 'subsection');
          ul.append(tab);
          if (num === 0) {
            tab1 = tab;
            num++;
          }
          if (num === 0 && subsection === void 0) {
            tab1 = tab;
            num++;
          } else if (subsection !== void 0) {
            if (Number(subsection) === Number(tab.data().index)) {
              tab1 = tab;
            }
          }
        }
        return tab1.click();
      };

      return accountingOptions;

    })();
    return $.fn.extend({
      accountingOptions: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('accountingOptions');
          if (!data) {
            $this.data('accountingOptions', (data = new accountingOptions(this, option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);


  /*
   * прототип объекта - вкладка учёт -> таблица начислений
   */

  accrualsObj = (function() {
    function accrualsObj(data) {
      var defaults, el, key, options;
      if (data == null) {
        data = {};
      }
      defaults = [
        {
          i: 1,
          id: 0,
          money: '0.00',
          flag_r: 0,
          r: '0.00'
        }, {
          i: 2,
          id: 0,
          money: '0.00',
          flag_r: 0,
          r: '0.00'
        }, {
          i: 3,
          id: 0,
          money: '0.00',
          flag_r: 0,
          r: '0.00'
        }, {
          i: 4,
          id: 0,
          money: '0.00',
          flag_r: 1,
          r: '0.00'
        }
      ];
      options = [];
      for (key in data) {
        el = data[key];
        defaults[key] = el;
      }
      return defaults;
    }

    return accrualsObj;

  })();


  /*
   * прототип - вкладка учёт -> таблица начислений
   */

  accruals_tbl = (function() {
    accruals_tbl.prototype.width = 320;

    accruals_tbl.prototype.paddingBlock = 6;

    accruals_tbl.prototype.accruals_summ = 0;

    function accruals_tbl(data, dataComp, dataDopComp, dataPayments, options) {
      if (dataComp == null) {
        dataComp = {};
      }
      if (dataDopComp == null) {
        dataDopComp = {};
      }
      if (dataPayments == null) {
        dataPayments = {};
      }
      this.data = data;
      this.dataComp = dataComp;
      this.dataDopComp = dataDopComp;
      this.dataPayments = dataPayments;
      if (options[0] !== void 0) {
        this.options = options[0];
      }
    }

    accruals_tbl.prototype.init = function() {
      var tblCase;
      this.pribl = 0;
      this.tbl = $('<table/>', {
        id: 'js-accruals-tbl',
        'class': 'accounting-tbl'
      });
      this.tbl.append(this.trHead(this.data));
      this.tbl.append(this.trBody(this.data));
      this.tbl.append(this.trCompensationRows(this.dataComp));
      this.tbl.append(this.trDopCompRow(this.dataDopComp));
      if (Number(this.data[0].id) > 0) {
        this.tbl.append(this.trFooter(this.data));
      }
      this.tbl.find('tr.body.str:last td,tr.body.compRow:last td').css({
        'borderBottom': '1px solid grey'
      });
      tblCase = $('<div/>').css({
        'float': 'left',
        'width': this.width,
        'paddingRight': this.paddingBlock,
        'paddingBottom': this.paddingBlock
      });
      this.calcTbl();
      return tblCase.append(this.tbl);
    };

    accruals_tbl.prototype.payments_tbl = function() {
      this.dataPayments.the_balance = this.the_balance;
      this.paymentsTable = new payments_tbl(new payments_tblObj(this.dataPayments), this.options);
      return this.paymentsTbl = this.paymentsTable.init();
    };

    accruals_tbl.prototype.trOffset = function() {
      var html;
      return html = [];
    };

    accruals_tbl.prototype.trOffsetDop = function() {
      var html;
      return html = [];
    };

    accruals_tbl.prototype.trHead = function(data) {
      var self, tr;
      self = this;
      this.recalc_button = $('<button/>', {
        html: '',
        click: function() {
          return new sendAjax("calculate_and_update_accruals_tbl", {
            id: data[0].id
          }, function(response) {
            var accruals, options;
            options = [
              {
                access: response.data.access,
                user_id: response.data.user_id
              }
            ];
            accruals = new accruals_tbl(new accrualsObj(response.data.accruals), response.data.compensation, response.data.dop_compensation, response.data.payments, options);
            return self.tbl.replaceWith(accruals.init());
          });
        }
      });
      tr = $('<tr/>', {
        "class": 'head'
      });
      tr.append($('<th/>', {
        html: 'Начисления'
      }));
      tr.append(this.accruals_summ = $('<th/>', {
        html: round_money(this.pribl)
      }));
      tr.append($('<th/>', {
        html: this.recalc_button
      }));
      return tr.append($('<th/>', {
        html: ''
      }));
    };

    accruals_tbl.prototype.trBody = function(data) {
      var i, j, ref, rows;
      rows = [];
      for (i = j = 0, ref = data.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        rows.push(new row(data[i], this));
      }
      return rows;
    };

    accruals_tbl.prototype.trCompensationRows = function(data) {
      var i, j, ref, rows;
      rows = [];
      if (data.length > 0) {
        for (i = j = 0, ref = data.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          rows.push(new compRow(data[i], this));
        }
      }
      return rows;
    };

    accruals_tbl.prototype.trDopCompRow = function(data) {
      var i, j, ref, rows;
      rows = [];
      if (data.length > 0) {
        for (i = j = 0, ref = data.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          rows.push(new dopCompRow(data[i], this));
        }
      }
      return rows;
    };

    accruals_tbl.prototype.trFooter = function(data) {
      var rows, self;
      self = this;
      if (Number(this.options.access) !== 1 && Number(this.options.access) !== 2) {
        return [];
      }
      rows = $('<tr/>');
      return rows.append($('<td/>', {
        'colspan': 4,
        html: $('<div/>', {
          html: 'Добавить компенсацию',
          'class': 'link_add',
          click: function() {
            var html, win_inp_name, win_inp_val;
            html = $('<div/>', {
              id: 'user_window_compensations_form'
            });
            html.append($('<div/>').append(win_inp_name = $('<input/>', {
              placeholder: 'название'
            })));
            html.append($('<div/>').append(win_inp_val = $('<input/>', {
              placeholder: 'стоимость',
              val: round_money(0),
              focus: function() {
                var t;
                if (Number($(this).val()) === 0) {
                  return $(this).val('');
                } else {
                  t = $(this);
                  return setTimeout(function() {
                    return t.select();
                  }, 50);
                }
              },
              blur: function() {
                return $(this).val(round_money(Number($(this).val())));
              }
            })));
            return self.win_window = new modalWindow({
              html: html,
              maxHeight: '100%',
              maxWidth: '90%',
              title: 'Завести строку компенсации',
              buttons: [
                {
                  text: 'Закрыть',
                  "class": 'button_yes_or_no no',
                  click: function() {
                    return $(self.win_window.winDiv[0]).dialog('close').dialog('destroy').remove();
                  }
                }, {
                  text: 'Создать',
                  "class": 'button_yes_or_no',
                  click: function() {
                    return new sendAjax('create_dop_compensation', {
                      id: data[0].id,
                      name: win_inp_name.val(),
                      val: win_inp_val.val(),
                      flag_r: '1'
                    }, function(response) {
                      rows.before(new dopCompRow(new dopCompRowObj(response.data), self));
                      self.calcTbl();
                      return $(self.win_window.winDiv[0]).dialog('close').dialog('destroy').remove();
                    });
                  }
                }
              ]
            }, {
              closeOnEscape: true,
              single: true,
              close: function(event, ui) {
                return $('#quick_button_div .button').eq(1).removeClass('checked');
              }
            });
          }
        })
      }));
    };

    accruals_tbl.prototype.calcTbl = function() {
      var itogo, real_ostatoc, self;
      self = this;
      this.the_balance = 0;
      this.tbl.find('.body').each(function() {
        var data, num;
        data = $(this).data();
        if (data.flag_r > 0) {
          num = data.r;
        } else {
          num = data.money;
        }
        if (data.name !== void 0) {
          return self.the_balance = self.the_balance + Number(num);
        } else {
          return self.the_balance = self.the_balance + Number(num);
        }
      });
      this.accruals_summ.html(round_money(this.the_balance));
      if ($('#js-payments-tbl').find('.footer td').eq(1).length > 0) {
        $('#js-payments-tbl').find('.footer td').eq(1).html(round_money(this.the_balance));
        itogo = Number($('#js-payments-tbl .head th').eq(1).html());
        real_ostatoc = Number(this.the_balance) - Number(itogo);
        $('#js-payments-tbl').find('.footer2 td').eq(1).html(round_money(real_ostatoc));
        if (real_ostatoc < 0) {
          return $('#js-payments-tbl').find('.footer2 td').eq(1).css({
            'color': 'red'
          });
        } else {
          return $('#js-payments-tbl').find('.footer2 td').eq(1).css({
            'color': 'grey'
          });
        }
      }
    };

    return accruals_tbl;

  })();


  /*
   * прототип объекта дополнителоьных компенсаций
   */

  dopCompRowObj = (function() {
    dopCompRowObj.prototype.defaults = {
      id: 0,
      name: 'без названия',
      r: '0.00'
    };

    function dopCompRowObj(data) {
      var el, key;
      if (data == null) {
        data = {};
      }
      this.options = {};
      for (key in data) {
        el = data[key];
        if (el !== null) {
          this.options[key] = el;
        }
      }
      return $.extend({}, this.defaults, this.options);
    }

    return dopCompRowObj;

  })();


  /*
   * прототип строк дополнителоьных компенсаций
   */

  dopCompRow = (function() {
    function dopCompRow(n, parentObj) {
      var del, tr;
      tr = $('<tr/>', {
        "class": 'body doPcompRow',
        click: function() {}
      }).data(n);
      tr.append($('<td/>', {
        html: n.name
      }));
      if (Number(parentObj.options.access) !== 1 && Number(parentObj.options.access) !== 2) {
        tr.append($('<td/>', {
          html: round_money(n.r)
        }));
      } else {
        tr.append($('<td/>', {
          html: $('<input/>', {
            val: round_money(n.r),
            focus: function() {
              var t;
              t = $(this);
              if (Number($(this).val()) === 0) {
                return $(this).val('');
              } else {
                return setTimeout(function() {
                  return t.select();
                }, 50);
              }
            },
            blur: function() {
              n.r = round_money(Number($(this).val()));
              tr.data(n);
              parentObj.calcTbl();
              $(this).val(n.r);
              return new sendAjax('save_dop_compensation_val', {
                id: n.id,
                val: n.r,
                key: 'r'
              });
            }
          })
        }));
      }
      del = $('<button/>', {
        html: 'X',
        "class": 'hand delete',
        click: function() {
          n.flag_r = 0;
          new sendAjax('delete_dop_compensation_val', {
            id: n.id
          });
          tr.remove();
          return parentObj.calcTbl();
        }
      });
      if (Number(parentObj.options.access) !== 1 && Number(parentObj.options.access) !== 2) {
        tr.append($('<td/>'));
      } else {
        tr.append($('<td/>', {
          html: del
        }));
      }
      tr.append($('<td/>'));
      return tr;
    }

    return dopCompRow;

  })();


  /*
   * прототип строки компенсаций
   */

  compRow = (function() {
    function compRow(n, parentObj) {
      var tr;
      tr = $('<tr/>', {
        "class": 'body compRow'
      }).data(n);
      tr.append($('<td/>', {
        html: n.name
      }));
      if (Number(n.flag_r) > 0) {
        if (Number(parentObj.options.access) !== 1 && Number(parentObj.options.access) !== 2) {
          tr.append($('<td/>', {
            html: round_money(n.r)
          }));
          tr.append($('<td/>'));
          tr.append($('<td/>'));
          return tr;
        }
        tr.append($('<td/>', {
          html: $('<input/>', {
            val: round_money(n.r),
            focus: function() {
              var t;
              t = $(this);
              if (Number($(this).val()) === 0) {
                return $(this).val('');
              } else {
                return setTimeout(function() {
                  return t.select();
                }, 50);
              }
            },
            blur: function() {
              n.r = round_money(Number($(this).val()));
              tr.data(n);
              parentObj.calcTbl();
              $(this).val(n.r);
              return new sendAjax('save_compensation_val', {
                id: n.id,
                key: 'r',
                val: n.r
              });
            }
          })
        }));
        tr.append($('<td/>', {
          html: $('<button/>', {
            html: 'Р',
            "class": 'hand',
            click: function() {
              n.flag_r = 0;
              new sendAjax('save_compensation_val', {
                id: n.id,
                key: 'flag_r',
                val: n.flag_r
              });
              tr.replaceWith(new compRow(n, parentObj));
              return parentObj.calcTbl();
            }
          })
        }));
      } else {
        if (Number(parentObj.options.access) !== 1 && Number(parentObj.options.access) !== 2) {
          tr.append($('<td/>', {
            html: round_money(n.money)
          }));
          tr.append($('<td/>'));
          tr.append($('<td/>'));
          return tr;
        }
        tr.append($('<td/>', {
          html: round_money(n.money)
        }));
        tr.append($('<td/>', {
          html: $('<button/>', {
            html: 'А',
            click: function() {
              n.flag_r = 1;
              new sendAjax('save_compensation_val', {
                id: n.id,
                key: 'flag_r',
                val: n.flag_r
              });
              tr.replaceWith(new compRow(n, parentObj));
              return parentObj.calcTbl();
            }
          })
        }));
      }
      tr.append($('<td/>'));
      return tr;
    }

    return compRow;

  })();


  /*
   * прототип строк оклад/премия/пенсия/бонус
   */

  row = (function() {
    function row(n, parentObj) {
      var col, col1, tr;
      tr = $('<tr/>', {
        "class": 'body str'
      }).data(n);
      if (Number(n.i) === 1) {
        col = 'salary_r_fl';
        col1 = 'salary_r';
        tr.append($('<td/>', {
          html: 'Оклад'
        }));
      }
      if (Number(n.i) === 2) {
        col = 'premium_r_fl';
        col1 = 'premium_r';
        tr.append($('<td/>', {
          html: 'Премия'
        }));
      }
      if (Number(n.i) === 3) {
        col = 'pension_r_fl';
        col1 = 'pension_r';
        tr.append($('<td/>', {
          html: 'Пенсия'
        }));
      }
      if (Number(n.i) === 4) {
        col = 'none';
        col1 = 'bonus';
        tr.append($('<td/>', {
          html: 'Бонус'
        }));
      }
      if (Number(n.i) === 4) {
        if (Number(parentObj.options.access) !== 1 && Number(parentObj.options.access) !== 2) {
          tr.append($('<td/>', {
            html: round_money(n.money)
          }));
          tr.append($('<td/>'));
          tr.append($('<td/>'));
          return tr;
        }
        tr.append($('<td/>', {
          html: $('<input/>', {
            val: round_money(n.money),
            "class": 'mone',
            focus: function() {
              var t;
              t = $(this);
              if (Number($(this).val()) === 0) {
                return $(this).val('');
              } else {
                return setTimeout(function() {
                  return t.select();
                }, 50);
              }
            },
            blur: function() {
              var t;
              t = $(this);
              if (Number(n.id) !== 0) {
                n.flag_r = 0;
                n.money = round_money(Number($(this).val()));
                tr.data(n);
                parentObj.calcTbl();
                new sendAjax('save_accruals_val', {
                  id: n.id,
                  key: col1,
                  val: n.money
                });
                return $(this).val(n.money);
              } else {
                return new sendAjax('create_new_accruals_calc', {
                  key: col1,
                  val: Number(t.val(n.money))
                }, function(response) {
                  var accruals, options;
                  options = [
                    {
                      access: response.data.access,
                      user_id: response.data.user_id
                    }
                  ];
                  accruals = new accruals_tbl(new accrualsObj(response.data.accruals), response.data.compensation, response.data.dop_compensation, response.data.payments, options);
                  return tr.parent().parent().replaceWith(accruals.init());
                });
              }
            }
          })
        }));
        tr.append($('<td/>'));
      } else if (Number(n.flag_r) > 0) {
        if (Number(parentObj.options.access) !== 1 && Number(parentObj.options.access) !== 2) {
          tr.append($('<td/>', {
            html: round_money(n.money)
          }));
          tr.append($('<td/>'));
          tr.append($('<td/>'));
          return tr;
        }
        tr.append($('<td/>', {
          html: $('<input/>', {
            val: round_money(n.r),
            focus: function() {
              var t;
              t = $(this);
              if (Number($(this).val()) === 0) {
                return $(this).val('');
              } else {
                return setTimeout(function() {
                  return t.select();
                }, 50);
              }
            },
            blur: function() {
              if (Number(n.id) !== 0) {
                n.r = round_money(Number($(this).val()));
                tr.data(n);
                parentObj.calcTbl();
                $(this).val(n.r);
                return new sendAjax('save_accruals_val', {
                  id: n.id,
                  key: col1,
                  val: n.r
                });
              } else {
                return new sendAjax('create_new_accruals_calc', {
                  key: col1,
                  val: Number(t.val())
                }, function(response) {
                  var accruals, options;
                  options = [
                    {
                      access: response.data.access,
                      user_id: response.data.user_id
                    }
                  ];
                  accruals = new accruals_tbl(new accrualsObj(response.data.accruals), response.data.compensation, response.data.dop_compensation, response.data.payments, options);
                  return tr.parent().parent().replaceWith(accruals.init());
                });
              }
            }
          })
        }));
        tr.append($('<td/>', {
          html: $('<button/>', {
            html: 'Р',
            "class": 'hand',
            click: function() {
              if (Number(n.id) !== 0) {
                n.flag_r = 0;
                new sendAjax('save_accruals_val', {
                  id: n.id,
                  key: col,
                  val: n.flag_r
                });
                tr.replaceWith(new row(n, parentObj));
                return parentObj.calcTbl();
              } else {
                return new sendAjax('create_new_accruals_calc', {
                  key: col,
                  val: n.flag_r
                }, function(response) {
                  var accruals, options;
                  options = [
                    {
                      access: response.data.access,
                      user_id: response.data.user_id
                    }
                  ];
                  accruals = new accruals_tbl(new accrualsObj(response.data.accruals), response.data.compensation, response.data.dop_compensation, response.data.payments, options);
                  return tr.parent().parent().replaceWith(accruals.init());
                });
              }
            }
          })
        }));
      } else {
        if (Number(parentObj.options.access) !== 1 && Number(parentObj.options.access) !== 2) {
          tr.append($('<td/>', {
            html: round_money(n.money)
          }));
          tr.append($('<td/>'));
          tr.append($('<td/>'));
          return tr;
        }
        tr.append($('<td/>', {
          html: round_money(n.money)
        }));
        tr.append($('<td/>', {
          html: $('<button/>', {
            html: 'А',
            click: function() {
              n.flag_r = 1;
              if (Number(n.id) !== 0) {
                new sendAjax('save_accruals_val', {
                  id: n.id,
                  key: col,
                  val: n.flag_r
                });
                tr.replaceWith(new row(n, parentObj));
                return parentObj.calcTbl();
              } else {
                return new sendAjax('create_new_accruals_calc', {
                  key: col,
                  val: n.flag_r
                }, function(response) {
                  var accruals, options;
                  options = [
                    {
                      access: response.data.access,
                      user_id: response.data.user_id
                    }
                  ];
                  accruals = new accruals_tbl(new accrualsObj(response.data.accruals), response.data.compensation, response.data.dop_compensation, response.data.payments, options);
                  return tr.parent().parent().replaceWith(accruals.init());
                });
              }
            }
          })
        }));
      }
      tr.append($('<td/>'));
      return tr;
    }

    return row;

  })();


  /*
   * прототип объекта - вкладка учёт -> таблица Выплаты
   */

  payments_tblObj = (function() {
    payments_tblObj.prototype.defaults = {
      id: 0,
      oklad: '0.00',
      ovans_card: '0.00',
      ovans1: '0.00',
      ovans2: '0.00',
      ovans3: '0.00',
      flag_men: 0,
      flag_buch: 0,
      balance: 0,
      go_to_credit: 0
    };

    function payments_tblObj(data) {
      var el, key;
      if (data == null) {
        data = {};
      }
      this.options = {};
      for (key in data) {
        el = data[key];
        if (el !== null) {
          this.options[key] = el;
        }
      }
      return $.extend({}, this.defaults, this.options);
    }

    return payments_tblObj;

  })();


  /*
   * прототп - вкладка учёт -> таблица Выплаты
   */

  payments_tbl = (function() {
    payments_tbl.prototype.paddingBlock = 6;

    payments_tbl.prototype.accruals_summ = 0;

    payments_tbl.prototype.width = 350;

    function payments_tbl(data, options) {
      if (options == null) {
        options = {};
      }
      this.data = data;
      this.options = options;
      return this;
    }

    payments_tbl.prototype.init = function() {
      this.urlManId = Number($.urlVar('manager_id'));
      if (this.options.access !== 1 && this.options.access !== 2) {
        if (Number(this.options.user_id) !== Number(this.urlManId) && this.options.access === 5) {
          return [];
        }
      }
      this.tbl = $('<table/>', {
        id: 'js-payments-tbl',
        'class': 'accounting-tbl'
      }).data(this.data);
      this.tbl.append(this.trHead(this.data));
      this.tbl.append(this.trBody(this.data));
      this.tbl.append(this.trFooter(this.data));
      this.tbl.append(this.trFooter2(this.data));
      this.calcTbl();
      this.tblCase = $('<div/>').css({
        'float': 'left',
        'width': this.width,
        'paddingRight': this.paddingBlock,
        'paddingBottom': this.paddingBlock
      });
      return this.tblCase.append(this.tbl);
    };

    payments_tbl.prototype.the_balance_new = function(data) {
      return this.to_payment.html(data);
    };

    payments_tbl.prototype.trHead = function(data) {
      var self, tr;
      self = this;
      this.recalc_button = $('<button/>', {
        html: '',
        'class': 'reload',
        click: function() {
          return new sendAjax("calculate_and_update_payment_tbl", {
            id: data.id
          }, function(response) {
            var tbl;
            tbl = new payments_tbl(new payments_tblObj(response.data.payments), self.options);
            return self.tblCase.replaceWith(tbl.init());
          });
        }
      });
      this.to_right = '';
      if (Number(data.go_to_credit) === 555) {
        this.to_right = $('<button/>', {
          html: '',
          'class': 'to_right',
          click: function() {
            var message;
            message = 'Отрицательный баланс будет перенесён в блок "Кредита",<br> при этом все действия с блоками "Начислений" и "Выплат" будут заблокированы.<br> Проделжить?';
            return new modalConfirm({
              html: message
            }, function() {
              return new sendAjax("update_payments_row", {
                id: data.id,
                key: 'go_to_credit',
                val: '1'
              }, function(response) {
                var tbl;
                tbl = new payments_tbl(new payments_tblObj(response.data.payments), self.options);
                return self.tblCase.replaceWith(tbl.init());
              });
            });
          }
        });
      }
      tr = $('<tr/>', {
        "class": 'head'
      });
      tr.append($('<th/>', {
        html: 'Выплаты'
      }));
      tr.append(this.itogo = $('<th/>', {
        html: ''
      }));
      tr.append($('<th/>', {
        html: this.recalc_button
      }));
      tr.append(this.td_to_right = $('<th/>'));
      tr.append($('<th/>', {
        html: ''
      }));
      return tr;
    };

    payments_tbl.prototype.trBody = function(data) {
      var arr;
      arr = [];
      arr.push(this.trRow({
        id: data.id,
        name: 'Карта(а)',
        money: data.oklad,
        key: 'oklad',
        fl_b: data.oklad_fl_b,
        fl_m: data.oklad_fl_m
      }));
      arr.push(this.trRow({
        id: data.id,
        name: 'Карта(зп)',
        money: data.ovans_card,
        key: 'ovans_card',
        fl_b: data.ovans_card_fl_b,
        fl_m: data.ovans_card_fl_m
      }));
      arr.push(this.trRow({
        id: data.id,
        name: 'Аванс 1',
        money: data.ovans1,
        key: 'ovans1',
        fl_b: data.ovans1_fl_b,
        fl_m: data.ovans1_fl_m
      }, {
        edit: true,
        copy: true
      }));
      arr.push(this.trRow({
        id: data.id,
        name: 'Аванс 2',
        money: data.ovans2,
        key: 'ovans2',
        fl_b: data.ovans2_fl_b,
        fl_m: data.ovans2_fl_m
      }, {
        edit: true,
        copy: true
      }));
      arr.push(this.trRow({
        id: data.id,
        name: 'Аванс 3',
        money: data.ovans3,
        key: 'ovans3',
        fl_b: data.ovans3_fl_b,
        fl_m: data.ovans3_fl_m
      }, {
        edit: true,
        copy: true
      }));
      return arr;
    };

    payments_tbl.prototype.trRow = function(params, options) {
      var tr;
      if (options == null) {
        options = [];
      }
      tr = $('<tr/>', {
        "class": 'body'
      }).data(params);
      tr.append($('<td/>', {
        html: params.name
      }));
      if (options.edit && Number(params.fl_m) === 0 && (Number(this.options.access) === 2 || Number(this.options.access) === 1)) {
        tr.append($('<td/>', {
          html: this.inputMoney(params.id, round_money(params.money), params.key, tr, params, options)
        }));
      } else {
        tr.append($('<td/>', {
          html: round_money(params.money)
        }));
      }
      tr.append($('<td/>', {
        html: this.buttton(params.id, 'В', params.key, params.fl_b, tr, 'fl_b', params, options)
      }));
      tr.append($('<td/>', {
        html: this.buttton(params.id, 'П', params.key, params.fl_m, tr, 'fl_m', params, options)
      }));
      tr.append($('<td/>', {
        html: ''
      }));
      return tr.data(params);
    };

    payments_tbl.prototype.inputMoney = function(id, val, key, tr, params, options, ajax) {
      var self;
      if (ajax == null) {
        ajax = 'update_payments_row';
      }
      self = this;
      return $('<input/>', {
        val: round_money(val),
        focus: function() {
          var t;
          t = $(this);
          if (Number($(this).val()) === 0) {
            return $(this).val('');
          } else {
            return setTimeout(function() {
              return t.select();
            }, 50);
          }
        },
        blur: function() {
          var data;
          val = round_money(Number($(this).val()));
          data = tr.data();
          params.money = val;
          data.money = val;
          tr.data(data);
          $(this).val(val);
          new sendAjax(ajax, {
            id: id,
            key: key,
            val: val
          }, function(response) {
            var tbl;
            if (Number(id) === 0) {
              tbl = new payments_tbl(new payments_tblObj(response.data.payments), self.options);
              return self.tblCase.replaceWith(tbl.init());
            } else {
              return tr.replaceWith(self.trRow(params, options));
            }
          });
          return self.calcTbl();
        }
      });
    };

    payments_tbl.prototype.buttton = function(id, name, key, val, tr, type, params, options, ajax) {
      var dopClass, k, self;
      if (type == null) {
        type = 'fl_m';
      }
      if (ajax == null) {
        ajax = 'update_payments_row';
      }
      self = this;
      dopClass = '';
      if (type === 'fl_b' && Number(params.money) > 0 && Number(val) === 0) {
        dopClass = ' alert';
      }
      if (type === 'fl_m' && Number(params.fl_b) > 0 && Number(val) === 0) {
        dopClass = ' alert';
      } else if (Number(val) > 0) {
        dopClass = ' checked';
      }
      k = key + '_' + type;
      return $('<button/>', {
        html: name,
        "class": '' + dopClass,
        click: function() {
          if (type === 'fl_m') {
            if (Number(self.options.user_id) !== Number(self.urlManId) && Number(self.options.access) !== 1) {
              echo_message_js("У вас не достатчно прав для данного действия", "error_message", 1);
              return false;
            }
            if (Number(params.fl_b) === 0) {
              echo_message_js("Сначала действие должен подтвердить бухгалтер", "error_message", 1);
              return;
            }
          }
          if ((Number(self.options.access) !== 2 && Number(self.options.access) !== 1) && type === 'fl_b') {
            echo_message_js("У вас не достатчно прав для данного действия", "error_message", 1);
            return false;
          }
          if (type === 'fl_b' && Number(params.money) <= 0) {
            echo_message_js("Введите сумму", "error_message", 1);
            return;
          }
          if (Number(val) < 20) {
            if (Number(val) === 0) {
              $(this).addClass('checked');
              val = 1;
            } else {
              $(this).removeClass('checked');
              val = 0;
            }
            new sendAjax(ajax, {
              id: id,
              key: k,
              val: val
            }, function(response) {
              var tbl;
              if (Number(id) === 0) {
                tbl = new payments_tbl(new payments_tblObj(response.data.payments), self.options);
                return self.tblCase.replaceWith(tbl.init());
              }
            });
            params[type] = val;
            tr.replaceWith(self.trRow(params, options));
            return self.calcTbl();
          }
        }
      });
    };

    payments_tbl.prototype.trFooter = function(data) {
      var tr;
      tr = $('<tr/>', {
        "class": 'footer'
      });
      tr.append($('<td/>', {
        colspan: 2,
        html: "итого к оплате"
      }));
      tr.append(this.to_payment = $('<td/>', {
        colspan: 2,
        html: round_money(data.the_balance)
      }));
      tr.append($('<td/>'));
      return tr;
    };

    payments_tbl.prototype.trFooter2 = function(data) {
      var tr;
      tr = $('<tr/>', {
        "class": 'footer2'
      });
      tr.append($('<td/>', {
        colspan: 2,
        html: "текущий остаток к оплате"
      }));
      tr.append(this.to_payment2 = $('<td/>', {
        colspan: 2,
        html: round_money(data.the_balance)
      }));
      tr.append($('<td/>'));
      return tr;
    };

    payments_tbl.prototype.calcTbl = function() {
      var balance, itogo, real_ostatoc;
      itogo = 0;
      this.tbl.find('tr.body').each(function() {
        var data;
        data = $(this).data();
        return itogo += Number(data.money);
      });
      this.itogo.html(round_money(itogo));
      this.the_balance_new(balance = $('#js-accruals-tbl .head th').eq(1).html());
      real_ostatoc = Number(balance) - Number(itogo);
      this.to_payment2.html(round_money(real_ostatoc));
      if (real_ostatoc < 0) {
        this.to_payment2.css({
          'color': 'red'
        });
        if (Number(this.options.access) === 1 || Number(this.options.access) === 2) {
          return this.td_to_right.html(this.to_right);
        }
      } else {
        this.to_payment2.css({
          'color': 'grey'
        });
        if (Number(this.options.access) === 1 || Number(this.options.access) === 2) {
          return this.td_to_right.html('');
        }
      }
    };

    return payments_tbl;

  })();


  /*
   * прототип объекта строки - вкладка учёт -> таблица Кредит -> строка
   */

  credit_tbl_rowObj = (function() {
    credit_tbl_rowObj.prototype.defaults = {
      id: 0,
      money: '0.00',
      date: '00.00.00000',
      fl_m: 0,
      fl_b: 0,
      manager_id: 0
    };

    function credit_tbl_rowObj(data) {
      var el, key;
      if (data == null) {
        data = {};
      }
      this.options = {};
      for (key in data) {
        el = data[key];
        if (el !== null) {
          this.options[key] = el;
        }
      }
      return $.extend({}, this.defaults, this.options);
    }

    return credit_tbl_rowObj;

  })();


  /*
   * строка кредита
   */

  rowCredit = (function() {
    rowCredit.prototype.inputMoney = function(id, val, key, tr, n, parentObj, ajax) {
      var self;
      if (ajax == null) {
        ajax = 'update_credit_row';
      }
      self = this;
      return $('<input/>', {
        "class": 'credit_money_div',
        val: round_money(val),
        focus: function() {
          var t;
          t = $(this);
          if (Number($(this).val()) === 0) {
            return $(this).val('');
          } else {
            return setTimeout(function() {
              return t.select();
            }, 50);
          }
        },
        blur: function() {
          val = round_money(Number($(this).val()));
          n.money = val;
          tr.data(n);
          $(this).val(val);
          new sendAjax(ajax, {
            id: id,
            key: key,
            val: val
          }, function(response) {
            return tr.replaceWith(new rowCredit(n, parentObj));
          });
          return parentObj.calcTbl();
        }
      });
    };

    function rowCredit(n, parentObj) {
      var dopclass, min, self, tr;
      self = this;
      tr = $('<tr/>', {
        "class": 'body'
      }).data(n);
      tr.append($('<td/>', {
        html: n.date
      }));
      tr.append($('<td/>', {
        html: min = $('<span/>', {
          "class": 'credit_money_pl_min'
        })
      }));
      if (Number(n.minus) > 0) {
        min.html('-').addClass('minus');
      } else {
        min.html('+').addClass('plus');
      }
      if (Number(n.fl_b) === 0) {
        tr.append($('<td/>', {
          html: self.inputMoney(n.id, n.money, 'money', tr, n, parentObj)
        }));
      } else {
        tr.append($('<td/>', {
          html: $('<div/>', {
            "class": 'credit_money_div',
            html: round_money(n.money)
          })
        }));
      }
      dopclass = '';
      if (Number(n.money) > 0 && Number(n.fl_b) === 0) {
        dopclass = ' alert';
      }
      tr.append($('<td/>', {
        html: $('<button/>', {
          "class": 'hand' + dopclass,
          html: 'В',
          click: function() {
            console.log(parentObj.options.access);
            if (parentObj.options.access !== 2 && parentObj.options.access !== 1) {
              echo_message_js("У вас не достатчно прав для данного действия", "error_message", 1);
              return false;
            } else if (n.fl_b === 1) {
              echo_message_js("Платеж уже был подтвержден", "error_message", 1);
              return false;
            }
            n.fl_b = 1;
            return new sendAjax('update_credit_row', {
              id: n.id,
              key: 'fl_b',
              val: 1
            }, function(response) {
              return tr.replaceWith(new rowCredit(n, parentObj));
            });
          }
        })
      }));
      dopclass = '';
      if (Number(n.money) > 0 && Number(n.fl_m) === 0) {
        dopclass = ' alert';
      }
      tr.append($('<td/>', {
        html: $('<button/>', {
          "class": 'hand' + dopclass,
          html: 'П',
          click: function() {
            console.log(parentObj.options.access);
            if (parentObj.options.access !== 5 && parentObj.options.user_id !== parentObj.urlManId && parentObj.options.access !== 1) {
              echo_message_js("У вас не достатчно прав для данного действия", "error_message", 1);
              return false;
            } else if (n.fl_m === 1) {
              echo_message_js("Платеж уже был подтвержден", "error_message", 1);
              return false;
            }
            n.fl_m = 1;
            return new sendAjax('update_credit_row', {
              id: n.id,
              key: 'fl_m',
              val: 1
            }, function(response) {
              return tr.replaceWith(new rowCredit(n, parentObj));
            });
          }
        })
      }));
      tr.append($('<td/>'));
      return tr;
    }

    return rowCredit;

  })();


  /*
   * вкладка учёт -> таблица кредит
   */

  credit_tbl = (function() {
    credit_tbl.prototype.paddingBlock = 6;

    credit_tbl.prototype["with"] = 300;

    function credit_tbl(data, options) {
      if (data == null) {
        data = {};
      }
      this.urlManId = Number($.urlVar('manager_id'));
      this.data = data;
      this.options = options[0];
      return this;
    }

    credit_tbl.prototype.init = function() {
      this.tbl = $('<table/>', {
        id: 'js-credit-tbl',
        'class': 'accounting-tbl'
      });
      this.tbl.append(this.trHead());
      this.tbl.append(this.trBody(this.data));
      this.tbl.append(this.trFooter(this.data));
      this.tblCase = $('<div/>').css({
        'float': 'left',
        'paddingRight': this.paddingBlock,
        'paddingBottom': this.paddingBlock,
        'width': this["with"]
      });
      this.calcTbl();
      return this.tblCase.append(this.tbl);
    };

    credit_tbl.prototype.trBody = function(data) {
      var i, j, ref, rows;
      rows = [];
      if (data.length > 0) {
        for (i = j = 0, ref = data.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          rows.push(new rowCredit(new credit_tbl_rowObj(data[i]), this));
        }
      }
      return rows;
    };

    credit_tbl.prototype.trHead = function() {
      var self, tr;
      self = this;
      this.recalc_button = $('<button>', {
        html: 'Расчёт',
        click: function() {
          return self.calcTbl();
        }
      });
      tr = $('<tr/>', {
        "class": 'head'
      });
      tr.append($('<th/>', {
        html: 'Кредит'
      }));
      tr.append(this.accruals_summ = $('<th/>', {
        colspan: 2,
        html: round_money(0)
      }));
      return tr.append($('<th/>', {
        html: '',
        colspan: 3
      }));
    };

    credit_tbl.prototype.trFooter = function(data) {
      var self, tr;
      self = this;
      tr = $('<tr/>', {
        "class": 'footer'
      });
      tr.append($('<td/>', {
        colspan: 6,
        html: $('<div/>', {
          html: "Добавить запись",
          'class': 'link_add',
          click: function() {
            var html, radio, win_inp_val;
            html = $('<div/>', {
              id: 'user_window_credit_form'
            });
            html.append(radio = $('<div/>', {
              "class": 'radio_m_p'
            }).append($('<span/>', {
              "class": "radio minus credit_money_pl_min checked",
              html: '-',
              click: function() {
                $(this).parent().find('.checked').removeClass('checked');
                return $(this).addClass('checked');
              }
            }).attr('data-val', '1')).append($('<span/>', {
              "class": "radio plus credit_money_pl_min",
              html: '+',
              click: function() {
                $(this).parent().find('.checked').removeClass('checked');
                return $(this).addClass('checked');
              }
            }).attr('data-val', '0')));
            html.append($('<div/>').append(win_inp_val = $('<input/>', {
              placeholder: 'сколько денег?',
              val: round_money(0),
              focus: function() {
                var t;
                if (Number($(this).val()) === 0) {
                  return $(this).val('');
                } else {
                  t = $(this);
                  return setTimeout(function() {
                    return t.select();
                  }, 50);
                }
              },
              blur: function() {
                return $(this).val(round_money(Number($(this).val())));
              }
            })));
            return self.win_window = new modalWindow({
              html: html,
              maxHeight: '100%',
              maxWidth: '90%',
              title: 'Завести строку компенсации',
              buttons: [
                {
                  text: 'Закрыть',
                  "class": 'button_yes_or_no no',
                  click: function() {
                    return $(self.win_window.winDiv[0]).dialog('close').dialog('destroy').remove();
                  }
                }, {
                  text: 'Создать',
                  "class": 'button_yes_or_no',
                  click: function() {
                    return new sendAjax('create_credit_row', {
                      money: win_inp_val.val(),
                      minus: html.find('.checked').attr('data-val')
                    }, function(response) {
                      self.data.push(response.data.credit);
                      self.tbl.find('.head').after(new rowCredit(new credit_tbl_rowObj(response.data.credit), self));
                      $(self.win_window.winDiv[0]).dialog('close').dialog('destroy').remove();
                      return self.calcTbl();
                    });
                  }
                }
              ]
            }, {
              closeOnEscape: true,
              single: true,
              close: function(event, ui) {
                return $('#quick_button_div .button').eq(1).removeClass('checked');
              }
            });
          }
        })
      }));
      return tr;
    };

    credit_tbl.prototype.calcTbl = function() {
      var self;
      self = this;
      self.the_balance = 0;
      this.tbl.find('.body').each(function() {
        var data, num, znak;
        data = $(this).data();
        znak = 1;
        if (Number(data.minus) === 1) {
          znak = -1;
        }
        num = data.money * znak;
        return self.the_balance = self.the_balance + Number(num);
      });
      this.accruals_summ.html(round_money(this.the_balance));
      console.log(Number(this.the_balance));
      if (Number(this.the_balance) === 0) {
        return this.tbl.find('.head').addClass('noCredit');
      } else {
        return this.tbl.find('.head').removeClass('noCredit');
      }
    };

    credit_tbl.prototype.updateTbl = function() {
      var self;
      self = this;
      return new sendAjax('update_credit_table', {}, function(response) {
        var Credit, options;
        options = [
          {
            access: response.data.access,
            user_id: response.data.user_id
          }
        ];
        Credit = new credit_tbl(response.data.credit, options);
        return self.tblCase.replaceWith(Credit.init());
      });
    };

    return credit_tbl;

  })();


  /*
   * вкладка учёт -> таблица закрытых счетов (за указанный месяц и год)
   */

  create_bill_tbl = (function() {
    create_bill_tbl.prototype.width = 'auto';

    create_bill_tbl.prototype.paddingBlock = 6;

    create_bill_tbl.prototype.itogo = {
      percent: 0,
      price_out_payment: 0,
      profit: 0
    };

    function create_bill_tbl(data) {
      var head, tbl, tblCase;
      if (data == null) {
        data = {};
      }
      tbl = $('<table/>', {
        id: 'js-bill-tbl',
        'class': 'bill_tbl'
      });
      tbl.append(head = this.trHead());
      tbl.append(this.trBody(data));
      head.after(this.trItogo());
      tblCase = $('<div/>').css({
        'width': this.width,
        'float': 'left',
        'paddingRight': this.paddingBlock,
        'paddingBottom': this.paddingBlock
      });
      return tblCase.append(tbl).data(this.itogo);
    }

    create_bill_tbl.prototype.trFooter = function() {
      return true;
    };

    create_bill_tbl.prototype.trItogo = function() {
      var tr;
      tr = $('<tr/>', {
        "class": 'itog'
      });
      tr.append($('<td/>'));
      tr.append($('<td/>', {
        html: round_money(this.itogo.price_out_payment)
      }));
      tr.append($('<td/>', {
        html: round_money(this.itogo.profit)
      }));
      tr.append($('<td/>', {
        html: round_money(this.itogo.percent) + '%'
      }));
      return tr;
    };

    create_bill_tbl.prototype.trHead = function() {
      var tr;
      tr = $('<tr/>', {
        "class": 'head'
      });
      tr.append($('<th/>', {
        html: '№счёта, дата'
      }));
      tr.append($('<th/>', {
        html: 'выручка'
      }));
      tr.append($('<th/>', {
        html: 'прибыль'
      }));
      tr.append($('<th/>', {
        html: '%'
      }));
      return tr;
    };

    create_bill_tbl.prototype.trBody = function(data) {
      var arr, i, j, len, n, num;
      this.itogo.percent = 0;
      this.itogo.profit = 0;
      this.itogo.price_out_payment = 0;
      arr = [];
      num = 0;
      if (data.length > 0) {
        for (i = j = 0, len = data.length; j < len; i = ++j) {
          n = data[i];
          arr.push(new billTrPrototipe(n));
          this.itogo.percent += Number(n.pr);
          this.itogo.profit += Number(n.profit);
          this.itogo.price_out_payment += Number(n.price_out_payment);
          num++;
        }
        this.itogo.percent = this.itogo.percent / num;
      }
      return arr;
    };

    return create_bill_tbl;

  })();


  /*
   * вкладка учёт -> строка таблицы закрытых счетов
   */

  billTrPrototipe = (function() {
    function billTrPrototipe(data) {
      var tr;
      tr = $('<tr/>').data(data);
      tr.append($('<td/>', {
        html: data.invoice_num
      }).append($('<span/>', {
        "class": 'row_invoice_date',
        html: data.closed_date
      })));
      tr.append($('<td/>', {
        html: round_money(data.price_out_payment)
      }));
      tr.append($('<td/>', {
        html: round_money(data.profit)
      }));
      tr.append($('<td/>', {
        html: data.pr + '%'
      }));
      return tr;
    }

    return billTrPrototipe;

  })();


  /*
   * вкладка учёт
   */

  (function($, window) {
    var accountingCalculation;
    accountingCalculation = (function() {
      accountingCalculation.prototype.defaults = {
        start: false
      };

      accountingCalculation.prototype.tabs = [
        {
          index: 1,
          name_en: 'options',
          name: 'Учёт'
        }
      ];

      function accountingCalculation(el, options) {
        this.$el = $(el);
        this.body = $(el).find('#js-main-accounting-div');
        this.body.html('');

        /*
         * добавление меню
         */
        this.addMenu();
      }

      accountingCalculation.prototype.addMenu = function() {
        var i, j, len, n, ref, results, section, self, ul;
        self = this;
        if (this.$el.find('#js-general-accounting-menu').length > 0) {
          ul = this.$el.find('#js-general-accounting-menu ul');
        } else {
          ul = $('<ul/>', {
            'class': 'central_menu'
          });
          this.$el.prepend($('<div/>', {
            'id': 'js-general-accounting-menu',
            'class': 'cabinet_top_menu first_line',
            html: ul
          }));
        }
        section = Number($.urlVar('section'));
        ref = this.tabs;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          n = ref[i];
          results.push(ul.append(this.mainTabHtml = new mainMenuTab(n, section, ul, 'section', function() {
            self.addMenu2();
            $.delUrlVal('subsection');
            return self.addMenu3();
          })));
        }
        return results;
      };

      accountingCalculation.prototype.addMenu2 = function() {
        var manager_id, num, self, ul;
        this.body.html('');
        self = this;
        if (this.$el.find('#js-accounting-menu-managers').length > 0) {
          ul = this.$el.find('#js-accounting-menu-managers ul');
          ul.css({
            'float': 'left'
          });
          ul.html('');
        } else {
          ul = $('<ul/>', {
            'class': 'central_menu'
          }).css({
            'float': 'left'
          });
          this.body.append($('<div/>', {
            'id': 'js-accounting-menu-managers',
            'class': 'cabinet_top_menu first_line',
            html: ul
          }));
        }
        manager_id = $.urlVar('manager_id');
        num = 0;
        return new sendAjax('get_managers_tabs', {}, function(response) {
          var i, j, len, n, ref, tab, tab1;
          ref = response.data;
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            n = ref[i];
            tab = new mainMenuTab(n, manager_id, ul, 'manager_id', function() {
              return self.constructMainContent();
            });
            ul.append(tab);
            if (num === 0 && manager_id === void 0) {
              tab1 = tab;
              num++;
            } else if (manager_id !== void 0) {
              if (Number(manager_id) === Number(tab.data().index)) {
                tab1 = tab;
              }
            }
          }
          return tab1.click();
        });
      };

      accountingCalculation.prototype.addMenu3 = function() {
        var i, j, len, month, month_now, month_number, n, num, self, tab, tab1, ul;
        self = this;
        if (this.body.find('#js-accounting-month-menu').length > 0) {
          ul = this.$el.find('#js-accounting-month-menu ul');
          ul.css({
            'float': 'left'
          });
          ul.html('');
        } else {
          ul = $('<ul/>', {
            'class': 'central_menu'
          }).css({
            'float': 'left'
          });
          this.body.append($('<div/>', {
            'id': 'js-accounting-month-menu',
            'class': 'cabinet_top_menu first_line',
            html: ul
          }));
        }
        month = [
          {
            index: 1,
            name: 'Январь'
          }, {
            index: 2,
            name: 'Февраль'
          }, {
            index: 3,
            name: 'Март'
          }, {
            index: 4,
            name: 'Апрель'
          }, {
            index: 5,
            name: 'Май'
          }, {
            index: 6,
            name: 'Июнь'
          }, {
            index: 7,
            name: 'Июль'
          }, {
            index: 8,
            name: 'Август'
          }, {
            index: 9,
            name: 'Сентябрь'
          }, {
            index: 10,
            name: 'Октябрь'
          }, {
            index: 11,
            name: 'Ноябрь'
          }, {
            index: 12,
            name: 'Декабрь'
          }
        ];
        this.yearTab();
        month_now = new Date().getMonth();
        month_number = $.urlVar('month_number');
        num = 0;
        for (i = j = 0, len = month.length; j < len; i = ++j) {
          n = month[i];
          tab = new mainMenuTab(n, month_number, ul, 'month_number', function() {
            return self.constructMainContent();
          });
          ul.append(tab);
          if (month_number === void 0 && month_now === Number(tab.data().index)) {
            tab1 = tab;
          } else if (month_number !== void 0) {
            if (Number(month_number) === Number(tab.data().index)) {
              tab1 = tab;
            }
          }
        }
        tab1.click();
        return ul.append(this.yearTab());
      };

      accountingCalculation.prototype.yearTab = function() {
        var Y, i, j, l, len, li, num, oldYear, opt, option_obj, select, self, year;
        self = this;
        year = new Date().getFullYear();
        l = year + 3;
        oldYear = $.urlVar('year');
        if (oldYear === void 0) {
          $.urlVar('year', year);
          oldYear = year;
        }
        option_obj = (function() {
          var j, ref, results;
          results = [];
          for (num = j = 2015, ref = l; 2015 <= ref ? j <= ref : j >= ref; num = 2015 <= ref ? ++j : --j) {
            results.push(num);
          }
          return results;
        })();
        li = $('<li/>');
        li.append(select = $('<select/>', {
          change: function() {
            $.urlVar('year', $(this).val());
            return self.constructMainContent();
          }
        }));
        for (i = j = 0, len = option_obj.length; j < len; i = ++j) {
          Y = option_obj[i];
          select.append(opt = $('<option/>', {
            html: Y,
            val: Y
          }));
          if (Number(Y) === Number(oldYear)) {
            opt.attr('selected', 'true');
          }
        }
        return li;
      };

      accountingCalculation.prototype.constructMainContent = function() {
        var content, div, self;
        self = this;
        content = $('<div/>', {
          id: 'first_tab'
        });
        new sendAjax("get_data", {}, function(response) {
          var Credit, accruals, options;
          content.append(self.bill_tbl = new create_bill_tbl(response.data.bill_closed));
          options = [
            {
              access: response.data.access,
              user_id: response.data.user_id
            }
          ];
          accruals = new accruals_tbl(new accrualsObj(response.data.accruals), response.data.compensation, response.data.dop_compensation, response.data.payments, options);
          content.append(accruals.init());
          content.append(accruals.payments_tbl());
          Credit = new credit_tbl(response.data.credit, options);
          return content.append(Credit.init());
        });
        if (this.body.find('#js-accounting-main-content-container').length > 0) {
          this.$el.find('#js-accounting-main-content-container').remove();
        }
        this.body.append(div = $('<div/>', {
          'id': 'js-accounting-main-content-container',
          html: ''
        }));
        return div.append(content);
      };

      return accountingCalculation;

    })();
    return $.fn.extend({
      accountingCalculation: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('accountingCalculation');
          if (!data) {
            $this.data('accountingCalculation', (data = new accountingCalculation(this, option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);


  /*
   * прототип html пункта главного меню
   */

  mainMenuTab = (function() {
    function mainMenuTab(tab, section, menu, key, func) {
      var li, span;
      if (func == null) {
        func = function() {
          return true;
        };
      }
      li = $('<li/>', {
        click: function(e) {
          $.urlVar(key, tab.index);
          menu.find('.selected').removeClass('selected');
          $(this).addClass('selected');
          if (tab.click !== void 0) {
            tab.click();
          }
          return func();
        }
      });
      li.append(span = $('<span/>'));
      span.append($('<div/>', {
        'class': 'border',
        'html': tab.name
      }));
      li.data(tab);
      if (tab.index === section) {
        li.addClass('selected');
      }
      return li;
    }

    return mainMenuTab;

  })();

}).call(this);

//# sourceMappingURL=accounting.js.map
