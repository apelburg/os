// Generated by CoffeeScript 1.10.0

/*
 * update invoise date
 *
 * @param     type
 * @return    json 2
 * @see       add json data in div#invoceData 
 * @author    Alexey Kapitonov
 * @email     kapitonoval2012@gmail.com
 * @version   13.04.2016 16:25:40
 */
var calc_price_with_discount, getInvoiceData, invoiceTtn, modalWindow, round_money, setData,
  slice = [].slice;

getInvoiceData = function(type) {
  if (type == null) {
    type = "new";
  }
  $.ajax({
    url: "",
    type: "POST",
    data: {
      AJAX: 'get_data'
    },
    dataType: "json",
    error: function(jqXHR, textStatus, errorThrown) {
      echo_message_js("AJAX Error: " + textStatus);
    },
    success: function(data, textStatus, jqXHR) {
      standard_response_handler(jqXHR.responseJSON);
      $('#invoceData').html(jqXHR.responseText);
      if (type === 'new') {
        return $('#js-main-invoice-table').invoice();
      }
    }
  });
  return true;
};


/*
 * window onload function
 */

$(document).ready(function() {
  return getInvoiceData();
});


/*
 * round and return money format any input string or number
 */

round_money = function(num) {
  var new_num;
  num = Number(num);
  new_num = Math.ceil(num * 100) / 100;
  return num.toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1");
};


/*
 * calculate price with discount
 */

calc_price_with_discount = function(price_out, discount) {
  return Number(price_out / 100) * (100 + Number(discount));
};


/*
 * send AJAX
 */

setData = (function() {
  setData.prototype.defaults = {
    AJAX: 'test',
    options: {},
    func: function() {}
  };

  setData.prototype.response = {};

  function setData(AJAX, options, func) {
    var data;
    if (options == null) {
      options = {};
    }
    if (func == null) {
      func = function() {
        return true;
      };
    }
    data = {
      AJAX: AJAX,
      options: options,
      func: func
    };
    this.options = $.extend({}, this.defaults, data);
    this.send_AJAX();
  }

  setData.prototype.send_AJAX = function() {
    var _this, data, k, ref, v;
    _this = this;
    data = {
      AJAX: this.options.AJAX
    };
    ref = this.options.options;
    for (k in ref) {
      v = ref[k];
      data[k] = v;
    }
    return $.ajax({
      url: "",
      type: "POST",
      data: data,
      dataType: "json",
      error: function(jqXHR, textStatus, errorThrown) {
        echo_message_js("AJAX Error: " + textStatus);
      },
      success: function(data, textStatus, jqXHR) {
        _this.response = $.extend({}, _this.response, jqXHR.responseJSON);
        standard_response_handler(_this.response);
        return _this.options.func();
      }
    });
  };

  return setData;

})();


/*
 * model from window
 *
 * @param     data = {html='текст не был передан', title='имя окна не было передано', buttons={}}
 * @author    Alexey Kapitonov
 * @email     kapitonoval2012@gmail.com
 * @version   18.04.2016 12:53:01
 */

modalWindow = (function() {
  modalWindow.prototype.sittings = {
    modal: true,
    autoOpen: true,
    closeOnEscape: false
  };

  modalWindow.prototype.defaults = {
    title: '*** Название окна ***',
    width: 'auto',
    height: 'auto',
    html: 'Текст в окне',
    buttons: [
      {
        text: 'OK',
        "class": 'button_yes_or_no no',
        style: 'float:right;',
        click: function() {
          return $('#js-alert_union').dialog('destroy').remove();
        }
      }
    ]
  };

  function modalWindow(data, sittings) {
    if (data == null) {
      data = {};
    }
    if (sittings == null) {
      sittings = {};
    }
    this.options = $.extend({}, this.defaults, data);
    this.sittings = $.extend({}, this.sittings, sittings);
    this.init();
  }

  modalWindow.prototype.init = function() {
    var button, button_n, buttons_html, i, j, len, ref;
    if ($('#js-alert_union').length > 0) {
      $('#js-alert_union').remove();
    }
    $('body').append($('<div/>', {
      "id": 'js-alert_union',
      "style": "height:45px;",
      'html': this.options.html
    }));
    $('#js-alert_union').dialog({
      width: 'auto',
      height: 'auto',
      modal: this.sittings.modal,
      title: this.options.title,
      autoOpen: this.sittings.autoOpen,
      closeOnEscape: this.sittings.closeOnEscape
    }).parent();
    if (this.options.buttons.length > 0) {
      buttons_html = $('<table></table>');
      ref = this.options.buttons;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        button_n = ref[i];
        button = $('<button/>', {
          text: button_n['text'],
          click: button_n['click']
        });
        if (button_n['class']) {
          button.attr('class', button_n['class']);
        }
        if (button_n['style']) {
          button.attr('style', button_n['style']);
        }
        if (button_n['id']) {
          button.attr('id', button_n['id']);
        }
        buttons_html.append($('<td/>').append(button));
      }
    }
    return $('#js-alert_union').after($('<div/>', {
      'id': 'js-alert_union_buttons',
      'class': 'ui-dialog-buttonpane ui-widget-content ui-helper-clearfix'
    }).append(buttons_html));
  };

  return modalWindow;

})();


/*
 * model from ttn
 */

invoiceTtn = (function() {
  invoiceTtn.prototype.defaults = {
    id: 0,
    type: "new"
  };

  function invoiceTtn(data_row, data) {
    this.options = $.extend({}, this.defaults, data_row);
    this.init(data);
  }

  invoiceTtn.prototype.init = function(responseData) {
    var _this, element, main_div, message;
    _this = this;
    if (responseData !== void 0) {
      main_div = $('<div/>');
      main_div.append(this.createHead());
      main_div.append(this.createTable(responseData));
      main_div.append(this.createDeliveryChoose());
      main_div.append(this.alreadyWasСreated());
      message = main_div;
      element = new modalWindow({
        html: message,
        title: 'Запрос ТТН',
        buttons: this.getButtons()
      }, {
        closeOnEscape: true
      });
      return this.$el = element.options.html[0];
    }
  };

  invoiceTtn.prototype.alreadyWasСreated = function() {
    var content;
    content = $('<div/>', {
      'class': "ttn--already-was-created"
    });
    if (this.options.ttn !== void 0 && this.options.length > 0) {
      return content.append($('<div/>', {
        "class": 'ttn--already-was-created--head',
        html: 'Ранее оформленные ТТН:'
      }));
    }
  };

  invoiceTtn.prototype.createDeliveryChoose = function() {
    var car_div, div_car_body, li_clic, ul;
    car_div = $('<div/>', {
      id: 'ttn_car_div'
    });
    car_div.append($('<div/>', {
      'html': 'Доставка выбранных позиций',
      'class': 'ttn_car_div-head'
    }));
    li_clic = function(event) {
      $(this).parent().find('li').removeClass('checked');
      return $(this).addClass('checked');
    };
    ul = $('<ul/>').append($('<li/>', {
      click: li_clic
    }).append($('<div/>', {
      'class': 'ttn-our_delivery'
    })).append($('<div/>', {
      'class': 'ttn-delivery-text',
      'html': 'Доставка'
    }))).append($('<li/>', {
      click: li_clic
    }).append($('<div/>', {
      'class': 'ttn-no_delivery'
    })).append($('<div/>', {
      'class': 'ttn-delivery-text',
      'html': 'Самовывоз'
    })));
    div_car_body = $('<div/>', {
      'class': 'ttn_car_div-body'
    }).append(ul);
    return car_div.append(div_car_body);
  };

  invoiceTtn.prototype.createHead = function() {
    var head_info;
    head_info = $('<div>', {
      id: 'ttn_head_info'
    });
    head_info.append($('<table>', {
      id: 'ttn_head_info-table'
    }).append($('<tr/>').append($('<td/>', {
      'html': this.options.client_name,
      'class': 'ttn_client_name'
    })).append($('<td/>', {
      'html': this.options.client_requisit_name,
      'class': 'ttn_requisits',
      'click': function() {
        return echo_message_js('Вызов окна просмотра реквизитов');
      }
    }))).append($('<tr/>').append($('<td/>', {
      'html': "ТТН 000"
    })).append($('<td/>'))));
    return head_info;
  };

  invoiceTtn.prototype.createTable = function(responseData) {
    var _this, check, i, j, len, main_checkbox, main_price, nds, position, pr_out, table, td, tr;
    _this = this;
    table = $('<table/>', {
      'id': 'js-invoice--window--ttn-table'
    });
    table.append(tr = $('<tr/>'));
    main_checkbox = $('<input/>', {
      'type': 'checkbox',
      change: function(event) {
        var input, td;
        input = $(this);
        td = $(this).parent();
        return _this.clickMainCheckbox(table, td, input);
      }
    });
    td = $('<th/>', {
      click: function() {
        var input;
        input = $(this).find('input');
        td = $(this);
        return _this.clickMainCheckbox(table, td, input);
      }
    }).append(main_checkbox);
    tr.append(td);
    td = $('<th/>', {
      'text': '№'
    });
    tr.append(td);
    td = $('<th/>', {
      'html': 'Наименование и <br>описание продукции'
    });
    tr.append(td);
    td = $('<th/>', {
      'html': 'Количество<br>продукции'
    });
    tr.append(td);
    td = $('<th/>', {
      'html': 'стоимость<br>за штуку'
    });
    tr.append(td);
    td = $('<th/>', {
      'html': 'Общая<br>стоимость'
    });
    tr.append(td);
    main_price = 0;
    nds = 0;
    i = 1;
    for (j = 0, len = responseData.length; j < len; j++) {
      position = responseData[j];
      tr = $('<tr/>').data(position);
      check = $('<input/>', {
        'type': 'checkbox',
        change: function(event) {
          event.preventDefault();
          event.stopPropagation();
          if ($(this).prop('checked')) {
            $(this).prop('checked', false);
            $(this).parent().removeClass('checked');
          } else {
            $(this).prop('checked', true);
            $(this).parent().addClass('checked');
          }
          return _this.checkMainCheckbox(table);
        }
      });
      td = $('<td/>', {
        click: function() {
          var input;
          input = $(this).find('input');
          if (input.prop('checked')) {
            input.prop('checked', false);
            $(this).removeClass('checked');
          } else {
            input.prop('checked', true);
            $(this).addClass('checked');
          }
          return _this.checkMainCheckbox(table);
        }
      }).append(check);
      tr.append(td);
      td = $('<td/>').append(i);
      tr.append(td);
      td = $('<td/>').append(position.name);
      tr.append(td);
      td = $('<td/>').append(position.quantity);
      tr.append(td);
      pr_out = calc_price_with_discount(position.price, position.discount);
      td = $('<td/>').append(round_money(pr_out) + ' р.');
      tr.append(td);
      main_price += pr_out * position.quantity;
      nds += Number(round_money(pr_out * position.quantity / 118 * 18));
      td = $('<td/>').append(round_money(pr_out * position.quantity) + ' р.');
      tr.append(td);
      i++;
      table.append(tr);
    }
    table.append(tr = $('<tr/>'));
    td = $('<th/>');
    tr.append(td);
    td = $('<th/>', {
      'colspan': '4',
      'html': 'Итоговая сумма по данной спецификации (договору)'
    });
    tr.append(td);
    td = $('<th/>', {
      'html': round_money(main_price) + ' р.'
    });
    tr.append(td);
    table.append(tr);
    table.append(tr = $('<tr/>'));
    td = $('<th/>');
    tr.append(td);
    td = $('<th/>', {
      'colspan': '4',
      'html': 'В т.ч. НДС 18%'
    });
    tr.append(td);
    td = $('<th/>', {
      'html': round_money(nds) + ' р.'
    });
    tr.append(td);
    table.append(tr);
    return table;
  };

  invoiceTtn.prototype.clickMainCheckbox = function(table, td, input) {
    if (input.prop('checked') || !input.prop('checked') && input.hasClass('checked_no_full')) {
      input.prop('checked', false).removeClass('checked_no_full');
      td.removeClass('checked');
      return table.find('td input').each(function(index, el) {
        return $(this).prop('checked', false).parent().removeClass('checked');
      });
    } else {
      console.log(this);
      input.prop('checked', true);
      td.addClass('checked');
      return table.find('td input').each(function(index, el) {
        return $(this).prop('checked', true).parent().addClass('checked');
      });
    }
  };

  invoiceTtn.prototype.checkMainCheckbox = function(table) {
    var main_check;
    main_check = table.find('th input');
    if (table.find('td input:checked').length === table.find('td input').length) {
      main_check.prop('checked', true).removeClass('checked_no_full');
      return main_check.parent().addClass('checked');
    } else if (table.find('td input:checked').length > 0) {
      main_check.prop('checked', false).addClass('checked_no_full');
      return main_check.parent().addClass('checked');
    } else {
      main_check.prop('checked', false).removeClass('checked_no_full');
      return main_check.parent().removeClass('checked');
    }
  };

  invoiceTtn.prototype.queryNewTtn = function(func) {
    return console.log(this.$el);
  };

  invoiceTtn.prototype.getButtons = function() {
    var _this, buttons;
    _this = this;
    return buttons = [
      {
        text: 'Отмена',
        "class": 'button_yes_or_no no',
        click: function() {
          return $('#js-alert_union').dialog('destroy').remove();
        }
      }, {
        text: 'Запросить',
        "class": 'button_yes_or_no',
        click: function() {
          return _this.queryNewTtn(function() {
            return $('#js-alert_union').dialog('destroy').remove();
          });
        }
      }
    ];
  };

  return invoiceTtn;

})();


/*
 * jQuery plagin Invoice
 *
 * @see       invoise table
 * @author    Alexey Kapitonov
 * @email     kapitonoval2012@gmail.com
 * @version   13.04.2016 16:26:46
 */

(function($, window) {

  /*
   * Define the plugin class Invoice
   */
  var invoice;
  invoice = (function() {
    invoice.prototype.defaults = {
      start: false
    };

    invoice.prototype.access_def = 0;

    invoice.prototype.response_def = {};

    function invoice(el, options) {
      this.options = $.extend({}, this.defaults, jQuery.parseJSON($('#invoceData').html()));
      this.access = $.extend({}, this.access_def, this.options.access);
      this.$el = $(el);
      this.init();
    }

    invoice.prototype.myMethod = function(echo) {
      return this.$el.html(this.options.paramA + ': ' + echo);
    };

    invoice.prototype.init = function(echo) {
      var j, len, n, ref, results;
      ref = this.options.data;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        n = ref[j];
        results.push(this.createRow(n));
      }
      return results;
    };

    invoice.prototype.printOptions = function() {
      console.info(this.options.access);
      return console.info(this.options.data);
    };

    invoice.prototype.updateRows = function() {
      this.destroyRows();
      return this.init();
    };

    invoice.prototype.destroyRows = function() {
      return this.$el.find('tbody').html('');
    };

    invoice.prototype.updateData = function() {
      console.log("updateData");
      return $('#invoceData').html(JSON.stringify(this.options));
    };


    /*
     * get data
     */

    invoice.prototype.getData = function(ajax_name, options, func) {
      var _this, data, k, response, v;
      if (options == null) {
        options = {};
      }
      if (func == null) {
        func = function() {};
      }
      _this = this;
      data = {
        AJAX: ajax_name
      };
      for (k in options) {
        v = options[k];
        data[k] = v;
      }
      response = {};
      $.ajax({
        url: "",
        type: "POST",
        data: data,
        dataType: "json",
        error: function(jqXHR, textStatus, errorThrown) {
          echo_message_js("AJAX Error: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
          response = jqXHR.responseJSON;
          _this.response = $.extend({}, _this.response_def, response);
          standard_response_handler(response);
          return func();
        }
      });
    };


    /*
     * create ttn
     */

    invoice.prototype.createTTN = function(row) {
      var _this;
      _this = this;
      return this.getData('get_ttn', {
        'id': row.id
      }, function() {
        if (_this.response.data !== void 0) {
          return new invoiceTtn(row, _this.response.data);
        }
      });
    };


    /*
     * create tr
     */

    invoice.prototype.createRow = function(row) {
      var _this, doc_type, td, tr;
      _this = this;
      tr = $('<tr/>', {
        id: 'tt_' + row.id
      }).data(row);
      if (row.doc_type === 'spec') {
        row.spf_num = row.doc_num;
        doc_type = 'счёт';
      } else {
        row.spf_num = 'оф';
        doc_type = 'счёт - оферта';
      }
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--number',
        'html': '<span>' + row.invoice_num + '</span>  ' + row.invoice_create_date
      })).append($('<div/>', {
        'class': 'invoice-row--checkboxtd checked',
        'html': doc_type
      }));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--checkboxtd'
      }).append($('<div/>', {
        'class': 'invoice-row--checkboxtd-div'
      }));
      td.click(function() {
        if ($(this).hasClass('checked')) {
          row.flag_1c = 0;
          $(this).removeClass('checked');
        } else {
          row.flag_1c = 1;
          $(this).addClass('checked');
        }
        new setData('edit_flag_1c', {
          id: row.id,
          val: row.flag_1c
        });
      });
      if (Number(row.flag_1c > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--price-profit',
        'html': round_money(row.price_out)
      })).append($('<div/>', {
        'class': 'invoice-row--price-payment',
        'html': round_money(row.price_out_payment)
      }));
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--order-number',
        'html': row.invoice_num
      })).append($('<div/>', {
        'class': 'invoice-row--meneger--full-name',
        'html': row.manager_name
      }));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--icons-flag'
      }).append($('<div/>', {
        'class': 'invoice-row--checkboxtd-div'
      }));
      td.click(function() {
        var buttons, message, t;
        if ($(this).hasClass('checked')) {
          if (Number(_this.options.access) !== 1) {
            console.log(_this.options.access);
            echo_message_js('Снять рекламацию может только администратор', 'error_message');
            return false;
          }
          row.flag_flag = 0;
          $(this).removeClass('checked');
          new setData('edit_flag_flag', {
            id: row.id,
            val: row.flag_flag
          });
        } else {
          if (Number(_this.options.access) !== 5 && Number(_this.options.access) !== 1) {
            echo_message_js('Рекламацию устанавливает только менеджер', 'error_message');
            return false;
          }
          t = $(this);
          buttons = [
            {
              text: 'Да',
              "class": 'button_yes_or_no',
              click: function() {
                row.flag_flag = 1;
                t.addClass('checked');
                new setData('edit_flag_flag', {
                  id: row.id,
                  val: row.flag_flag
                });
                return $('#js-alert_union').dialog('destroy').remove();
              }
            }, {
              text: 'Нет',
              "class": 'button_yes_or_no yes',
              click: function() {
                return $('#js-alert_union').dialog('destroy').remove();
              }
            }
          ];
          message = 'Вы уверены, что хотите установить флаг рекламации?';
          new modalWindow({
            html: message,
            title: 'Подтверждение действия',
            buttons: buttons
          });
        }
      });
      if (Number(row.flag_flag > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--client--name',
        'html': row.client_name
      })).append($('<div/>', {
        'class': 'invoice-row--client--requsits',
        'data-id': row.client_requisit_id,
        'html': row.client_requisit_name
      }));
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--price-start',
        'html': row.price_in
      })).append($('<div/>', {
        'class': 'invoice-row--price-our-pyment',
        'html': row.client_requisit_name
      }));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--ice'
      });
      td.click(function() {
        if ($(this).hasClass('checked')) {
          row.flag_ice = 0;
          $(this).removeClass('checked');
        } else {
          row.flag_ice = 1;
          $(this).addClass('checked');
        }
        new setData('edit_flag_ice', {
          id: row.id,
          val: row.flag_ice
        });
      });
      if (Number(row.flag_ice > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--price-our-profit',
        'html': round_money(row.price_out - row.price_in)
      })).append($('<div/>', {
        'class': 'invoice-row--price-our-profit-percent',
        'html': round_money(((row.price_out - row.price_in) / row.price_out * 100).toString()) + '%'
      }));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--icons-calculator'
      });
      td.click(function() {
        if ($(this).hasClass('checked')) {
          row.flag_calc = 0;
          $(this).removeClass('checked');
        } else {
          row.flag_calc = 1;
          $(this).addClass('checked');
        }
        new setData('edit_flag_calc', {
          id: row.id,
          val: row.flag_calc
        });
      });
      if (Number(row.flag_calc > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      if (row.ttn.length === 0 && this.options.access !== 2) {
        td = $('<td/>', {
          'colspan': '3',
          'html': "Запросить",
          'class': 'js-query-ttn',
          click: function() {
            return _this.createTTN(row);
          }
        });
      } else {
        td = $('<td/>', {
          'colspan': '3'
        });
      }
      tr.append(td);
      td = $('<td/>').append($('<div/>').html(row.spf_num));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--ttn--vt invoice-row--checkboxtd'
      });
      td.click(function() {
        if ($(this).hasClass('checked')) {
          row.flag_spf_return = 0;
          $(this).removeClass('checked');
        } else {
          row.flag_spf_return = 1;
          $(this).addClass('checked');
        }
        new setData('edit_flag_spf_return', {
          id: row.id,
          val: row.flag_spf_return
        });
      });
      if (Number(row.flag_spf_return > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      return this.$el.find('tbody').append(tr);
    };

    return invoice;

  })();
  return $.fn.extend({
    invoice: function() {
      var args, option;
      option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data('invoice');
        if (!data) {
          $this.data('invoice', (data = new invoice(this, option)));
        }
        if (typeof option === 'string') {
          return data[option].apply(data, args);
        }
      });
    }
  });
})(window.jQuery, window);


/*
 * cloned the head table and fixed this head on top in user window
 *
 * @see       top header
 * @author    Alexey Kapitonov
 * @email     kapitonoval2012@gmail.com
 * @version   13.04.2016 16:24:30
 */

$(window).scroll(function() {
  var div, el_cloned, thead;
  if ($(this).scrollTop() > $('#js-main-invoice-table').offset().top) {
    if ($('#js-main-invoice-table-clone').length === 0) {
      el_cloned = $('#js-main-invoice-table thead');
      thead = el_cloned.clone();
      thead.find('tr').each(function(index) {
        thead.find('tr').eq(index).find('th').each(function(ind) {
          thead.find('tr').eq(index).find('th').eq(ind).width(el_cloned.find('tr').eq(index).find('th').eq(ind).width() + 1);
        });
      });
      div = $('<div/>', {
        'id': 'js-main-invoice-table-clone'
      }).append($('<table/>').append(thead)).css({
        'position': 'fixed',
        'top': '0',
        'left': '0',
        'width': '100%'
      });
      div.appendTo('body');
    } else {
      $('#js-main-invoice-table-clone').css({
        'display': 'block'
      });
    }
    return $('#invoice-button-top').show();
  } else {
    if ($('#js-main-invoice-table-clone').length > 0) {
      $('#js-main-invoice-table-clone').css({
        'display': 'none'
      });
    }
    return $('#invoice-button-top').hide();
  }
});

$(document).on('click', '#invoice-button-top', function(event) {
  return $("html, body").animate({
    scrollTop: 0
  }, 600);
});
