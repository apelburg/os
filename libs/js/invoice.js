// Generated by CoffeeScript 1.9.3

/*
 * class Invoice
 *
 * @author    Alexey Kapitonov
 * @email     kapitonoval2012@gmail.com
 * @version   13.04.2016 16:25:40
 */


/*
 * прототип объекта прихода
 */

(function() {
  var commentsRow, commentsWindow, costsRow, costsRowObj, costsWindow, errorWindow, invoiceRow, invoiceWindow, paymentObj, paymentRow, paymentRowObj, paymentWindow, requesitContent, skladRow, ttnObj, ttnWindow, warnNotCreateInvoice,
    slice = [].slice;

  paymentRowObj = (function() {
    paymentRowObj.prototype.defaults = {
      id: 0,
      invoice_id: 0,
      invoice_number: '',
      number: "",
      date: getDateNow(),
      price: '0.00',
      percent: '0.00',
      create: getDateNow(),
      buch_id: '0.00',
      buch_name: 'Default Name',
      edit: '0.00',
      del: '0.00'
    };

    paymentRowObj.prototype.enterObj = {};

    paymentRowObj.prototype.options = {};

    function paymentRowObj(data) {
      var el, key;
      if (data == null) {
        data = {};
      }
      this.options = {};
      if (data.edit === void 0) {
        data.edit = 1;
      }
      for (key in data) {
        el = data[key];
        this.options[key] = el;
      }
      return $.extend({}, this.defaults, this.options);
    }

    return paymentRowObj;

  })();


  /*
   * прототип объекта счёт
   */

  paymentObj = (function() {
    paymentObj.prototype.defaults = {
      id: 0,
      invoice_query_date: '00.00.0000',
      manager_id: 0,
      manager_name: 'Менеджер',
      price_in: 0,
      costs: 0,
      percent_costs: 0,
      price_out: 0,
      price_out_payment: 0,
      percent_payment: 0,
      conditions: 0,
      costs_supplier_bill: 0,
      invoice_create_date: '00.00.0000',
      invoice_num: '',
      client_id: 0,
      client_name: 'Имя клиента',
      client_requisit_id: 0,
      client_requisit_name: 'Реквизиты',
      price_costs_all: 0,
      status: '',
      agreement_id: 0
    };

    paymentObj.prototype.enterObj = {};

    paymentObj.prototype.options = {};

    function paymentObj(data) {
      var el, key;
      if (data == null) {
        data = {};
      }
      this.options = {};
      if (data.edit === void 0) {
        data.edit = 1;
      }
      for (key in data) {
        el = data[key];
        this.options[key] = el;
      }
      return $.extend({}, this.defaults, this.options);
    }

    return paymentObj;

  })();


  /*
   * прототип html окна реквизитов
   */

  requesitContent = (function() {
    requesitContent.prototype.defaults = {
      id: 0
    };

    requesitContent.prototype.enterObj = {};

    requesitContent.prototype.options = {};

    requesitContent.prototype.access = 0;

    function requesitContent(data) {
      this.options = $.extend({}, this.defaults, data);
      return this.init();
    }

    requesitContent.prototype.init = function() {
      var div, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, self, span, tbl, td, tr;
      self = this;
      console.info(self);
      console.log((ref = this.options.company) != null ? ref.length : void 0, this.options.company);
      tbl = $('<table/>', {
        'css': {
          'width': '100%'
        }
      });
      tbl.append(tr = $('<tr/>'));
      span = $('<span/>', {
        'css': {
          'color': '#D8D3D3'
        },
        'html': 'Информация отсутствует'
      });
      tr.append($('<td/>', {
        'colspan': 2
      }).append(div = $('<div/>', {
        'style': 'border-bottom:1px solid #cecece;font-size:18px;',
        'html': span
      })));
      if ((ref1 = this.options.company) != null ? ref1.length : void 0) {
        div.html(this.options.company);
      }
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'Полное наименование'
      }));
      tr.append(td = $('<td>', {
        'html': $('<span/>', {
          'css': {
            'color': '#D8D3D3'
          },
          'html': 'Информация отсутствует'
        })
      }));
      if ((ref2 = this.options.comp_full_name) != null ? ref2.length : void 0) {
        td.html(this.options.comp_full_name);
      }
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'ИНН'
      }));
      tr.append(td = $('<td>', {
        'html': $('<span/>', {
          'css': {
            'color': '#D8D3D3'
          },
          'html': 'Информация отсутствует'
        })
      }));
      if ((ref3 = this.options.inn) != null ? ref3.length : void 0) {
        td.html(this.options.inn);
      }
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'КПП'
      }));
      tr.append(td = $('<td>', {
        'html': $('<span/>', {
          'css': {
            'color': '#D8D3D3'
          },
          'html': 'Информация отсутствует'
        })
      }));
      if ((ref4 = this.options.kpp) != null ? ref4.length : void 0) {
        td.html(this.options.kpp);
      }
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td/>', {
        'colspan': 2
      }).append($('<div/>', {
        'html': 'Адрес и телефон',
        'style': 'border-bottom:1px solid #cecece;font-size:18px;'
      })));
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'Юридический адрес'
      }));
      tr.append(td = $('<td>', {
        'html': $('<span/>', {
          'css': {
            'color': '#D8D3D3'
          },
          'html': 'Информация отсутствует'
        })
      }));
      if ((ref5 = this.options.legal_address) != null ? ref5.length : void 0) {
        td.html(this.options.legal_address);
      }
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'Фактический адрес'
      }));
      tr.append(td = $('<td>', {
        'html': $('<span/>', {
          'css': {
            'color': '#D8D3D3'
          },
          'html': 'Информация отсутствует'
        })
      }));
      if ((ref6 = this.options.postal_address) != null ? ref6.length : void 0) {
        td.html(this.options.postal_address);
      }
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'Телефоны'
      }));
      tr.append(td = $('<td>', {
        'html': $('<span/>', {
          'css': {
            'color': '#D8D3D3'
          },
          'html': 'Информация отсутствует'
        })
      }));
      if ((ref7 = this.options.phone1) != null ? ref7.length : void 0) {
        td.html(this.options.phone1);
      }
      if ((ref8 = this.options.phone1) != null ? ref8.length : void 0) {
        td.append(' ' + this.options.phone2);
      }
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td/>', {
        'colspan': 2
      }).append($('<div/>', {
        'html': 'Банковские реквизиты',
        'style': 'border-bottom:1px solid #cecece;font-size:18px;'
      })));
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'БАНК'
      }));
      tr.append(td = $('<td>', {
        'html': $('<span/>', {
          'css': {
            'color': '#D8D3D3'
          },
          'html': 'Информация отсутствует'
        })
      }));
      if (((ref9 = this.options.bank) != null ? ref9.length : void 0) || +((ref10 = this.options.bank_address) != null ? ref10.length : void 0)) {
        td.html(this.options.postal_address);
      }
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'Р/С'
      }));
      tr.append($('<td>', {
        'html': (ref11 = this.options.r_account) != null ? typeof ref11.length === "function" ? ref11.length({
          '<span style="color:#D8D3D3">Информация отсутствует</span>': this.options.r_account
        }) : void 0 : void 0
      }));
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'КОРР/С'
      }));
      tr.append(td = $('<td>', {
        'html': $('<span/>', {
          'css': {
            'color': '#D8D3D3'
          },
          'html': 'Информация отсутствует'
        })
      }));
      if ((ref12 = this.options.cor_account) != null ? ref12.length : void 0) {
        td.html(this.options.cor_account);
      }
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'БИК'
      }));
      tr.append(td = $('<td>', {
        'html': $('<span/>', {
          'css': {
            'color': '#D8D3D3'
          },
          'html': 'Информация отсутствует'
        })
      }));
      if ((ref13 = this.options.bik) != null ? ref13.length : void 0) {
        td.html(this.options.bik);
      }
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'ОГРН'
      }));
      tr.append(td = $('<td>', {
        'html': $('<span/>', {
          'css': {
            'color': '#D8D3D3'
          },
          'html': 'Информация отсутствует'
        })
      }));
      if ((ref14 = this.options.ogrn) != null ? ref14.length : void 0) {
        td.html(this.options.ogrn);
      }
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'ОКПО'
      }));
      tr.append(td = $('<td>', {
        'html': $('<span/>', {
          'css': {
            'color': '#D8D3D3'
          },
          'html': 'Информация отсутствует'
        })
      }));
      if ((ref15 = this.options.okpo) != null ? ref15.length : void 0) {
        td.html(this.options.okpo);
      }
      tbl.append(tr = $('<tr/>'));
      tr.append($('<td>', {
        'html': 'Доп. инфо'
      }));
      tr.append(td = $('<td>', {
        'html': $('<span/>', {
          'css': {
            'color': '#D8D3D3'
          },
          'html': 'Информация отсутствует'
        })
      }));
      if ((ref16 = this.options.dop_info) != null ? ref16.length : void 0) {
        td.html(this.options.dop_info);
      }
      return tbl;
    };

    return requesitContent;

  })();


  /*
   * прототип объекта расходы
   */

  costsRowObj = (function() {
    costsRowObj.prototype.defaults = {
      id: 0,
      invoice_id: 0,
      invoice_number: '',
      number: '',
      date: '00.00.0000',
      price: 0,
      percent: 0,
      create: getDateNow(),
      buch_id: 0,
      buch_name: 'Default Name',
      edit: 0,
      del: 0,
      pay_id: 0,
      pay_date: '',
      pay_price: '0.00',
      pay_percent: '0.00',
      pay_buch_id: 0,
      pay_buch_name: '',
      flag_ice: 0
    };

    costsRowObj.prototype.enterObj = {};

    costsRowObj.prototype.options = {};

    function costsRowObj(data) {
      var el, key;
      if (data == null) {
        data = {};
      }
      this.options = {};
      if (data.edit === void 0) {
        data.edit = 1;
      }
      for (key in data) {
        el = data[key];
        if (el !== null) {
          this.options[key] = el;
        }
      }
      return $.extend({}, this.defaults, this.options);
    }

    return costsRowObj;

  })();


  /*
   * прототип html строки расходы
   */

  costsRow = (function() {
    costsRow.prototype.enterObj = {};

    costsRow.prototype.options = {};

    costsRow.prototype.access = 0;

    function costsRow(rData, i, access, windowObj, InvoiceRowData, rowspan) {
      var data, el, key;
      if (access == null) {
        access = 0;
      }
      if (rowspan == null) {
        rowspan = 1;
      }
      data = rData[i];
      if (data.edit === void 0) {
        data.edit = 1;
      }
      this.access = access;
      for (key in data) {
        el = data[key];
        this.options[key] = el;
      }
      this.options = data;
      return this.init(data, rData, i, windowObj, InvoiceRowData, rowspan);
    }

    costsRow.prototype.init = function(data, rData, i, windowObj, InvoiceRowData, rowspan) {
      if (Number(this.options.del) === 0 && (Number(this.access) === 1 || Number(this.access) === 2 || Number(this.access) === 5)) {
        return this.createEditingObj(data, rData, i, windowObj, InvoiceRowData, rowspan);
      } else {
        return this.createSimpleRow(data, rData, i, windowObj, InvoiceRowData, rowspan);
      }
    };

    costsRow.prototype.createEditingObjPayments = function(data, rData, i, windowObj, InvoiceRowData, rowspan, tr) {
      var _this, button2, cl, td1, td2, td3;
      _this = this;
      cl = 'mayBeEdit';
      if (_this.access === 5) {
        cl = '';
      }
      tr.append(td1 = $('<td/>', {
        'html': this.options.pay_date,
        'class': 'date ' + cl,
        click: function() {
          var input;
          if (_this.access === 5) {
            return false;
          }
          if ($(this).find('input').length === 0) {
            $(this).html(input = $('<input/>', {
              'type': 'text',
              'val': $(this).html(),
              change: function() {
                return _this.options.pay_date = $(this).val();
              }
            }));
            $(this).addClass('tdInputHere');
            input.datetimepicker({
              timepicker: false,
              dayOfWeekStart: 1,
              onSelectDate: function(ct, $i) {
                return $i.blur();
              },
              onGenerate: function(ct) {
                $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
                return $(this).find('.xdsoft_date');
              },
              closeOnDateSelect: true,
              format: 'd.m.Y'
            });
            return input.focus().blur(function() {
              var t;
              t = $(this);
              _this.options.pay_date = $(this).val();
              return new sendAjax('save_costs_payment_date', {
                id: _this.options.pay_id,
                date: _this.options.pay_date
              }, function() {
                t.parent().removeClass('tdInputHere');
                return t.replaceWith(_this.options.pay_date);
              });
            });
          }
        }
      }));
      cl = 'mayBeEdit';
      if (_this.access === 5) {
        cl = '';
      }
      tr.append(td2 = $('<td/>', {
        'html': this.options.pay_price,
        'class': cl,
        click: function() {
          var input;
          if (_this.access === 5) {
            return false;
          }
          if ($(this).find('input').length === 0) {
            $(this).html(input = $('<input/>', {
              'type': 'text',
              'val': $(this).html(),
              keyup: function() {
                var percent, val;
                $(this).val(val = deleteNotMoneySymbols($(this).val()));
                _this.options.pay_date = getDateNow();
                td1.html(_this.options.pay_date).addClass('redTD');
                percent = calculatePercentPart(_this.options.price, val);
                return _this.percentSpan.html(round_percent(percent));
              },
              focus: function() {
                var focusedElement;
                if (Number($(this).val()) === 0) {
                  return $(this).val('');
                } else {
                  focusedElement = $(this);
                  return setTimeout(function() {
                    return focusedElement.select();
                  }, 50);
                }
              },
              change: function() {
                return _this.options.pay_price = $(this).val();
              }
            }));
            $(this).addClass('tdInputHere');
            return input.css('textAlign', $(this).css('textAlign')).focus().blur(function() {
              var percent;
              input = $(this);
              _this.options.pay_price = round_money($(this).val());
              percent = calculatePercentPart(_this.options.price, _this.options.pay_price);
              return new sendAjax('save_costs_payment_row', {
                id: _this.options.pay_id,
                price: _this.options.pay_price,
                percent: percent
              }, function() {
                var eachTr, eachTrFirst, thisTd, thisTr;
                thisTd = input.parent();
                thisTd.removeClass('tdInputHere');
                thisTd.html(_this.options.pay_price);
                _this.percentSpan.html(round_percent(percent));
                _this.options.pay_percent = percent;
                rData[i].pay_percent = percent;
                tr.attr('id', 'myGroupRowDelete');
                eachTrFirst = $(windowObj.$el).find('#myGroupRowDelete').attr('id', '');
                eachTrFirst.data(_this.options);
                while (eachTrFirst.hasClass('subRow')) {
                  eachTrFirst = eachTrFirst.prev();
                }
                percent = Number(eachTrFirst.data().pay_percent);
                eachTr = eachTrFirst.next();
                console.info(Number(eachTrFirst.data().pay_percent));
                while (eachTr.hasClass('subRow')) {
                  console.info(Number(eachTr.data().pay_percent));
                  percent += Number(eachTr.data().pay_percent);
                  eachTr = eachTr.next();
                }
                if (percent !== Number(eachTrFirst.data().percent) || 1) {
                  console.log(" != не равно !!!!");
                  InvoiceRowData.costs = 0;
                  thisTr = thisTd.parent();
                  thisTr.data(_this.options);
                  thisTr.parent().find('tr').each(function() {
                    var da;
                    da = $(this).data();
                    if (Number(da.del) === 0) {
                      return InvoiceRowData.costs += Number(da.pay_price);
                    }
                  });
                  InvoiceRowData.costs = round_money(InvoiceRowData.costs);
                  windowObj.updateHead(InvoiceRowData);
                  _this.options.pay_date = getDateNow();
                  if (Number(percent) === 100 && Number(eachTrFirst.data().flag_ice) === 0 || Number(percent) !== 100 && Number(eachTrFirst.data().flag_ice) === 1) {
                    tr.find('.ice').click();
                  }
                  return new sendAjax("save_payment_costs", {
                    invoice_id: InvoiceRowData.id,
                    pay_date: _this.options.pay_date,
                    pay_id: _this.options.pay_id,
                    costs: InvoiceRowData.costs,
                    id: _this.options.id,
                    percent: percent
                  }, function() {
                    var results;
                    $('#js-main-invoice-table').invoice('reflesh', InvoiceRowData);
                    console.log(" != не равно !!!!");
                    td1.html(_this.options.pay_date).stop().animate({
                      backgroundColor: "transparent"
                    }, 200, null, function() {
                      return $(this).removeClass('redTD').attr('style', '');
                    });
                    data = eachTrFirst.data();
                    data.percent = percent;
                    eachTr = eachTrFirst.next();
                    if (percent !== 100) {
                      eachTrFirst.find('.percent_payment_inf').addClass('warning');
                    } else {
                      eachTrFirst.find('.percent_payment_inf').removeClass('warning');
                    }
                    results = [];
                    while (eachTr.hasClass('subRow')) {
                      data = eachTr.data();
                      data.percent = percent;
                      eachTr.data(data);
                      if (percent !== 100) {
                        eachTr.find('.percent_payment_inf').addClass('warning');
                      } else {
                        eachTr.find('.percent_payment_inf').removeClass('warning');
                      }
                      results.push(eachTr = eachTr.next());
                    }
                    return results;
                  });
                }
              });
            });
          }
        }
      }));
      tr.append(td3 = $('<td/>', {
        'class': 'percent_payment_inf'
      }).append(this.percentSpan = $('<span/>', {
        'class': 'percentSpan',
        'html': round_percent(this.options.pay_percent)
      })).append($('<span/>', {
        'html': "%"
      })));
      if (Number(tr.data().percent) !== 100) {
        td3.addClass('warning');
      }
      if (rowspan >= 1) {
        if (rowspan > 1) {
          td1.addClass('noBorderBottm');
          td2.addClass('noBorderBottm');
          td2.addClass('noBorderBottm');
        }
      }
      button2 = [];
      if (tr.hasClass('singleRow')) {
        button2.push({
          'name': 'вставить сумму счёта',
          'class': '',
          click: function(e) {
            td2.click();
            return setTimeout(function() {
              _this.options.pay_date = getDateNow();
              td1.html(_this.options.pay_date).addClass('redTD');
              return td2.find('input').val(_this.options.price).focus().blur();
            }, 200);
          }
        });
      }
      button2.push({
        'name': 'добавить оплату',
        'class': '',
        click: function(e) {
          var eachTr, podst, r, r_old, summ;
          eachTr = tr;
          summ = Number(tr.data().pay_price);
          while (eachTr.hasClass('subRow')) {
            eachTr = eachTr.prev();
            summ += Number(eachTr.data().pay_price);
          }
          r = eachTr.find('td[rowspan]');
          podst = Number(tr.data().price) - summ;
          if (r) {
            r_old = Number(eachTr.find('td[rowspan]').eq(0).attr('rowspan'));
            eachTr.find('td[rowspan]').attr('rowspan', r_old + 1);
          }
          return new sendAjax('new_costs_payment_row', {
            parent_id: _this.options.id
          }, function(response) {
            var newData;
            response.data.pay_price = round_money(podst);
            newData = $.extend({}, _this.options, response.data);
            tr.after(new costsRow([newData], 0, _this.access, windowObj, InvoiceRowData, 0));
            return windowObj.calculateCosts(InvoiceRowData);
          });
        }
      });
      if (tr.hasClass('subRow')) {
        button2.push({
          'name': 'удалить оплату',
          'class': '',
          click: function(e) {
            var eachTr, r, r_old;
            eachTr = tr;
            while (eachTr.hasClass('subRow')) {
              eachTr = eachTr.prev();
            }
            r = eachTr.find('td[rowspan]');
            if (r) {
              r_old = Number(eachTr.find('td[rowspan]').eq(0).attr('rowspan'));
              eachTr.find('td[rowspan]').attr('rowspan', r_old - 1);
            }
            return new sendAjax('delete_costs_payment', {
              id: _this.options.pay_id
            }, function() {
              tr.remove();
              return windowObj.calculateCosts(InvoiceRowData);
            });
          }
        });
      }
      if (this.access !== 5) {
        td1.menuRightClick({
          'buttons': button2
        });
        td2.menuRightClick({
          'buttons': button2
        });
        return td3.menuRightClick({
          'buttons': button2
        });
      }
    };

    costsRow.prototype.supplierSearch = function(td, InvoiceRowData) {
      var _this;
      _this = this;
      return td.click(function() {
        var inputSearch;
        if ($(this).find('input').length === 0) {
          $(this).html(inputSearch = $('<input/>', {
            'type': 'text',
            'val': $(this).html(),
            keyup: function() {
              return console.log(Number($(this).attr('data-id')));
            },
            change: function() {},
            blur: function() {
              var id, name, t;
              t = $(this);
              name = $(this).val();
              id = Number($(this).attr('data-id'));
              console.log(id);
              if (_this.options.supplier_id !== id && id > 0) {
                _this.options.supplier_name = name;
                _this.options.supplier_id = id;
                return new sendAjax('save_supplier_name', {
                  id: _this.options.id,
                  supplier_name: _this.options.supplier_name,
                  supplier_id: id
                }, function() {
                  t.parent().removeClass('tdInputHere').attr('data-id', id);
                  return t.replaceWith(_this.options.supplier_name);
                });
              } else if ((!id) && name !== '' && name !== _this.options.supplier_name) {
                console.log(InvoiceRowData);
                return new modalConfirm({
                  html: 'Данного названия ЮР лица не найдено,<br> Вы хотите запросить добавление ЮР лица?'
                }, function() {
                  var mess;
                  mess = "При регистрации оплаты поставщику ООО \"" + name + "\" (в оплату затрат по счету №" + InvoiceRowData.invoice_num + " для клиента " + InvoiceRowData.client_name + "), \n";
                  mess += "произошел отказ по причине отсутствия данного юр. лицо ООО\"" + name + "\" в системе.\n";
                  mess += "Пожалуйста, внесите данные юридического лица ООО\"" + name + "\" в карточку необходимого поставщика.";
                  return new sendMessage({
                    "ajax": "query_get_new_requisit",
                    windowName: "Запрос на заведение реквизитов",
                    message: mess
                  }, function() {
                    console.log("asd");
                    t.parent().removeClass('tdInputHere');
                    return t.replaceWith(_this.options.supplier_name);
                  });
                }, function() {
                  t.parent().removeClass('tdInputHere');
                  return t.replaceWith(_this.options.supplier_name);
                });
              } else {
                t.parent().removeClass('tdInputHere');
                return t.replaceWith(_this.options.supplier_name);
              }
            }
          }));
          $(this).addClass('tdInputHere');
          inputSearch.css('textAlign', $(this).css('textAlign')).focus();
          inputSearch.autocomplete({
            minLength: 2,
            source: function(request, response) {
              return $.ajax({
                type: "POST",
                dataType: "json",
                data: {
                  AJAX: 'shearch_supplier_requsit_autocomlete',
                  search: request.term
                },
                success: function(data) {
                  return response(data);
                }
              });
            },
            select: function(event, ui) {
              inputSearch.attr('data-id', ui.item.desc).val(ui.item.label).blur();
              return false;
            }
          });
          inputSearch.data("ui-autocomplete")._renderItem = function(ul, item) {
            ul.css('z-index', Number($(_this.$el).parent().parent().css("z-index")) + 1);
            return $("<li></li>", {
              click: function(e) {
                return inputSearch.attr('data-id', 0);
              }
            }).data("ui-autocomplete-item", item).append(item.label).appendTo(ul);
          };
          return inputSearch.keydown(function(e) {
            if (e.keyCode === 13) {
              if (inputSearch.is(':focus')) {
                inputSearch.attr('data-id', 0);
                inputSearch.blur();
                return false;
              }
            }
          });
        }
      });
    };

    costsRow.prototype.createEditingObj = function(data, rData, i, windowObj, InvoiceRowData, rowspan) {
      var _this, delTd, editClass, td, td2, tr;
      _this = this;
      tr = $('<tr/>', {
        'id': 'c_' + data.id
      }).data(data);
      if (rowspan === 0) {
        tr.addClass('subRow');
      }
      if (rowspan === 1) {
        tr.addClass('singleRow');
      }
      if (rowspan > 1) {
        tr.addClass('firstGroupRow');
      }
      if (rowspan >= 1) {
        tr.append(td = $('<td/>', {
          'rowspan': rowspan,
          'class': 'mayBeEdit',
          'html': this.options.supplier_name,
          'data-id': this.options.supplier_id
        }));
        this.supplierSearch(td, InvoiceRowData);
        editClass = '';
        if (rowspan === 1 && this.access !== 5) {
          editClass = 'mayBeEdit';
        }
        tr.append($('<td/>', {
          'rowspan': rowspan,
          'html': this.options.number,
          'class': editClass,
          click: function() {
            var input;
            if (_this.access === 5) {
              return false;
            }
            if ($(this).find('input').length === 0 && Number($(this).attr('rowspan')) === 1) {
              $(this).html(input = $('<input/>', {
                'type': 'text',
                'val': $(this).html(),
                change: function() {
                  return _this.options.number = $(this).val();
                }
              }));
              $(this).addClass('tdInputHere');
              return input.css('textAlign', $(this).css('textAlign')).focus().blur(function() {
                var t;
                t = $(this);
                _this.options.number = $(this).val();
                return new sendAjax('save_costs_row', {
                  id: _this.options.id,
                  number: _this.options.number
                }, function() {
                  t.parent().removeClass('tdInputHere');
                  return t.replaceWith(_this.options.number);
                });
              });
            }
          }
        }));
        if (rowspan === 1) {
          editClass = 'mayBeEdit';
        }
        if (this.access === 5) {
          tr.append($('<td/>', {
            'rowspan': rowspan,
            'html': this.options.date,
            'class': 'date '
          }));
        } else {
          tr.append($('<td/>', {
            'rowspan': rowspan,
            'html': this.options.date,
            'class': 'date ' + editClass,
            click: function() {
              var input;
              if (this.access === 5) {
                return false;
              }
              if ($(this).find('input').length === 0 && Number($(this).attr('rowspan')) === 1) {
                $(this).html(input = $('<input/>', {
                  'type': 'text',
                  'val': $(this).html(),
                  change: function() {
                    return _this.options.date = $(this).val();
                  }
                }));
                $(this).addClass('tdInputHere');
                input.datetimepicker({
                  timepicker: false,
                  dayOfWeekStart: 1,
                  onSelectDate: function(ct, $i) {
                    return $i.blur();
                  },
                  onGenerate: function(ct) {
                    $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
                    return $(this).find('.xdsoft_date');
                  },
                  closeOnDateSelect: true,
                  format: 'd.m.Y'
                });
                return input.focus().blur(function() {
                  var t;
                  t = $(this);
                  _this.options.date = $(this).val();
                  return new sendAjax('save_costs_row', {
                    id: _this.options.id,
                    date: _this.options.date
                  }, function() {
                    t.parent().removeClass('tdInputHere');
                    return t.replaceWith(_this.options.date);
                  });
                });
              }
            }
          }));
        }
        tr.append(td2 = $('<td/>', {
          'rowspan': rowspan,
          'html': this.options.price,
          'class': editClass,
          click: function() {
            var input;
            if ($(this).find('input').length === 0 && Number($(this).attr('rowspan')) === 1) {
              $(this).html(input = $('<input/>', {
                'type': 'text',
                'val': $(this).html(),
                keyup: function() {
                  var percent, val;
                  this.val(val = deleteNotMoneySymbols($(this).val()));
                  percent = calculatePercentPart(val, _this.options.pay_price);
                  return _this.percentSpan.html(round_percent(percent));
                },
                focus: function() {
                  var focusedElement;
                  if (Number($(this).val()) === 0) {
                    return $(this).val('');
                  } else {
                    focusedElement = $(this);
                    return setTimeout(function() {
                      return focusedElement.select();
                    }, 50);
                  }
                },
                change: function() {
                  return _this.options.price = $(this).val();
                }
              }));
              $(this).addClass('tdInputHere');
              return input.css('textAlign', $(this).css('textAlign')).focus().blur(function() {
                var per, thisTd, thisTr;
                input = $(this);
                _this.options.price = round_money($(this).val());
                InvoiceRowData.costs_supplier_bill = 0;
                thisTd = input.parent();
                thisTr = thisTd.parent();
                thisTr.data(_this.options);
                thisTr.parent().find('tr.singleRow,tr.firstGroupRow').each(function() {
                  var da;
                  da = $(this).data();
                  if (Number(da.del) === 0) {
                    return InvoiceRowData.costs_supplier_bill += Number(da.price);
                  }
                });
                per = Number(_this.options.pay_price) * 100 / Number(_this.options.price);
                if (Number(_this.options.pay_price) === 0) {
                  per = 0;
                }
                if (Number(_this.options.price) === 0) {
                  per = 0;
                }
                new sendAjax('save_costs_row', {
                  id: _this.options.id,
                  price: _this.options.price
                }, function() {
                  input.parent().removeClass('tdInputHere');
                  return input.replaceWith(_this.options.price);
                });
                return new sendAjax('save_costs_payment_percent', {
                  id: _this.options.pay_id,
                  percent: per,
                  invoice_id: InvoiceRowData.id,
                  costs_supplier_bill: InvoiceRowData.costs_supplier_bill
                }, function() {
                  _this.percentSpan.html(round_percent(per));
                  windowObj.updateHead(InvoiceRowData);
                  InvoiceRowData.costs_supplier_bill = round_money(InvoiceRowData.costs_supplier_bill);
                  return $('#js-main-invoice-table').invoice('reflesh', InvoiceRowData);
                });
              });
            }
          }
        }));
      }
      this.createEditingObjPayments(data, rData, i, windowObj, InvoiceRowData, rowspan, tr);
      if (rowspan >= 1) {
        td = $('<td/>', {
          'rowspan': rowspan,
          'class': 'ice',
          click: function() {
            var flag_ice, tbl;
            if (_this.access === 5) {
              return false;
            }
            if ($(this).hasClass('checked')) {
              _this.options.flag_ice = 0;
              $(this).removeClass('checked');
            } else {
              _this.options.flag_ice = 1;
              $(this).addClass('checked');
            }
            tbl = $(this).parent().parent();
            console.log(tbl.find('tr td.ice').length, tbl.find('tr td.ice.checked').length);
            if (tbl.find('tr td.ice').length === tbl.find('tr td.ice.checked').length && _this.options.flag_ice === 1) {
              flag_ice = 1;
            } else {
              flag_ice = 0;
            }
            if (Number(windowObj.options.flag_ice) !== flag_ice) {
              windowObj.options.flag_ice = flag_ice;
              new sendAjax("edit_flag_ice", {
                id: windowObj.options.id,
                val: windowObj.options.flag_ice
              }, function() {
                return $('#js-main-invoice-table').invoice('reflesh', windowObj.options);
              });
            }
            return new sendAjax('edit_glag_ice_costs_pay', {
              id: _this.options.id,
              val: _this.options.flag_ice
            });
          }
        });
        if (Number(_this.options.flag_ice) > 0) {
          td.addClass('checked');
        }
        tr.append(td);
        tr.append($('<td/>', {
          'rowspan': rowspan
        }).append($('<div/>', {
          'html': this.options.buch_name
        })).append($('<div/>', {
          'html': this.options.create
        })));
        tr.append(delTd = $('<td/>', {
          'rowspan': rowspan
        }));
        this.costsDel(delTd, rData, i, data, windowObj, InvoiceRowData);
      }
      tr.data(this.options);
      if (Number(this.options.del) > 0) {
        tr.addClass('deleted');
      }
      return tr;
    };

    costsRow.prototype.createSimpleRow = function(data, rData, i, windowObj, InvoiceRowData, rowspan) {
      var td, td_del, tr;
      tr = $('<tr/>').data(data);
      if (rowspan === 0) {
        tr.addClass('subRow');
      }
      if (rowspan === 1) {
        tr.addClass('singleRow');
      }
      if (rowspan > 1) {
        tr.addClass('firstGroupRow');
      }
      if (rowspan >= 1) {
        tr.append(td = $('<td/>', {
          'rowspan': rowspan,
          'html': this.options.supplier_name,
          'data-id': this.options.supplier_id
        }));
        tr.append($('<td/>', {
          'html': this.options.number,
          'rowspan': rowspan
        }));
        tr.append($('<td/>', {
          'html': this.options.date,
          'rowspan': rowspan
        }));
        tr.append($('<td/>', {
          'html': this.options.price,
          'rowspan': rowspan
        }));
      }
      tr.append($('<td/>', {
        'html': this.options.pay_date,
        'data-t': '654'
      }));
      tr.append($('<td/>', {
        'html': this.options.pay_price
      }));
      tr.append($('<td/>').append($('<span/>', {
        'html': this.options.pay_percent
      })).append($('<span/>', {
        'html': "%"
      })));
      if (rowspan >= 1) {
        tr.append($('<td/>', {
          'rowspan': rowspan,
          'class': 'ice'
        }));
        tr.append($('<td/>', {
          'rowspan': rowspan
        }).append($('<div/>', {
          'html': this.options.buch_name
        })).append($('<div/>', {
          'html': this.options.create
        })));
        tr.append(td_del = $('<td/>', {
          'rowspan': rowspan
        }));
        if (Number(this.access) === 1 && Number(rData[i].del) > 0) {
          this.realCostsDel(td_del, rData, i, data, windowObj);
        } else if (Number(rData[i].del) === 0) {
          this.costsDel(td_del, rData, i, data, windowObj, InvoiceRowData);
        }
      }
      tr.data(this.options);
      if (Number(this.options.del) > 0) {
        tr.addClass('deleted');
      }
      return tr;
    };

    costsRow.prototype.costsDel = function(tdObj, rData, i, data, windowObj, InvoiceRowData) {
      var _this;
      _this = this;
      return tdObj.addClass('ppDel').click(function(e) {
        var td;
        td = $(this);
        return new sendAjax('save_costs_row', {
          id: _this.options.id,
          del: 1
        }, function() {
          var button_changed, n, pause, results, row, rowspan;
          button_changed = $('#js--how_del_payment_button');
          button_changed.data().num = Number(button_changed.data().num) + 1;
          button_changed.text('Показать удалённые(' + button_changed.data().num + ')');
          if (button_changed.data().num > 0) {
            button_changed.addClass('lightGreen');
          }
          rowspan = Number(td.attr('rowspan'));
          td.parent().attr('id', 'myGroupRowDelete');
          _this.options.del = 1;
          row = $(windowObj.$el).find('#myGroupRowDelete').attr('id', '').addClass('deleted').data(_this.options);
          console.log(_this.options);
          n = i;
          while (rowspan > 0) {
            rData[n].del = 1;
            row.addClass('deleted').data(rData[n]);
            row = row.next();
            rowspan = rowspan - 1;
            n++;
          }
          windowObj.calculateCosts(InvoiceRowData);
          td.replaceWith(td = $('<td/>', {
            'rowspan': Number(td.attr('rowspan'))
          }));
          if (_this.access === 1) {
            _this.realCostsDel(td, rData, i, data, windowObj);
          }
          if (button_changed.hasClass('no')) {
            pause = 0;
            if (this.access === 1) {
              pause = 2000;
            }
            rowspan = Number(td.attr('rowspan'));
            td.parent().attr('id', 'myGroupRowDelete');
            row = $(windowObj.$el).find('#myGroupRowDelete');
            results = [];
            while (rowspan > 0) {
              row.addClass('Delete');
              row.delay(pause).fadeOut(700, function() {
                return $(this).delay(2000).remove();
              });
              row = row.next();
              results.push(rowspan = rowspan - 1);
            }
            return results;
          }
        });
      });
    };

    costsRow.prototype.realCostsDel = function(tdObj, rData, i, data, windowObj) {
      return tdObj.addClass('ppDel').click(function(e) {
        var confirmObj, td;
        td = $(this);
        return confirmObj = new modalConfirm({
          html: 'Данная запись будет удалена безвозвратно.<br>Продолжить?'
        }, function() {
          return new sendAjax('delete_costs', {
            id: data.id
          }, function() {
            var button_changed, row, rowspan;
            rowspan = Number(td.attr('rowspan'));
            td.parent().attr('id', 'myGroupRowDelete');
            row = $(windowObj.$el).find('#myGroupRowDelete');
            while (rowspan > 0) {
              row.addClass('Delete');
              row.delay(200).fadeOut(700, function() {
                return $(this).delay(2000).remove();
              });
              row = row.next();
              rowspan = rowspan - 1;
            }
            rData[i] = void 0;
            delete rData[i];
            rData.splice(i, 1);
            button_changed = $('#js--how_del_payment_button');
            button_changed.data().num = Number(button_changed.data().num) - 1;
            button_changed.text('Показать удалённые(' + button_changed.data().num + ')');
            if (button_changed.data().num === 0) {
              return button_changed.addClass('no lightGreen');
            }
          });
        });
      });
    };

    return costsRow;

  })();


  /*
   * прототип окна расходов
   *  costsWindow
   */

  costsWindow = (function() {
    costsWindow.prototype.saveObj = {};

    costsWindow.prototype.defaults = {
      id: 0,
      number: '0000',
      type: "new"
    };

    costsWindow.prototype.countDelRow = 0;

    costsWindow.prototype.accces = 0;

    costsWindow.prototype.head = {
      price: {},
      r_percent: {},
      conditions: {}
    };

    function costsWindow(InvoiceRowData, responseData, access) {
      this.access = access;
      this.options = InvoiceRowData;
      this.init(InvoiceRowData, responseData);
    }

    costsWindow.prototype.init = function(InvoiceRowData, responseData) {
      var _this;
      _this = this;
      if (responseData !== void 0) {
        $('#quick_button_div .button').eq(1).addClass('checked');

        /*
         * создание контейнера
         */
        this.main_div = $('<div/>');

        /*
         * добавление шапки окна
         */
        this.main_div.prepend(this.head = this.createHead(InvoiceRowData));

        /*
         * добавляем таблицу
         */
        this.main_div.append(this.bodyRows = this.createTable(responseData, 0, InvoiceRowData));

        /*
         * создание окна
         */
        this.myObj = new modalWindow({
          html: this.main_div,
          maxHeight: '100%',
          maxWidth: '90%',
          title: 'Расходы по счёту',
          buttons: this.getButtons(InvoiceRowData, responseData)
        }, {
          closeOnEscape: true,
          single: true,
          close: function(event, ui) {
            return $('#quick_button_div .button').eq(1).removeClass('checked');
          }
        });
        this.$el = this.myObj.options.html[0];
        return $(this.$el).parent().css('padding', '0');
      }
    };

    costsWindow.prototype.updateHead = function(InvoiceRowData) {
      this.head = this.createHead(InvoiceRowData);
      return this.main_div.find('#head_info').replaceWith(this.head);
    };

    costsWindow.prototype.calculateCosts = function(InvoiceRowData) {
      var costs, costs_supplier_bill, prof;
      costs_supplier_bill = 0;
      this.bodyRows.find('tr.singleRow, tr.firstGroupRow').each(function() {
        var data;
        data = $(this).data();
        if (Number(data.del) === 0 && !$(this).hasClass('deleted')) {
          return costs_supplier_bill += Number(data.price);
        }
      });
      if (costs_supplier_bill !== Number(this.options.costs_supplier_bill)) {
        InvoiceRowData.costs_supplier_bill = round_money(costs_supplier_bill);
        new sendAjax('costs_supplier_bill', {
          invoice_id: InvoiceRowData.id,
          costs_supplier_bill: InvoiceRowData.costs_supplier_bill
        });
      }
      costs = 0;
      this.bodyRows.find('tr').each(function(index) {
        var data;
        data = $(this).data();
        if (Number(data.del) === 0 && !$(this).hasClass('deleted') && index > 0) {
          console.log(data);
          return costs += Number(data.pay_price);
        }
      });
      if (this.options.costs !== round_money(costs)) {
        InvoiceRowData.costs = round_money(costs);
        new sendAjax('save_invoice_costs_payment', {
          invoice_id: InvoiceRowData.id,
          costs: InvoiceRowData.costs
        }, function() {
          windowObj.updateHead(InvoiceRowData);
          return $('#js-main-invoice-table').invoice('reflesh', InvoiceRowData);
        });
      }
      console.log(InvoiceRowData);
      this.options = InvoiceRowData;
      this.updateHead(InvoiceRowData);
      prof = round_money(Number(this.options.price_out) - Number(this.options.costs_supplier_bill));
      console.log(" ***** >>>>> **** prof = ", prof);
      console.info("@options.price_out", this.options.price_out);
      console.info("@options.costs_supplier_bill", this.options.costs_supplier_bill);
      return $('#js-main-invoice-table').invoice('reflesh', InvoiceRowData);
    };

    costsWindow.prototype.getProfitExpected = function(InvoiceRowData) {
      console.log("getProfitExpected :: InvoiceRowData.price_out = " + InvoiceRowData.price_out + "InvoiceRowData.costs_supplier_bill = " + InvoiceRowData.costs_supplier_bill);
      return Number(InvoiceRowData.price_out) - Number(InvoiceRowData.costs_supplier_bill);
    };

    costsWindow.prototype.getProfitFact = function(InvoiceRowData) {
      console.log("getProfitFact :: InvoiceRowData = ", InvoiceRowData);
      return Number(InvoiceRowData.price_out_payment) - Number(InvoiceRowData.costs);
    };

    costsWindow.prototype.calculateCostsSave = function() {
      var self;
      self = this;
      return new sendAjax('save_costs_from_invoice', {
        id: this.options.id,
        costs: this.options.costs
      }, function() {
        return $('#js-main-invoice-table').invoice('reflesh', self.options);
      });
    };

    costsWindow.prototype.updatePaymenContent = function(button, responseData, InvoiceRowData) {
      if (button.hasClass('showed')) {
        button.removeClass('showed');
        return $(this.$el).find('#js--payment-window--body_info-table').replaceWith(this.createTable(responseData, 0, InvoiceRowData));
      } else {
        button.addClass('showed');
        return $(this.$el).find('#js--payment-window--body_info-table').replaceWith(this.createTable(responseData, 1, InvoiceRowData));
      }
    };

    costsWindow.prototype.createTable = function(responseData, showDell, InvoiceRowData) {
      var i, id, j, k, len1, payment, rowspan, tbl, tr;
      if (showDell == null) {
        showDell = 0;
      }
      tbl = $('<table>', {
        'id': 'js--payment-window--body_info-table',
        'class': 'costs'
      }).append(tr = $('<tr/>'));
      tr.append($('<th/>', {
        'html': 'поставщик'
      })).append($('<th/>', {
        'html': '№ счёта'
      })).append($('<th/>', {
        'html': 'дата счёта'
      })).append($('<th/>', {
        'html': 'сумма счёта'
      })).append($('<th/>', {
        'html': 'дата оплаты'
      })).append($('<th/>', {
        'html': 'сумма оплаты'
      })).append($('<th/>', {
        'html': '%'
      })).append($('<th/>')).append($('<th/>', {
        'html': 'счёт внесён'
      })).append($('<th/>'));
      id = 0;
      for (i = j = 0, len1 = responseData.length; j < len1; i = ++j) {
        payment = responseData[i];
        rowspan = 0;
        if (Number(payment.del) > 0 && showDell === 0) {
          this.countDelRow = this.countDelRow + 1;
        } else {
          if (id !== responseData[i].id) {
            id = responseData[i].id;
            rowspan = 1;
            k = i + 1;
            while (responseData[k] !== void 0 && responseData[k].id === id) {
              rowspan++;
              k++;
            }
          }
          responseData[i] = new costsRowObj(responseData[i]);
          tbl.append(new costsRow(responseData, i, this.access, this, InvoiceRowData, rowspan));
        }
      }
      return tbl;
    };

    costsWindow.prototype.addHandlerForInputSearch = function(inputSearch, buttonSearch) {
      var _this;
      _this = this;
      inputSearch.autocomplete({
        minLength: 2,
        source: function(request, response) {
          return $.ajax({
            type: "POST",
            dataType: "json",
            data: {
              AJAX: 'shearch_invoice_autocomlete',
              search: request.term
            },
            success: function(data) {
              return response(data);
            }
          });
        },
        select: function(event, ui) {
          inputSearch.attr('data-id', ui.item.desc);
          if (event.keyCode !== 13) {
            if (inputSearch.is(':focus')) {
              buttonSearch.click();
            }
          }
          return false;
        }
      });
      inputSearch.data("ui-autocomplete")._renderItem = function(ul, item) {
        ul.css('z-index', Number($(_this.$el).parent().parent().css("z-index")) + 1);
        return $("<li></li>", {
          click: function(e) {
            return inputSearch.attr('data-id', 0);
          }
        }).data("ui-autocomplete-item", item).append(item.label).appendTo(ul);
      };
      inputSearch.keydown(function(e) {
        if (e.keyCode === 13) {
          if (inputSearch.is(':focus')) {
            buttonSearch.click();
            inputSearch.attr('data-id', 0);
            return false;
          }
        }
      });

      /*
       * buttonSearch
       */
      return buttonSearch.click(function(e) {
        var send;
        send = {
          invoice_num: inputSearch.val(),
          id: 0
        };
        if (inputSearch.attr('data-id') && Number(inputSearch.attr('data-id')) > 0 && inputSearch.attr('data-id') !== void 0) {
          send.id = inputSearch.attr('data-id');
        }
        return new sendAjax('getInvoceRow', send, function(responseRow) {
          console.log("запрос на выгрузку '" + inputSearch.val(), responseRow);
          if (responseRow.data.length === 1) {
            console.log(" найдено полное соответствие по счёту ", responseRow.data);
            return new sendAjax('get_costs', {
              'id': responseRow.data[0].id
            }, function(response) {
              delete _this.$el;
              $(_this.$el).remove();
              return new costsWindow(responseRow.data[0], response.data, _this.access);
            });
          }
        });
      });
    };

    costsWindow.prototype.createHead = function(InvoiceRowData) {
      var _this, buttonSearch, div1, div2, head_info, inputSearch, r_percent, table, td, tr;
      _this = this;
      head_info = $('<div>', {
        id: 'head_info'
      });
      table = $('<table>', {
        id: 'js--payment-window--head_info-table'
      });

      /*
       * строка 1
       */
      tr = $('<tr/>').append($('<td/>', {
        'colspan': '2'
      }).append($('<span/>', {
        'html': 'номер счёта',
        'class': 'span-greyText'
      }))).append($('<td/>', {
        'colspan': '2'
      })).append($('<td/>', {
        'colspan': '4'
      })).append($('<td/>', {
        'colspan': '4'
      }).append($('<span/>', {
        'class': 'span-greyText',
        'html': 'Прибыль сделки'
      })));
      table.append(tr);

      /*
       * строка 2
       */
      tr = $('<tr/>');
      tr.append($('<td/>').append(inputSearch = $('<input/>', {
        'type': 'text',
        'id': 'js--payment-window--search-pp-input',
        'val': InvoiceRowData.invoice_num
      })));
      tr.append($('<td/>').append(buttonSearch = $('<button/>', {
        'id': 'js--payment-window--search-pp-button'
      })));
      this.addHandlerForInputSearch(inputSearch, buttonSearch);
      div1 = $('<div/>').append($('<span/>', {
        'html': 'Счёт',
        'class': 'span-boldText'
      })).append($('<span/>', {
        'html': ' № ',
        'class': 'span-greyText span-boldText'
      })).append($('<span/>', {
        'html': InvoiceRowData.invoice_num,
        'class': 'span-boldText'
      })).append($('<span/>', {
        'html': 'от',
        'class': 'span-greyText'
      }).css('paddingLeft', '10px'));
      div2 = $('<div/>').append($('<span/>', {
        'html': InvoiceRowData.manager_name,
        'data-id': InvoiceRowData.manager_id
      }));
      tr.append($('<td/>', {
        'class': 'wating-and-facting-left head-main-info-left'
      }).append(div1).append(div2));
      div1 = $('<div/>').append($('<span/>', {
        'html': InvoiceRowData.invoice_create_date
      }).css('paddingLeft', '10px')).append($('<span/>', {
        'html': ' на сумму ',
        'class': 'span-greyText',
        css: {
          'paddingLeft': '10px'
        }
      })).append(this.head.price = $('<span/>', {
        'html': InvoiceRowData.price_out
      }).css({
        'paddingLeft': '10px',
        'fontSize': '16px'
      }));
      if (Number(InvoiceRowData.price_out) < Number(InvoiceRowData.price_out_payment)) {
        div1.append($('<span/>', {
          'html': ' переплата',
          'class': 'span-greenText'
        }).css('paddingLeft', '10px')).append(this.head.price = $('<span/>', {
          'html': round_money(Number(InvoiceRowData.price_out_payment) - Number(InvoiceRowData.price_out)),
          'class': 'span-greenText',
          'css': {
            'paddingLeft': '10px',
            'fontSize': '16px'
          }
        }));
      } else if (Number(InvoiceRowData.price_out) > Number(InvoiceRowData.price_out_payment)) {
        div1.append($('<span/>', {
          'html': ' недоплата',
          'class': 'span-redText'
        }).css('paddingLeft', '10px')).append(this.head.price = $('<span/>', {
          'html': round_money(Number(InvoiceRowData.price_out) - Number(InvoiceRowData.price_out_payment)),
          'class': 'span-redText',
          'css': {
            'paddingLeft': '10px',
            'fontSize': '16px'
          }
        }));
      }
      div2 = $('<div/>').append($('<span/>', {
        'html': InvoiceRowData.client_name,
        'data-id': InvoiceRowData.client_id
      }));
      tr.append($('<td/>', {
        'class': 'head-main-info-right'
      }).append(div1).append(div2));
      div1 = $('<div/>').append($('<span/>', {
        'html': 'оплачен:',
        'class': 'span-greyText',
        css: {
          'paddingRight': '5px'
        }
      }));
      div2 = $('<div/>').append($('<span/>', {
        'html': 'условия:',
        'class': 'span-greyText',
        css: {
          'paddingRight': '5px'
        }
      }));
      tr.append($('<td/>', {
        'class': 'wating-and-facting-left'
      }).append(div1).append(div2));
      div1 = $('<div/>').append(this.head.r_percent = $('<span/>', {
        'html': round_percent(InvoiceRowData.percent_payment)
      })).append('%');
      div2 = $('<div/>').append(this.head.conditions = $('<span/>', {
        'html': InvoiceRowData.conditions + '% - ' + (100 - Number(InvoiceRowData.conditions)) + '%'
      }));
      tr.append($('<td/>', {
        'class': 'wating-and-facting-right'
      }).append(div1).append(div2));
      if (Number(InvoiceRowData.percent_payment) !== 100) {
        div1.addClass('warning');
      }
      if (Number(InvoiceRowData.conditions) > Number(InvoiceRowData.percent_payment)) {
        div2.addClass('warning');
      }
      div1 = $('<div/>').append($('<span/>', {
        'html': 'приходы:',
        'class': 'span-greyText'
      }));
      div2 = $('<div/>').append($('<span/>', {
        'html': 'расходы:',
        'class': 'span-greyText'
      }));
      tr.append($('<td/>', {
        'class': 'wating-and-facting-left'
      }).append(div1).append(div2));
      div1 = $('<div/>').append(this.head.r_percent1 = $('<span/>', {
        'html': InvoiceRowData.price_out_payment
      })).append('р');
      div2 = $('<div/>').append(this.head.costs = $('<span/>', {
        'html': InvoiceRowData.costs
      })).append('р');
      tr.append($('<td/>', {
        'class': 'wating-and-facting-right'
      }).append(div1).append(div2));
      div1 = $('<div/>').append($('<span/>', {
        'html': 'ожидаемая:',
        'class': 'span-greyText'
      }));
      div2 = $('<div/>').append($('<span/>', {
        'html': 'фактическая:',
        'class': 'span-greyText'
      }));
      tr.append($('<td/>', {
        'class': 'wating-and-facting-left'
      }).append(div1).append(div2));
      div1 = $('<div/>').append(this.head.profit = $('<span/>', {
        'html': round_money(this.getProfitExpected(InvoiceRowData))
      })).append('р');
      div2 = $('<div/>').append(this.head.profit_f = $('<span/>', {
        'html': round_money(this.getProfitFact(InvoiceRowData))
      })).append('р');
      tr.append($('<td/>', {
        'class': 'wating-and-facting-right bold'
      }).append(div1).append(div2));
      r_percent = round_money((Number(InvoiceRowData.price_out_payment) - Number(InvoiceRowData.costs)) / Number(InvoiceRowData.price_out_payment) * 100);
      if (Number(InvoiceRowData.price_out_payment) === 0 || Number(InvoiceRowData.costs) === 0) {
        r_percent = '0.00';
      }
      console.log(Number(InvoiceRowData.price_out_payment), Number(InvoiceRowData.costs), r_percent);
      console.log("# калькулятор / % оплаты:  price_out_payment = %d, costs = %d, r_percent = %s", Number(InvoiceRowData.price_out_payment), Number(InvoiceRowData.costs), r_percent);
      div1 = $('<div/>').append($('<div/>', {
        'class': 'invoice-row--icons-calculator'
      })).append($('<div/>').append(this.head.r_percent = $('<span/>', {
        'html': r_percent
      })).append('%'));
      tr.append(td = $('<td/>', {
        'class': 'bold our_p'
      }).append(div1));
      if (this.access === 1 || this.access === 2) {
        td.addClass('mayBeEdit').click(function() {
          var t;
          t = $(this);
          return new modalConfirm("Вы уверены", function() {
            if (t.hasClass('checked')) {
              _this.options.flag_calc = 0;
              t.removeClass('checked');
            } else {
              _this.options.flag_calc = 1;
              t.addClass('checked');
            }
            return new sendAjax('edit_flag_calc', {
              id: _this.options.id,
              val: _this.options.flag_calc
            }, function() {
              return $('#js-main-invoice-table').invoice('reflesh', _this.options);
            });
          });
        });
      }
      if (Number(_this.options.flag_calc > 0)) {
        td.addClass('checked');
      }
      if (this.getProfitFact(InvoiceRowData) < 0) {
        this.head.profit_f.parent().addClass('warning');
        this.head.r_percent.parent().parent().parent().addClass('warning');
      }
      table.append(tr);

      /*
       * добавляем всё в контейнер и возвращаем
       */
      return head_info.append(table);
    };

    costsWindow.prototype.createRow = function(InvoiceRowData, responseData) {
      var _this;
      _this = this;
      return new sendAjax('create_costs', {
        'id': InvoiceRowData.id
      }, function(response) {
        var len;
        len = responseData.length;
        console.log(response.data, new costsRowObj(response.data));
        responseData[len] = new costsRowObj(response.data);
        return $(_this.$el).find('#js--payment-window--body_info-table').append(new costsRow(responseData, len, _this.access, _this, InvoiceRowData));
      });
    };

    costsWindow.prototype.recalcInvoice = function() {
      var percent_payment, price_out_payment;
      percent_payment = 0;
      price_out_payment = 0;
      this.bodyRows.find('tr').each(function(index) {
        var data;
        if (!$(this).hasClass('deleted') && index > 0) {
          data = $(this).data();
          if (data.percent !== void 0) {
            percent_payment += Number(data.percent);
          }
          if (data.price !== void 0) {
            return price_out_payment += Number(data.price);
          }
        }
      });
      return {
        percent_payment: percent_payment,
        price_out_payment: price_out_payment
      };
    };

    costsWindow.prototype.getButtons = function(InvoiceRowData, responseData) {
      var _this, buttons, className;
      _this = this;
      this.saveObj = {};
      buttons = [];
      if (Number(InvoiceRowData.id) > 0) {
        buttons.push({
          text: 'Добавить счёт поставщика',
          "class": 'button_yes_or_no yes add_payment_button',
          click: function() {
            _this.createRow(InvoiceRowData, responseData);
            return _this.calculateCosts(InvoiceRowData);
          }
        });
      }
      if (_this.countDelRow > 0) {
        className = 'button_yes_or_no no show_del_payment_button lightGreen';
      } else {
        className = 'button_yes_or_no no show_del_payment_button';
      }
      buttons.push({
        text: 'Показать удалённые(' + _this.countDelRow + ')',
        "class": className,
        id: 'js--how_del_payment_button',
        data: {
          num: _this.countDelRow
        },
        click: function() {
          if (Number($(this).data('num')) > 0) {
            if ($(this).hasClass('no')) {
              $(this).removeClass('no').html('Скрыть удалённые (' + $(this).data('num') + ')');
            } else {
              $(this).addClass('no').html('Показать удалённые (' + $(this).data('num') + ')');
              if (Number($(this).data('num')) > 0) {
                $(this).addClass('lightGreen');
              }
            }
          }
          return _this.updatePaymenContent($(this), responseData, InvoiceRowData);
        }
      });
      buttons.push({
        text: 'Закрыть',
        "class": 'button_yes_or_no no',
        click: function() {
          return _this.destroy();
        }
      });
      return buttons;
    };

    costsWindow.prototype.destroy = function() {
      return $(this.$el).parent().dialog('close').dialog('destroy').remove();
    };

    return costsWindow;

  })();


  /*
   * прототип опубликованного комментариев
   */

  commentsRow = (function() {
    commentsRow.prototype.enterObj = {};

    commentsRow.prototype.options = {};

    commentsRow.prototype.access = 0;

    function commentsRow(data, access) {
      console.log(access);
      this.access = access;
      this.options = data;
      console.log(this.access);
      return this.init();
    }

    commentsRow.prototype.init = function() {
      var cell1, cell2, main, tr;
      main = $('<div/>', {
        'class': 'comment table'
      });
      console.log(this.options);
      main.append(tr = $('<div/>', {
        'class': 'row'
      }));
      cell1 = $('<div/>', {
        'class': 'cell user_name_comments'
      });
      cell1.append($('<div/>', {
        'class': 'user_name',
        'html': this.options.user_name
      })).append($('<div/>', {
        'class': 'create_time_message',
        'html': this.options.create_time
      }));
      tr.append(cell1);
      cell2 = $('<div/>', {
        'class': 'cell comment_text'
      });
      cell2.append($('<div/>', {
        'html': this.options.comment_text
      }));
      tr.append(cell2);
      return main;
    };

    return commentsRow;

  })();


  /*
   * прототип окна комментариев
   *  costsWindow
   */

  commentsWindow = (function() {
    commentsWindow.prototype.defaults = {
      id: 0
    };

    commentsWindow.prototype.MessageMinLen = 1;

    function commentsWindow(InvoiceRowData, responseData, access) {
      this.access = access;
      this.options = InvoiceRowData;
      this.data = responseData;
      this.init(InvoiceRowData, responseData);
    }

    commentsWindow.prototype.init = function(InvoiceRowData, responseData) {

      /*
       * создание контейнера
       */
      this.main_div = $('<div/>', {
        'id': 'dialog_gen_window_form',
        'class': 'add_new_comment',
        css: {
          'padding': '15px'
        }
      });

      /*
       * добавление шапки окна
       */
      this.main_div.append(this.getContent(responseData));
      this.main_div.append(this.main_form = this.getForm(InvoiceRowData));

      /*
       * создание окна
       */
      this.myObj = new modalWindow({
        html: this.main_div,
        maxHeight: '100%',
        width: '800px',
        title: 'Переписка по счёту № ' + this.options.invoice_num + ' от ' + this.options.invoice_create_date,
        buttons: this.getButtons(InvoiceRowData)
      }, {
        closeOnEscape: true,
        single: true,
        close: function(event, ui) {
          return $('#js-main-invoice-table').invoice('reflesh', InvoiceRowData);
        }
      });
      this.$el = this.myObj.options.html[0];
      return $(this.$el).parent().css('padding', '0');
    };

    commentsWindow.prototype.getForm = function(InvoiceRowData) {
      var cell1, cell2, main, self, textarea, tr;
      self = this;
      main = $('<div/>', {
        'class': 'comment table'
      });
      main.append(tr = $('<div/>', {
        'class': 'row'
      }));
      cell1 = $('<div/>', {
        'class': 'cell user_name_comments'
      });
      cell1.append($('<div/>', {
        'class': 'user_name',
        'html': 'Вы...'
      })).append($('<div/>', {
        'class': 'create_time_message',
        'html': getDateNow()
      }));
      tr.append(cell1);
      cell2 = $('<div/>', {
        'class': 'cell comment_text'
      });
      cell2.append(textarea = $('<textarea/>', {
        'name': 'comment_text',
        keyup: function() {
          if ($(this).val().length > self.MessageMinLen) {
            console.log($(this).val().length);
            return $(self.myObj.buttonDiv).find("#js--send_comment").removeClass('no');
          } else {
            console.log($(this).val().length);
            return $(self.myObj.buttonDiv).find("#js--send_comment").addClass('no');
          }
        }
      }));
      tr.append(cell2);
      return $('<div/>', {
        'class': 'add_new_comment'
      }).append(main);
    };

    commentsWindow.prototype.getContent = function(responseData) {
      var i, j, len1, main, row, self;
      main = $('<div/>', {
        'class': 'contaner_sm'
      });
      self = this;
      for (i = j = 0, len1 = responseData.length; j < len1; i = ++j) {
        row = responseData[i];
        main.append(new commentsRow(row, this.access));
      }
      return main;
    };

    commentsWindow.prototype.getButtons = function(InvoiceRowData, responseData) {
      var buttons, self;
      self = this;
      this.saveObj = {};
      buttons = [];
      buttons.push({
        text: 'Закрыть',
        "class": 'button_yes_or_no no',
        click: function() {
          return self.destroy();
        }
      });
      buttons.push({
        text: 'Отправить',
        "class": 'button_yes_or_no no',
        id: 'js--send_comment',
        click: function() {
          var comment;
          comment = self.main_form.find('textarea').val();
          if (comment.length <= self.MessageMinLen) {
            return echo_message_js("Сообщение должно быть не короче " + self.MessageMinLen + " символов");
          } else {
            InvoiceRowData.comments_num = Number(InvoiceRowData.comments_num) + 1;
            $('#js-main-invoice-table').invoice('reflesh', InvoiceRowData);
            new sendAjax('save_invoice_comment', {
              invoice_id: InvoiceRowData.id,
              comment: comment,
              comments_num: InvoiceRowData.comments_num
            }, function(response) {
              response.data.comment_text = comment;
              return self.main_form.before(new commentsRow(response.data, this.access));
            });
            self.main_form.find('textarea').val('');
            return $(self.myObj.buttonDiv).find("#js--send_comment").addClass('no');
          }
        }
      });
      return buttons;
    };

    commentsWindow.prototype.destroy = function() {
      return $(this.$el).parent().dialog('close').dialog('destroy').remove();
    };

    return commentsWindow;

  })();


  /*
   * прототип окна комментариев
   *  costsWindow
   */

  errorWindow = (function() {
    errorWindow.prototype.defaults = {
      id: 0
    };

    errorWindow.prototype.MessageMinLen = 1;

    function errorWindow() {
      this.init();
    }

    errorWindow.prototype.init = function(InvoiceRowData, responseData) {

      /*
       * создание контейнера
       */
      this.main_div = $('<div/>', {
        'id': 'dialog_gen_window_form',
        'class': 'add_new_comment',
        css: {
          'padding': '15px'
        }
      });
      this.main_div.append(this.main_form = this.getForm());

      /*
       * создание окна
       */
      this.myObj = new modalWindow({
        html: this.main_div,
        maxHeight: '100%',
        width: '800px',
        title: 'Описание ошибки',
        buttons: this.getButtons()
      }, {
        closeOnEscape: true,
        single: true
      });
      this.$el = this.myObj.options.html[0];
      return $(this.$el).parent().css('padding', '0');
    };

    errorWindow.prototype.getForm = function(InvoiceRowData) {
      var cell1, cell2, main, self, textarea, tr;
      self = this;
      main = $('<div/>', {
        'class': 'comment table'
      });
      main.append(tr = $('<div/>', {
        'class': 'row'
      }));
      cell1 = $('<div/>', {
        'class': 'cell user_name_comments'
      });
      cell1.append($('<div/>', {
        'class': 'user_name',
        'html': 'Вы...'
      })).append($('<div/>', {
        'class': 'create_time_message',
        'html': getDateNow()
      }));
      tr.append(cell1);
      cell2 = $('<div/>', {
        'class': 'cell comment_text'
      });
      cell2.append(textarea = $('<textarea/>', {
        'name': 'comment_text',
        keyup: function() {
          if ($(this).val().length > self.MessageMinLen) {
            console.log($(this).val().length);
            return $(self.myObj.buttonDiv).find("#js--send_comment").removeClass('no');
          } else {
            console.log($(this).val().length);
            return $(self.myObj.buttonDiv).find("#js--send_comment").addClass('no');
          }
        }
      }));
      tr.append(cell2);
      return $('<div/>', {
        'class': 'add_new_comment'
      }).append(main);
    };

    errorWindow.prototype.getContent = function(responseData) {
      var i, j, len1, main, row, self;
      main = $('<div/>', {
        'class': 'contaner_sm'
      });
      self = this;
      for (i = j = 0, len1 = responseData.length; j < len1; i = ++j) {
        row = responseData[i];
        main.append(new commentsRow(row, this.access));
      }
      return main;
    };

    errorWindow.prototype.getButtons = function(InvoiceRowData, responseData) {
      var buttons, self;
      self = this;
      this.saveObj = {};
      buttons = [];
      buttons.push({
        text: 'Закрыть',
        "class": 'button_yes_or_no no',
        click: function() {
          return self.destroy();
        }
      });
      buttons.push({
        text: 'Отправить',
        "class": 'button_yes_or_no no',
        id: 'js--send_comment',
        click: function() {
          var comment;
          comment = self.main_form.find('textarea').val();
          if (comment.length <= self.MessageMinLen) {
            return echo_message_js("Сообщение должно быть не короче " + self.MessageMinLen + " символов");
          } else {
            return new sendAjax('send__error_message', {
              message: comment
            }, function(response) {
              return self.destroy();
            });
          }
        }
      });
      return buttons;
    };

    errorWindow.prototype.destroy = function() {
      return $(this.$el).parent().dialog('close').dialog('destroy').remove();
    };

    return errorWindow;

  })();


  /*
   * прототип html строки прихода
   */

  paymentRow = (function() {
    paymentRow.prototype.defaults = {
      id: 0,
      invoice_id: 0,
      invoice_number: 0,
      number: 0,
      date: getDateNow(),
      price: 0,
      percent: 0,
      create: getDateNow(),
      buch_id: 0,
      buch_name: 'Default Name',
      edit: 0,
      del: 0
    };

    paymentRow.prototype.enterObj = {};

    paymentRow.prototype.options = {};

    paymentRow.prototype.access = 0;

    function paymentRow(rData, i, access, paymentWindowObj, InvoiceRowData) {
      var data, el, key;
      if (access == null) {
        access = 0;
      }
      data = rData[i];
      if (data.edit === void 0) {
        data.edit = 1;
      }
      this.access = access;
      for (key in data) {
        el = data[key];
        this.options[key] = el;
      }
      this.options = data;
      this.calculatePaymentWindowHeader(rData, i, access = 0, paymentWindowObj, InvoiceRowData);
      return this.init(data, rData, i, paymentWindowObj, InvoiceRowData);
    }

    paymentRow.prototype.init = function(data, rData, i, paymentWindowObj, InvoiceRowData) {
      if (Number(this.options.del) === 0 && Number(this.options.edit) > 0 && (Number(this.access) === 1 || Number(this.access) === 2)) {
        return this.createEditingObj(data, rData, i, paymentWindowObj, InvoiceRowData);
      } else {
        return this.createSimpleRow(data, rData, i, paymentWindowObj, InvoiceRowData);
      }
    };

    paymentRow.prototype.calculatePaymentWindowHeader = function(rData, i, access, paymentWindowObj, InvoiceRowData) {
      var onePercent;
      if (access == null) {
        access = 0;
      }
      return onePercent = Number(InvoiceRowData.price_out) / 100;
    };

    paymentRow.prototype.createEditingObj = function(data, rData, i, paymentWindowObj, InvoiceRowData) {
      var _this, delTd, tr;
      _this = this;
      tr = $('<tr/>').data(data).append($('<td/>', {
        'html': this.options.number,
        'class': 'mayBeEdit',
        click: function() {
          var input;
          if ($(this).find('input').length === 0) {
            $(this).html(input = $('<input/>', {
              'type': 'text',
              'val': $(this).html(),
              change: function() {
                return _this.options.number = $(this).val();
              }
            }));
            $(this).addClass('tdInputHere');
            return input.css('textAlign', $(this).css('textAlign')).focus().blur(function() {
              var t;
              t = $(this);
              _this.options.number = $(this).val();
              paymentWindowObj.flag_edit++;
              return new sendAjax('save_payment_row', {
                id: _this.options.id,
                number: _this.options.number
              }, function() {
                t.parent().removeClass('tdInputHere');
                return t.replaceWith(_this.options.number);
              });
            });
          }
        }
      })).append($('<td/>', {
        'html': this.options.date,
        'class': 'date',
        'class': 'mayBeEdit',
        click: function() {
          var input;
          if ($(this).find('input').length === 0) {
            if (_this.options.number === '0' || _this.options.number === '') {
              echo_message_js('Сначала заполните № платёжки');
              return false;
            }
            $(this).html(input = $('<input/>', {
              'type': 'text',
              'val': $(this).html(),
              change: function() {
                return _this.options.date = $(this).val();
              }
            }));
            $(this).addClass('tdInputHere');
            input.datetimepicker({
              minDate: new Date(),
              timepicker: false,
              dayOfWeekStart: 1,
              onSelectDate: function(ct, $i) {
                return $i.blur();
              },
              onGenerate: function(ct) {
                $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
                return $(this).find('.xdsoft_date');
              },
              closeOnDateSelect: true,
              format: 'd.m.Y'
            });
            return input.focus().blur(function() {
              var t;
              t = $(this);
              _this.options.date = $(this).val();
              paymentWindowObj.flag_edit++;
              return new sendAjax('save_payment_row', {
                id: _this.options.id,
                date: _this.options.date
              }, function() {
                t.parent().removeClass('tdInputHere');
                return t.replaceWith(_this.options.date);
              });
            });
          }
        }
      }));
      tr.append($('<td/>', {
        'html': this.options.price,
        'class': 'mayBeEdit',
        click: function() {
          var input;
          if ($(this).find('input').length === 0) {
            if (_this.options.number === '0' || _this.options.number === '') {
              echo_message_js('Сначала заполните № платёжки');
              return false;
            }
            $(this).html(input = $('<input/>', {
              'type': 'text',
              'val': $(this).html(),
              keyup: function() {
                var per;
                $(this).val($(this).val().replace(/[\/,]/gim, '.').replace(/[^-0-9\/.]/gim, '').replace(/^([^\.]*\.)|\./g, '$1'));
                per = Number($(this).val()) * 100 / Number(InvoiceRowData.price_out);
                return _this.percentSpan.html(round_percent(per));
              },
              focus: function() {
                var focusedElement;
                if (Number($(this).val()) === 0) {
                  return $(this).val('');
                } else {
                  focusedElement = $(this);
                  return setTimeout(function() {
                    return focusedElement.select();
                  }, 50);
                }
              },
              change: function() {
                return _this.options.price = $(this).val();
              }
            }));
            $(this).addClass('tdInputHere');
            return input.css('textAlign', $(this).css('textAlign')).focus().blur(function() {
              var per;
              input = $(this);
              if (Number($(this).val()) === 0) {
                _this.options.price = '0.00';
              } else {
                _this.options.price = round_money($(this).val());
              }
              per = Number(_this.options.price) * 100 / Number(InvoiceRowData.price_out);
              paymentWindowObj.flag_edit++;
              return new sendAjax('save_payment_row', {
                id: _this.options.id,
                price: _this.options.price,
                percent: per
              }, function() {
                input.parent().removeClass('tdInputHere');
                input.replaceWith(_this.options.price);
                _this.percentSpan.html(round_percent(per));
                _this.options.percent = per;
                console.log(_this.options.percent);
                rData[i].percent = per;
                tr.data(data);
                console.log(rData[i].percent = per);
                console.log(data.percent = per);
                return paymentWindowObj.updateHeaderPercent(InvoiceRowData);
              });
            });
          }
        }
      })).append($('<td/>').append(this.percentSpan = $('<span/>', {
        'html': round_percent(this.options.percent)
      })).append($('<span/>', {
        'html': "%"
      }))).append($('<td/>').append($('<div/>', {
        'html': this.options.buch_name
      })).append($('<div/>', {
        'html': this.options.create
      }))).append(delTd = $('<td/>')).data(this.options);
      this.paymentDel(delTd, rData, i, data, paymentWindowObj, InvoiceRowData);
      if (Number(this.options.del) > 0) {
        tr.addClass('deleted');
      }
      return tr;
    };

    paymentRow.prototype.createSimpleRow = function(data, rData, i, paymentWindowObj, InvoiceRowData) {
      var td_del, tr;
      tr = $('<tr/>').data(data).append($('<td/>', {
        'html': this.options.number
      })).append($('<td/>', {
        'html': this.options.date
      })).append($('<td/>', {
        'html': this.options.price
      })).append($('<td/>').append($('<span/>', {
        'html': round_percent(this.options.percent)
      })).append($('<span/>', {
        'html': "%"
      }))).append($('<td/>').append($('<div/>', {
        'html': this.options.buch_name
      })).append($('<div/>', {
        'html': this.options.create
      }))).append(td_del = $('<td/>')).data(this.options);
      if (Number(this.access) === 1 && Number(rData[i].del) > 0) {
        this.realPaymentDel(td_del, rData, i, data);
      } else if (Number(rData[i].del) === 0) {
        this.paymentDel(td_del, rData, i, data, paymentWindowObj, InvoiceRowData);
      }
      if (Number(this.options.del) > 0) {
        tr.addClass('deleted');
      }
      return tr;
    };

    paymentRow.prototype.paymentDel = function(tdObj, rData, i, data, paymentWindowObj, InvoiceRowData) {
      var _this;
      _this = this;
      return tdObj.addClass('ppDel').click(function(e) {
        var row, td;
        td = $(this);
        row = td.parent();
        paymentWindowObj.flag_edit++;
        return new sendAjax('save_payment_row', {
          id: _this.options.id,
          del: 1
        }, function() {
          var button_changed, pause;
          rData[i].del = 1;
          button_changed = $('#js--how_del_payment_button');
          button_changed.data().num = Number(button_changed.data().num) + 1;
          button_changed.text('Показать удалённые(' + button_changed.data().num + ')');
          if (button_changed.data().num > 0) {
            button_changed.addClass('lightGreen');
          }
          row.addClass('deleted').data(_this.options);
          td.replaceWith(td = $('<td/>'));
          if (_this.access === 1) {
            _this.realPaymentDel(td, rData, i, data);
          }
          if (button_changed.hasClass('no')) {
            pause = 0;
            if (this.access === 1) {
              pause = 2000;
            }
            return row.delay(pause).fadeOut(1000, function() {
              $(this).remove();
              return paymentWindowObj.updateHeaderPercent(InvoiceRowData);
            });
          }
        });
      });
    };

    paymentRow.prototype.realPaymentDel = function(tdObj, rData, i, data) {
      return tdObj.addClass('ppDel').click(function(e) {
        var confirmObj, row, td;
        td = $(this);
        row = td.parent();
        return confirmObj = new modalConfirm({
          html: 'Данная запись будет удалена безвозвратно.<br>Продолжить?'
        }, function() {
          return new sendAjax('delete_payment', {
            id: data.id
          }, function() {
            var button_changed;
            row.delay(200).fadeOut(700, function() {
              return $(this).remove();
            });
            rData[i] = void 0;
            delete rData[i];
            rData.splice(i, 1);
            button_changed = $('#js--how_del_payment_button');
            button_changed.data().num = Number(button_changed.data().num) - 1;
            button_changed.text('Показать удалённые(' + button_changed.data().num + ')');
            if (button_changed.data().num === 0) {
              return button_changed.addClass('no lightGreen');
            }
          });
        });
      });
    };

    return paymentRow;

  })();


  /*
   * прототип окна приходов
   */

  paymentWindow = (function() {
    paymentWindow.prototype.saveObj = {};

    paymentWindow.prototype.defaults = {
      id: 0,
      number: '0000',
      type: "new"
    };

    paymentWindow.prototype.countDelRow = 0;

    paymentWindow.prototype.accces = 0;

    paymentWindow.prototype.head = {
      price: {},
      r_percent: {},
      conditions: {}
    };

    function paymentWindow(InvoiceRowData, responseData, access) {
      console.warn('старт окна');
      this.access = access;
      console.log(access);
      this.options = InvoiceRowData;
      this.flag_edit = 0;
      this.init(InvoiceRowData, responseData);
    }

    paymentWindow.prototype.init = function(InvoiceRowData, responseData) {
      var _this;
      _this = this;
      $('#quick_button_div .button').eq(0).addClass('checked');
      if (responseData !== void 0) {

        /*
         * создание контейнера
         */
        this.main_div = $('<div/>');

        /*
         * добавление шапки окна
         */
        this.main_div.prepend(this.header = this.createHead(InvoiceRowData, responseData));

        /*
         * добавляем таблицу
         */
        this.main_div.append(this.bodyRows = this.createTable(responseData, 0, InvoiceRowData));

        /*
         * создание окна
         */
        this.myObj = new modalWindow({
          html: this.main_div,
          width: '1000px',
          maxHeight: '100%',
          title: 'Приходы по счёту',
          buttons: this.getButtons(InvoiceRowData, responseData)
        }, {
          closeOnEscape: true,
          close: function(event, ui) {
            if (_this.flag_edit > 0) {
              new sendAjax('payment_window_is_editable', InvoiceRowData);
            }
            return $('#quick_button_div .button').eq(0).removeClass('checked');
          }
        });
        this.$el = this.myObj.options.html[0];
        return $(this.$el).parent().css('padding', '0');
      }
    };

    paymentWindow.prototype.updatePaymenContent = function(button, responseData, InvoiceRowData) {
      if (button.hasClass('showed')) {
        button.removeClass('showed');
        return $(this.$el).find('#js--payment-window--body_info-table').replaceWith(this.createTable(responseData, 0, InvoiceRowData));
      } else {
        button.addClass('showed');
        return $(this.$el).find('#js--payment-window--body_info-table').replaceWith(this.createTable(responseData, 1, InvoiceRowData));
      }
    };

    paymentWindow.prototype.createTable = function(responseData, showDell, InvoiceRowData) {
      var i, j, len1, payment, tbl, tr;
      if (showDell == null) {
        showDell = 0;
      }
      tbl = $('<table>', {
        'id': 'js--payment-window--body_info-table'
      }).append(tr = $('<tr/>'));
      tr.append($('<th/>', {
        'html': '№ платёжки'
      })).append($('<th/>', {
        'html': 'дата ПП'
      })).append($('<th/>', {
        'html': 'платёж на сумму'
      })).append($('<th/>', {
        'html': '% оплаты'
      })).append($('<th/>', {
        'html': 'платёж внесён',
        'colspan': '2'
      }));
      for (i = j = 0, len1 = responseData.length; j < len1; i = ++j) {
        payment = responseData[i];
        if (Number(payment.del) > 0 && showDell === 0) {
          this.countDelRow = this.countDelRow + 1;
        } else {
          responseData[i] = new paymentRowObj(responseData[i]);
          tbl.append(new paymentRow(responseData, i, this.access, this, InvoiceRowData));
        }
      }
      return tbl;
    };

    paymentWindow.prototype.addHandlerForInputSearch = function(inputSearch, buttonSearch) {

      /*
       * inputSearch
       */
      var _this;
      _this = this;
      inputSearch.autocomplete({
        minLength: 2,
        source: function(request, response) {
          return $.ajax({
            type: "POST",
            dataType: "json",
            data: {
              AJAX: 'shearch_invoice_autocomlete',
              search: request.term
            },
            success: function(data) {
              return response(data);
            }
          });
        },
        select: function(event, ui) {
          inputSearch.attr('data-id', ui.item.desc);
          if (event.keyCode !== 13) {
            if (inputSearch.is(':focus')) {
              buttonSearch.click();
            }
          }
          return false;
        }
      });
      inputSearch.data("ui-autocomplete")._renderItem = function(ul, item) {
        ul.css('z-index', Number($(_this.$el).parent().parent().css("z-index")) + 1);
        return $("<li></li>", {
          click: function(e) {
            return inputSearch.attr('data-id', 0);
          }
        }).data("ui-autocomplete-item", item).append(item.label).appendTo(ul);
      };
      inputSearch.keydown(function(e) {
        if (e.keyCode === 13) {
          if (inputSearch.is(':focus')) {
            buttonSearch.click();
            inputSearch.attr('data-id', 0);
            return false;
          }
        }
      });

      /*
       * buttonSearch
       */
      return buttonSearch.click(function(e) {
        var send;
        send = {
          invoice_num: inputSearch.val(),
          id: 0
        };
        if (inputSearch.attr('data-id') && Number(inputSearch.attr('data-id')) > 0 && inputSearch.attr('data-id') !== void 0) {
          send.id = inputSearch.attr('data-id');
        }
        return new sendAjax('getInvoceRow', send, function(responseRow) {
          console.log("запрос на выгрузку '" + inputSearch.val(), responseRow);
          if (responseRow.data.length === 1) {
            console.log(" найдено полное соответствие по счёту ", responseRow.data);
            return new sendAjax('get_payment', {
              'id': responseRow.data[0].id
            }, function(response) {
              return new paymentWindow(responseRow.data[0], response.data, _this.access);
            });
          }
        });
      });
    };

    paymentWindow.prototype.updateHead = function(InvoiceRowData) {
      this.head = this.createHead(InvoiceRowData);
      return this.main_div.find('#head_info').replaceWith(this.head);
    };

    paymentWindow.prototype.createHead = function(InvoiceRowData) {
      var _this, buttonSearch, div1, div2, head_info, inputSearch, table, tr;
      _this = this;
      head_info = $('<div>', {
        id: 'head_info'
      });
      table = $('<table>', {
        id: 'js--payment-window--head_info-table'
      });

      /*
       * строка 1
       */
      tr = $('<tr/>').append($('<td/>', {
        'colspan': '2'
      }).append($('<span/>', {
        'html': 'номер счёта',
        'class': 'span-greyText'
      }))).append($('<td/>')).append($('<td/>'));
      table.append(tr);

      /*
       * строка 2
       */
      tr = $('<tr/>');
      tr.append($('<td/>').append(inputSearch = $('<input/>', {
        'type': 'text',
        'id': 'js--payment-window--search-pp-input',
        'val': InvoiceRowData.invoice_num
      })));
      tr.append($('<td/>').append(buttonSearch = $('<button/>', {
        'id': 'js--payment-window--search-pp-button'
      })));
      this.addHandlerForInputSearch(inputSearch, buttonSearch);
      div1 = $('<div/>').append($('<span/>', {
        'html': 'Счёт',
        'class': 'span-boldText'
      })).append($('<span/>', {
        'html': ' № ',
        'class': 'span-greyText span-boldText'
      })).append($('<span/>', {
        'html': InvoiceRowData.invoice_num,
        'class': 'span-boldText'
      })).append($('<span/>', {
        'html': ' от ',
        'class': 'span-greyText'
      }).css('paddingLeft', '10px')).append($('<span/>', {
        'html': InvoiceRowData.invoice_create_date
      }).css('paddingLeft', '10px')).append($('<span/>', {
        'html': ' на сумму ',
        'class': 'span-greyText'
      }).css('paddingLeft', '10px')).append(this.head.price = $('<span/>', {
        'html': InvoiceRowData.price_out
      }).css({
        'paddingLeft': '10px',
        'fontSize': '16px'
      }));
      if (Number(InvoiceRowData.price_out) < Number(InvoiceRowData.price_out_payment)) {
        div1.append($('<span/>', {
          'html': ' переплата',
          'class': 'span-greenText'
        }).css('paddingLeft', '10px')).append(this.head.price = $('<span/>', {
          'html': round_money(Number(InvoiceRowData.price_out_payment) - Number(InvoiceRowData.price_out)),
          'class': 'span-greenText',
          'css': {
            'paddingLeft': '10px',
            'fontSize': '16px'
          }
        }));
      } else if (Number(InvoiceRowData.price_out) > Number(InvoiceRowData.price_out_payment)) {
        div1.append($('<span/>', {
          'html': ' недоплата',
          'class': 'span-redText'
        }).css('paddingLeft', '10px')).append(this.head.price = $('<span/>', {
          'html': round_money(Number(InvoiceRowData.price_out) - Number(InvoiceRowData.price_out_payment)),
          'class': 'span-redText',
          'css': {
            'paddingLeft': '10px',
            'fontSize': '16px'
          }
        }));
      }
      div2 = $('<div/>').append($('<span/>', {
        'html': InvoiceRowData.manager_name,
        'data-id': InvoiceRowData.manager_id
      })).append($('<span/>', {
        'html': ' ' + InvoiceRowData.client_name,
        'data-id': InvoiceRowData.client_id
      }).css('paddingLeft', '28px'));
      tr.append($('<td/>').append(div1).append(div2));
      div1 = $('<div/>').append($('<span/>', {
        'html': 'оплачен:',
        'class': 'span-greyText',
        css: {
          'paddingRight': '5px'
        }
      })).append(this.head.r_percent = $('<span/>', {
        'html': round_percent(InvoiceRowData.percent_payment)
      })).append('%');
      div2 = $('<div/>').append($('<span/>', {
        'html': 'условия:',
        'class': 'span-greyText',
        css: {
          'paddingRight': '5px'
        }
      })).append(this.head.conditions = $('<span/>', {
        'html': InvoiceRowData.conditions + '% - ' + (100 - Number(InvoiceRowData.conditions)) + '%'
      }));
      tr.append($('<td/>').append(div1).append(div2));
      if (Number(InvoiceRowData.conditions) > Number(InvoiceRowData.percent_payment)) {
        div2.addClass('warning');
      }
      if (Number(InvoiceRowData.percent_payment) < 100) {
        div1.addClass('warning');
      }
      table.append(tr);

      /*
       * добавляем всё в контейнер и возвращаем
       */
      return head_info.append(table);
    };

    paymentWindow.prototype.createRow = function(InvoiceRowData, responseData) {
      var _this;
      _this = this;
      return new sendAjax('create_payment', {
        'id': InvoiceRowData.id
      }, function(response) {
        var len;
        len = responseData.length;
        responseData[len] = new paymentRowObj(response.data);
        return $(_this.$el).find('#js--payment-window--body_info-table').append(new paymentRow(responseData, len, _this.access, _this, InvoiceRowData));
      });
    };

    paymentWindow.prototype.updateHeaderPercent = function(InvoiceRowData) {
      var _this, recalcInvoice, send;
      _this = this;
      recalcInvoice = this.recalcInvoice();
      send = {};
      send.percent_payment = recalcInvoice.percent_payment;
      send.price_out_payment = recalcInvoice.price_out_payment;
      InvoiceRowData.percent_payment = send.percent_payment;
      _this.options.percent_payment = send.percent_payment;
      InvoiceRowData.price_out_payment = send.price_out_payment;
      _this.options.price_out_payment = send.price_out_payment;
      if (send !== void 0) {
        send.id = this.options.id;
        this.updateHead(InvoiceRowData);
        return new sendAjax('save_percent_from_invoice', send, function() {
          return $('#js-main-invoice-table').invoice('reflesh', InvoiceRowData);
        });
      }
    };

    paymentWindow.prototype.recalcInvoice = function() {
      var percent_payment, price_out_payment;
      console.log('updateHeaderPercent');
      percent_payment = 0;
      price_out_payment = 0;
      this.bodyRows.find('tr').each(function(index) {
        var data;
        if (!$(this).hasClass('deleted') && index > 0) {
          data = $(this).data();
          console.log(data);
          if (data.percent !== void 0) {
            percent_payment += Number(data.percent);
          }
          if (data.price !== void 0) {
            return price_out_payment += Number(data.price);
          }
        }
      });
      return {
        percent_payment: percent_payment,
        price_out_payment: price_out_payment
      };
    };

    paymentWindow.prototype.getButtons = function(InvoiceRowData, responseData) {
      var _this, buttons, className;
      _this = this;
      this.saveObj = {};
      buttons = [];
      if (this.access === 2 && Number(InvoiceRowData.id) > 0) {
        buttons.push({
          text: 'Добавить платеж',
          "class": 'button_yes_or_no yes add_payment_button',
          click: function() {
            console.warn(InvoiceRowData);
            return _this.createRow(InvoiceRowData, responseData);
          }
        });
      }
      if (_this.countDelRow > 0) {
        className = 'button_yes_or_no no show_del_payment_button lightGreen';
      } else {
        className = 'button_yes_or_no no show_del_payment_button';
      }
      buttons.push({
        text: 'Показать удалённые(' + _this.countDelRow + ')',
        "class": className,
        id: 'js--how_del_payment_button',
        data: {
          num: _this.countDelRow
        },
        click: function() {
          if (Number($(this).data('num')) > 0) {
            if ($(this).hasClass('no')) {
              $(this).removeClass('no').html('Скрыть удалённые (' + $(this).data('num') + ')');
            } else {
              $(this).addClass('no').html('Показать удалённые (' + $(this).data('num') + ')');
              if (Number($(this).data('num') > 0)) {
                $(this).addClass('lightGreen');
              }
            }
          }
          return _this.updatePaymenContent($(this), responseData, InvoiceRowData);
        }
      });
      buttons.push({
        text: 'Закрыть',
        "class": 'button_yes_or_no yes',
        click: function() {
          return _this.destroy();
        }
      });
      return buttons;
    };

    paymentWindow.prototype.editSaveObj = function(key, value, old_value) {
      if (old_value === value) {
        delete this.saveObj[key];
        this.saveObj[key] = void 0;
      } else {
        this.saveObj[key] = value;
      }
    };

    paymentWindow.prototype.destroy = function() {
      return $(this.$el).parent().dialog('close').dialog('destroy').remove();
    };

    return paymentWindow;

  })();


  /*
   * прототип объекта ТТН
   */

  ttnObj = (function() {
    ttnObj.prototype.defaults = {
      buch_id: 0,
      buch_name: 0,
      comments: '',
      date: "00.00.0000",
      date_return: null,
      delivery: "",
      id: 0,
      invoice_id: 0,
      number: 0,
      position_id: 0,
      positions_num: 0,
      "return": 0
    };

    ttnObj.prototype.options = {};

    function ttnObj(data) {
      var el, key;
      if (data == null) {
        data = {};
      }
      for (key in data) {
        el = data[key];
        this.options[key] = el;
      }
      return $.extend({}, this.defaults, this.options);
    }

    return ttnObj;

  })();


  /*
   * прототип окна ТТН
   */

  ttnWindow = (function() {
    ttnWindow.prototype.checkNumber = 0;

    ttnWindow.prototype.saveObj = {};

    ttnWindow.prototype.defaults1 = {
      id: 0,
      number: '0000',
      type: "new"
    };

    function ttnWindow(obj, InvoiceRowData, data, accces, ttn) {
      if (ttn !== null) {
        this.defaults = $.extend({}, this.defaults1, ttn);
        if (this.defaults.number === null) {
          this.defaults.number = '0000';
        }
        if ($.urlVar('page') === "sklad") {
          if (ttn.ttn_build !== void 0) {
            this.defaults.build = ttn.ttn_build;
          }
          if (ttn.ttn_date !== void 0) {
            this.defaults.date = ttn.ttn_date;
          }
          if (this.defaults.ttn_id !== void 0) {
            this.defaults.id = ttn.ttn_id;
          }
          if (ttn.ttn_query !== void 0) {
            this.defaults.query = ttn.ttn_query;
          }
          true;
        }
      } else {
        ttn = {};
      }
      console.warn(ttn);
      this.access = accces;
      this.options = InvoiceRowData;
      this.init(obj, InvoiceRowData, data, accces, ttn);
    }

    ttnWindow.prototype.init = function(obj, InvoiceRowData, responseData, accces, ttn) {
      var _this, main_div;
      _this = this;
      if (responseData !== void 0) {

        /*
         * создание контейнера
         */
        main_div = $('<div/>');

        /*
         * добавляем таблицу
         */
        main_div.append(this.contentTbl = this.createTable(responseData, ttn, InvoiceRowData));

        /*
         * добавление шапки окна
         */
        main_div.prepend(this.createHead(ttn));

        /*
         * вычисляем title окна
         */
        this.title = 'УПД';
        if (ttn !== void 0 && ttn.number !== void 0 && (Number(ttn.number) > 0 || ttn.number !== '0')) {
          this.title += ' № ' + ttn.number;
        } else if (ttn !== void 0 && this.access === 5) {
          this.title += ' запрошен';
        } else {
          this.title = 'Запрос ' + this.title;
        }

        /*
         * выбор способа доставки
         */
        if (this.access === 5 && this.checkNumber > 0 && ttn === void 0) {
          main_div.append(this.createDeliveryChoose());
        }

        /*
         * ранее созданные упд
         */
        main_div.append(this.alreadyWasСreated());

        /*
         * создание окна
         */
        this.myObj = new modalWindow({
          html: main_div,
          width: '1000px',
          maxHeight: '100%',
          height: $(window).height() - 60,
          title: this.title,
          buttons: this.getButtons(obj, InvoiceRowData, ttn)
        }, {
          closeOnEscape: true
        });
        return this.$el = this.myObj.options.html[0];
      }
    };

    ttnWindow.prototype.editSaveObj = function(key, value, old_value) {
      if (old_value === value) {
        delete this.saveObj[key];
        this.saveObj[key] = void 0;
      } else {
        this.saveObj[key] = value;
      }
    };

    ttnWindow.prototype.alreadyWasСreated = function() {
      var content, j, len1, oldTtn, ref, results, tbl;
      console.log("предыдущие ттн ---Ю");
      content = $('<div/>', {
        'class': "ttn--already-was-created"
      });
      if (this.options.ttn && this.options.ttn.length > 0) {
        content.append($('<div/>', {
          'class': 'ttn--already-was-created--head',
          'html': 'Ранее оформленные ТТН:'
        }));
        content.append(tbl = $('<table/>', {
          'id': 'ttn--already-was-created--old-ttn-tbl'
        }));
        ref = this.options.ttn;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          oldTtn = ref[j];
          results.push(tbl.prepend(this.createTtnDiv(oldTtn)));
        }
        return results;
      }
    };

    ttnWindow.prototype.createTtnDiv = function(oldTtn) {
      var date_shipment_td, delivery, end, number, positions, self, tr;
      self = this;
      tr = $('<tr/>');
      if (oldTtn.positions_num !== null) {
        if (oldTtn.positions_num.split(',').length > 1) {
          end = 'и ';
        } else {
          end = 'я ';
        }
        positions = ' позици' + end;
        positions = positions + oldTtn.positions_num;
      } else {
        positions = '';
      }
      number = oldTtn.number;
      if (oldTtn.number === null || oldTtn.number === void 0) {
        number = '<b>не выставлен</b>';
      }
      tr.append($('<td/>', {
        'html': '№' + number
      }));
      tr.append($('<td/>', {
        'html': ' от ' + oldTtn.date
      }));
      tr.append($('<td/>', {
        'html': positions
      }));
      if (oldTtn.delivery === 'our_delivery') {
        delivery = 'Доставка';
      } else {
        delivery = 'Самовывоз';
      }
      tr.append($('<td/>', {
        'html': delivery,
        'class': oldTtn.delivery
      }));
      tr.append(date_shipment_td = $('<td/>', {
        'html': oldTtn.date_shipment
      }));
      if (this.access === 1 || this.access === 5) {
        tr.addClass('editDate');
        tr.click(function() {
          var content, date_shipment, wDate;
          content = $('<div/>').append($('<div/>', {
            'html': 'Укажите приблизительную дату отгрузки/доставки'
          })).append($('<div/>', {
            'css': {
              'padding': '5px',
              'margin': '10px 0 0 0'
            }
          }).append(date_shipment = $('<input/>', {
            'val': getDateNow(),
            'css': {
              'padding': '5px'
            }
          })));
          date_shipment.datetimepicker({
            minDate: new Date(),
            timepicker: false,
            dayOfWeekStart: 1,
            onSelectDate: function(ct, $i) {
              return $i.blur();
            },
            onGenerate: function(ct) {
              $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
              return $(this).find('.xdsoft_date');
            },
            closeOnDateSelect: true,
            format: 'd.m.Y'
          }).blur();
          return wDate = new modalWindow({
            html: content,
            title: 'Укажите дату',
            buttons: [
              {
                text: 'Отмена',
                "class": 'button_yes_or_no no',
                click: function() {
                  return $(wDate.winDiv).dialog('close').dialog('destroy').remove();
                }
              }, {
                text: 'OK',
                "class": 'button_yes_or_no yes',
                click: function() {
                  $(wDate.winDiv).dialog('close').dialog('destroy').remove();
                  return new sendAjax('edit_date_shipment_ttn', {
                    id: oldTtn.id,
                    date_shipment: date_shipment.val()
                  }, function(response) {
                    oldTtn.date_shipment = date_shipment.val();
                    return tr.replaceWith(self.createTtnDiv(oldTtn));
                  });
                }
              }
            ]
          }, {
            single: false
          });
        });
      }
      return tr;
    };


    /*
     * выбор способа доставки
     */

    ttnWindow.prototype.createDeliveryChoose = function() {
      var car_div, div_car_body, li_clic, ul;
      car_div = $('<div/>', {
        id: 'ttn_car_div'
      });
      car_div.append($('<div/>', {
        'html': 'Доставка выбранных позиций',
        'class': 'ttn_car_div-head'
      }));
      li_clic = function(event) {
        $(this).parent().find('li').removeClass('checked');
        return $(this).addClass('checked');
      };
      ul = $('<ul/>').append($('<li/>', {
        click: li_clic
      }).append($('<div/>', {
        'class': 'ttn-our_delivery'
      })).append($('<div/>', {
        'class': 'ttn-delivery-text',
        'html': 'Доставка'
      }))).append($('<li/>', {
        click: li_clic
      }).append($('<div/>', {
        'class': 'ttn-no_delivery'
      })).append($('<div/>', {
        'class': 'ttn-delivery-text',
        'html': 'Самовывоз'
      })));
      div_car_body = $('<div/>', {
        'class': 'ttn_car_div-body'
      }).append(ul);
      return car_div.append(div_car_body);
    };

    ttnWindow.prototype.spanDate = function(val) {
      var self;
      if (val == null) {
        val = getDateNow();
      }
      self = this;
      return $('<span/>', {
        'class': 'dateInput',
        'html': val,
        click: function() {
          var input;
          val = $(this).html();
          input = self.inputDate(val);
          $(this).replaceWith(input);
          self.newTtnDate = val;
          return setTimeout(input.focus(), 500);
        }
      });
    };

    ttnWindow.prototype.spanInput = function(val) {
      var self;
      if (val == null) {
        val = "&nbsp;";
      }
      self = this;
      return $('<span/>', {
        'class': 'spanInput',
        'html': val,
        click: function() {
          var input;
          val = $(this).html();
          input = self.inputSpan(val);
          $(this).replaceWith(input);
          return setTimeout(input.focus(), 500);
        }
      });
    };

    ttnWindow.prototype.inputSpan = function(val) {
      var self;
      self = this;
      return $('<input/>', {
        val: val,
        blur: function() {
          val = $(this).val();
          return $(this).replaceWith(self.spanInput(val));
        }
      });
    };

    ttnWindow.prototype.inputDate = function(val) {
      var self;
      self = this;
      return $('<input/>', {
        val: val,
        blur: function() {
          val = $(this).val();
          self.newTtnDate = val;
          return $(this).replaceWith(self.spanDate(val));
        }
      }).datetimepicker({
        timepicker: false,
        dayOfWeekStart: 1,
        onSelectDate: function(ct, $i) {
          return $i.blur();
        },
        onGenerate: function(ct) {
          $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
          return $(this).find('.xdsoft_date');
        },
        closeOnDateSelect: true,
        format: 'd.m.Y'
      });
    };

    ttnWindow.prototype.createHeadAdmin = function(ttn) {
      var head_info, input, input_date, self, span_invoice, table, td, tr;
      self = this;

      /*
       * контейнер шапки окна ТТН
       */
      head_info = $('<div>', {
        id: 'ttn_head_info'
      });

      /*
       * сборка таблицы с общей информации по ТТН
       */
      table = $('<table>', {
        id: 'ttn_head_info-table'
      });

      /*
       * строка с информацией по клиенту
       */
      tr = $('<tr/>');
      tr.append($('<td/>', {
        'html': this.options.client_name,
        'class': 'ttn_client_name'
      }));
      tr.append($('<td/>', {
        'html': this.options.client_requisit_name,
        'class': 'ttn_requisits',
        click: function() {
          return new sendAjax('show_requesit', {
            'id': self.options.client_requisit_id
          }, function(response) {
            return new modalWindow({
              html: new requesitContent(response.data),
              maxHeight: '100%',
              width: '650px',
              title: 'Реквизиты'
            }, {
              closeOnEscape: true,
              single: false
            });
          });
        }
      }));
      table.append(tr);

      /*
       * если номер к данной ТТН не назначен - выводим строку
       * с формой назначения номера ТТН и даты от которой эта ТТН выставлена
       */
      span_invoice = $('<span/>', {
        'html': "№ счёта " + this.options.invoice_num + " от " + this.options.invoice_create_date
      });
      td = $('<td/>', {
        'colspan': '2'
      });
      if (Number(self.defaults.number) === 0) {
        input = $('<input/>', {
          'val': self.defaults.number,
          'data-val': self.defaults.number,
          'class': 'ttn_number_input',
          focus: function() {
            if (Number($(this).val()) === 0) {
              $(this).val('');
            }
          },
          blur: function() {
            if (Number($(this).val()) === 0) {
              $(this).val($(this).attr('data-val'));
            }
          },
          keyup: function() {
            if (Number($(this).val()) > 0 || ($(this).val() !== '0' && $(this).val() !== '')) {
              $(self.myObj.buttonDiv).find('#create_ttn_button').removeClass('no');
            } else {
              $(self.myObj.buttonDiv).find('#create_ttn_button').addClass('no');
            }
            return self.editSaveObj('number', $(this).val(), self.defaults.number);
          }
        });
        input_date = $('<input/>', {
          'val': self.defaults.date,
          'class': '',
          blur: function() {
            return self.editSaveObj('date', $(this).val(), self.defaults.date);
          }
        }).datetimepicker({
          minDate: new Date(),
          timepicker: false,
          dayOfWeekStart: 1,
          onSelectDate: function(ct, $i) {
            return $i.blur();
          },
          onGenerate: function(ct) {
            $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
            return $(this).find('.xdsoft_date');
          },
          closeOnDateSelect: true,
          format: 'd.m.Y'
        });
        td.append('№ ТТН ').append($('<span/>').append(input));
        td.append($('<span/>').append(input_date));
      }
      td.append($('<span/>', {
        'html': "№ УПД " + ttn.number + " от "
      }).append(ttn.date)).append(span_invoice);
      tr = $('<tr/>').append(td);
      table.append(tr);

      /*
       * добавляем всё в контейнер и возвращаем
       */
      return head_info.append(table);
    };

    ttnWindow.prototype.createHeadManager = function(ttn) {
      var self, span_invoice, span_ttn, table, tr;
      self = this;
      if (ttn === void 0) {
        span_ttn = $('<span/>', {
          'html': "№ УПД " + this.defaults.number + " от "
        }).append(this.spanDate());
      } else {
        console.warn(ttn);
        span_ttn = $('<span/>', {
          'html': "№ УПД " + ttn.number + " от "
        }).append(ttn.date);
      }
      span_invoice = $('<span/>', {
        'html': "№ счёта " + this.options.invoice_num + " от " + this.options.invoice_create_date
      });
      table = $('<table>', {
        id: 'ttn_head_info-table'
      });
      table.append(tr = $('<tr/>'));
      tr.append($('<td/>', {
        'html': this.options.client_name,
        'class': 'ttn_client_name'
      }));
      tr.append($('<td/>', {
        'html': this.options.client_requisit_name,
        'class': 'ttn_requisits',
        click: function() {
          return new sendAjax('show_requesit', {
            'id': self.options.client_requisit_id
          }, function(response) {
            return new modalWindow({
              html: new requesitContent(response.data),
              maxHeight: '100%',
              width: '650px',
              title: 'Реквизиты'
            }, {
              closeOnEscape: true,
              single: false
            });
          });
        }
      }));
      table.append(tr = $('<tr/>'));
      tr.append($('<td/>', {
        'colspan': '2'
      }).append(span_ttn).append(span_invoice));
      return $('<div>', {
        id: 'ttn_head_info'
      }).append(table);
    };

    ttnWindow.prototype.createHead = function(ttn) {
      switch (this.access) {
        case 1:
          return this.createHeadAdmin(ttn);
        case 2:
          return this.createHeadAdmin(ttn);
        default:
          return this.createHeadManager(ttn);
      }
    };

    ttnWindow.prototype.getFirstTdCheck = function(position, ttn) {
      var check, self, td;
      self = this;
      console.log(ttn);
      if (Number(position.ttn_id) === 0 && Number(position.not_shipped) === 0 && ttn === void 0) {
        this.checkNumber++;
        check = $('<input/>', {
          'type': 'checkbox',
          change: function(event) {
            event.preventDefault();
            event.stopPropagation();
            if ($(this).prop('checked')) {
              $(this).prop('checked', false);
              $(this).parent().removeClass('checked');
            } else {
              $(this).prop('checked', true);
              $(this).parent().addClass('checked');
            }
            return self.checkMainCheckbox();
          }
        });
        td = $('<td/>', {
          click: function() {
            var input;
            input = $(this).find('input');
            if (input.prop('checked')) {
              input.prop('checked', false);
              td.removeClass('checked');
            } else {
              input.prop('checked', true);
              td.addClass('checked');
            }
            return self.checkMainCheckbox();
          }
        });
        td.append(check);
      } else {
        td = $('<td/>');
      }
      return td;
    };

    ttnWindow.prototype.tblAdminRow = function(position, ttn) {
      var arr, che, j, len1, n, pr_out, self, td, tr;
      self = this;
      tr = $('<tr/>').data(position).attr('data-id', position.id);
      tr.append(td = $('<td/>'));
      if (this.access !== 7) {
        if (Number(self.defaults.id) === Number(position.ttn_id)) {
          tr.addClass('buh_style');
        } else {

        }
      } else {
        arr = self.defaults.positions_num.split(',');
        che = false;
        for (j = 0, len1 = arr.length; j < len1; j++) {
          n = arr[j];
          if (Number(n) === position.num) {
            che = true;
          }
        }
        if (che) {
          tr.addClass('checked buh_style thisTtn');
        }
      }
      td = $('<td/>').append(position.num);
      tr.append(td);
      td = $('<td/>').append(position.name);
      tr.append(td);
      td = $('<td/>').append(position.quantity);
      tr.append(td);
      pr_out = calc_price_with_discount(position.price, position.discount);
      td = $('<td/>').append(round_money(pr_out) + ' р.');
      tr.append(td);
      this.main_price += pr_out * position.quantity;
      this.nds += Number(round_money(pr_out * position.quantity / 118 * 18));
      td = $('<td/>').append(round_money(pr_out * position.quantity) + ' р.');
      return tr.append(td);
    };

    ttnWindow.prototype.tblManRow = function(position, ttn) {
      var pr_out, self, td, td_name, tr;
      self = this;
      tr = $('<tr/>').data(position).attr('data-id', position.id);
      if (Number(position.not_shipped) > 0) {
        tr.addClass('not_shipped');
      } else if (Number(position.ttn_id) > 0) {
        tr.addClass('ttn_created');
      }
      console.info(ttn);
      tr.append(td = this.getFirstTdCheck(position, ttn));
      tr.append($('<td/>', {
        'html': position.num
      }));
      tr.append(td_name = $('<td/>').append(position.name));
      tr.append($('<td/>').append(position.quantity));
      pr_out = calc_price_with_discount(position.price, position.discount);
      tr.append($('<td/>').append(round_money(pr_out) + ' р.'));
      if (position.quantity === 0) {
        position.quantity = 1;
      }
      this.main_price += pr_out * position.quantity;
      this.nds += Number(round_money(pr_out * position.quantity / 118 * 18));
      return tr.append($('<td/>').append(round_money(pr_out * position.quantity) + ' р.'));
    };

    ttnWindow.prototype.createTableManager = function(responseData, ttn) {
      var _this, i, j, len1, main_checkbox, position, table, td, td_main_check, tr;
      _this = this;
      table = $('<table/>', {
        'id': 'js-invoice--window--ttn-table',
        'class': 'managerStyle'
      });
      table.append(tr = $('<tr/>'));
      main_checkbox = $('<input/>', {
        'type': 'checkbox',
        change: function(event) {
          var input, td;
          input = $(this);
          td = $(this).parent();
          return _this.clickMainCheckbox(table, td, input);
        }
      });
      td_main_check = $('<th/>', {
        click: function() {
          var input, td;
          input = $(this).find('input');
          td = $(this);
          return _this.clickMainCheckbox(table, td, input);
        }
      });
      tr.append(td_main_check);
      td = $('<th/>', {
        'text': '№'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': 'Наименование и <br>описание продукции'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': 'Количество<br>продукции'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': 'стоимость<br>за штуку'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': 'Общая<br>стоимость'
      });
      tr.append(td);
      this.main_price = 0;
      this.nds = 0;
      this.posNum = 1;
      console.log('до создания таблицы строк  -> ', ttn);
      this.checkNumber = 0;
      for (i = j = 0, len1 = responseData.length; j < len1; i = ++j) {
        position = responseData[i];
        responseData[i].num = this.posNum++;
        table.append(this.tblManRow(responseData[i], ttn));
      }
      if (this.checkNumber > 0) {
        td_main_check.append(main_checkbox);
      } else {
        td_main_check.width('20px');
      }
      table.append(tr = $('<tr/>'));
      td = $('<th/>');
      tr.append(td);
      td = $('<th/>', {
        'colspan': '4',
        'html': 'Итоговая сумма по данной спецификации (договору)'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': round_money(this.main_price) + ' р.'
      });
      tr.append(td);
      table.append(tr);
      table.append(tr = $('<tr/>'));
      td = $('<th/>');
      tr.append(td);
      td = $('<th/>', {
        'colspan': 4,
        'html': 'В т.ч. НДС 18%'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': round_money(this.nds) + ' р.'
      });
      tr.append(td);
      return table.append(tr);
    };

    ttnWindow.prototype.createTableAdmin = function(responseData, ttn) {
      var _this, i, j, len1, position, table, td, tr;
      _this = this;
      table = $('<table/>', {
        'id': 'js-invoice--window--ttn-table',
        'class': 'adminStyle'
      });
      table.append(tr = $('<tr/>'));
      tr.append($('<th/>').width('20px'));
      td = $('<th/>', {
        'text': '№'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': 'Наименование и <br>описание продукции'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': 'Количество<br>продукции'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': 'стоимость<br>за штуку'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': 'Общая<br>стоимость'
      });
      tr.append(td);
      this.main_price = 0;
      this.nds = 0;
      this.posNum = 1;
      for (i = j = 0, len1 = responseData.length; j < len1; i = ++j) {
        position = responseData[i];
        responseData[i].num = this.posNum++;
        table.append(this.tblAdminRow(responseData[i], ttn));
      }
      table.append(tr = $('<tr/>'));
      td = $('<th/>');
      tr.append(td);
      td = $('<th/>', {
        'colspan': '4',
        'html': 'Итоговая сумма по данной спецификации (договору)'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': round_money(this.main_price) + ' р.'
      });
      tr.append(td);
      table.append(tr);
      table.append(tr = $('<tr/>'));
      td = $('<th/>');
      tr.append(td);
      td = $('<th/>', {
        'colspan': '4',
        'html': 'В т.ч. НДС 18%'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': round_money(this.nds) + ' р.'
      });
      tr.append(td);
      table.append(tr);
      return table;
    };

    ttnWindow.prototype.createTable = function(responseData, ttn, InvoiceRowData) {
      if (ttn !== void 0) {
        return this.createTableAdmin(responseData, ttn);
      }
      switch (this.access) {
        case 1:
          return this.createTableAdmin(responseData, ttn);
        case 7:
          return this.createTableAdmin(responseData, ttn);
        case 2:
          return this.createTableAdmin(responseData, ttn);
        default:
          return this.createTableManager(responseData, ttn, InvoiceRowData);
      }
    };

    ttnWindow.prototype.clickMainCheckbox = function(table, td, input) {
      if (input.prop('checked') || !input.prop('checked') && input.hasClass('checked_no_full')) {
        input.prop('checked', false).removeClass('checked_no_full');
        td.removeClass('checked');
        return table.find('td input').each(function(index, el) {
          return $(this).prop('checked', false).parent().removeClass('checked');
        });
      } else {
        input.prop('checked', true);
        td.addClass('checked');
        return table.find('td input').each(function(index, el) {
          return $(this).prop('checked', true).parent().addClass('checked');
        });
      }
    };

    ttnWindow.prototype.checkMainCheckbox = function() {
      var main_check;
      main_check = this.contentTbl.find('th input');
      if (this.contentTbl.find('td input:checked').length === this.contentTbl.find('td input').length) {
        main_check.prop('checked', true).removeClass('checked_no_full');
        return main_check.parent().addClass('checked');
      } else if (this.contentTbl.find('td input:checked').length > 0) {
        main_check.prop('checked', false).addClass('checked_no_full');
        return main_check.parent().addClass('checked');
      } else {
        main_check.prop('checked', false).removeClass('checked_no_full');
        return main_check.parent().removeClass('checked');
      }
    };

    ttnWindow.prototype.queryNewTtn = function(obj, InvoiceRowData, _this) {
      var content, date_formate, date_shipment, delivery, options, position_numbers, self, ship_date, wDate;
      self = this;
      console.log(this.newTtnDate);
      options = [];
      position_numbers = [];
      $(this.$el).find('table td input').each(function(index, el) {
        if ($(this).prop('checked')) {
          position_numbers.push($(this).parent().next().html());
          options.push($(this).parent().parent().data().id);
        }
      });
      if (options.length === 0) {
        echo_message_js('Вы не выбрали ни одной позиции.', 'error_message');
        return false;
      }
      delivery = [];
      $(this.$el).find('#ttn_car_div .ttn_car_div-body li').each(function(index, el) {
        if ($(this).hasClass('checked')) {
          return delivery.push($(this).find('div').eq(0).attr('class').split('-')[1]);
        }
      });
      if (delivery.length === 0) {
        echo_message_js('Выберите способ доставки выбранных позиций.', 'error_message');
        return false;
      }
      self.newTtnDate = getDateNow();
      date_formate = function(myDate) {
        var newDate;
        myDate = myDate.split(".");
        newDate = myDate[1] + "/" + myDate[0] + "/" + myDate[2];
        return new Date(newDate).getTime();
      };
      if (date_formate(self.newTtnDate) < date_formate(getDateNow())) {
        ship_date = getDateNow();
      }
      content = $('<div/>').append($('<div/>', {
        'html': 'Укажите приблизительную дату отгрузки/доставки'
      })).append($('<div/>', {
        'css': {
          'padding': '5px',
          'margin': '10px 0 0 0'
        }
      }).append(date_shipment = $('<input/>', {
        'val': self.newTtnDate,
        'css': {
          'padding': '5px'
        }
      })));
      date_shipment.datetimepicker({
        minDate: new Date(),
        timepicker: false,
        dayOfWeekStart: 1,
        onSelectDate: function(ct, $i) {
          return $i.blur();
        },
        onGenerate: function(ct) {
          $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
          return $(this).find('.xdsoft_date');
        },
        closeOnDateSelect: true,
        format: 'd.m.Y'
      }).blur();
      return wDate = new modalWindow({
        html: content,
        title: 'Укажите дату',
        buttons: [
          {
            text: 'Отмена',
            "class": 'button_yes_or_no no',
            click: function() {
              return $(wDate.winDiv).dialog('close').dialog('destroy').remove();
            }
          }, {
            text: 'OK',
            "class": 'button_yes_or_no yes',
            click: function() {
              var positions_in_ttn;
              $(wDate.winDiv).dialog('close').dialog('destroy').remove();
              positions_in_ttn = Number(InvoiceRowData.positions_in_ttn) + Number(options.length);
              return new sendAjax('create_new_ttn', {
                invoise_id: self.options.id,
                positions_in_ttn: positions_in_ttn,
                positions: options.join(', '),
                position_numbers: position_numbers.join(', '),
                date_shipment: date_shipment.val(),
                date: self.newTtnDate,
                delivery: delivery.join('')
              }, function(response) {
                self.destroy();
                if (response.data) {
                  InvoiceRowData.ttn[InvoiceRowData.ttn.length] = new ttnObj(response.data);
                  InvoiceRowData.positions_in_ttn = positions_in_ttn;
                  $('#js-main-invoice-table').invoice('reflesh', InvoiceRowData);
                }
                if (delivery.join('') === 'our_delivery') {
                  return new modalConfirm({
                    html: 'Открыть карту курьера в новой вкладке?'
                  }, function() {
                    return window.open(window.location.origin + '/dostavka_new/dostavka_podrobno.php?date=' + date_shipment.val(), '_blank');
                  });
                }
              });
            }
          }
        ]
      }, {
        single: false
      });
    };

    ttnWindow.prototype.destroy = function() {
      return $(this.$el).parent().dialog('close').dialog('destroy').remove();
    };

    ttnWindow.prototype.confirmAndCreateTtn = function(obj, InvoiceRowData) {
      var _this, el, j, key, l, len1, ref, ref1, row_id;
      _this = this;
      row_id = this.options.id;
      if (this.saveObj.number) {
        this.saveObj.id = this.defaults.id;
        ref = InvoiceRowData.ttn;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          el = ref[j];
          if (el.id === this.defaults.id) {
            ref1 = this.saveObj;
            for (key in ref1) {
              l = ref1[key];
              el[key] = l;
            }
          }
        }
        $('#js-main-invoice-table').invoice('reflesh', InvoiceRowData.id);
        this.saveObj.invoice_id = InvoiceRowData.id;
        this.saveObj.manager_name = InvoiceRowData.manager_name;
        this.saveObj.manager_id = InvoiceRowData.manager_id;
        this.saveObj.client_name = InvoiceRowData.client_name;
        this.saveObj.client_id = InvoiceRowData.client_id;
        this.saveObj.invoice_num = InvoiceRowData.invoice_num;
        return new sendAjax('confirm_create_ttn', this.saveObj, function() {
          return _this.destroy();
        });
      } else {
        return echo_message_js('Для создания ттн необходимо ввести её номер', 'error_message');
      }
    };

    ttnWindow.prototype.getButtons = function(obj, InvoiceRowData, ttn) {
      var _this, buttons, firstButton;
      _this = this;
      this.saveObj = {};
      buttons = [];
      firstButton = {
        text: 'Отмена',
        "class": 'button_yes_or_no no',
        click: function() {
          return _this.destroy();
        }
      };
      buttons.push(firstButton);
      if (this.access === 2 || this.access === 1) {
        if (Number(this.defaults.number) !== void 0 && Number(this.defaults.number) === 0) {
          buttons.push({
            text: 'Создать',
            "class": 'button_yes_or_no no',
            id: 'create_ttn_button',
            click: function() {
              return _this.confirmAndCreateTtn(obj, InvoiceRowData);
            }
          });
        }
      } else {
        if (this.checkNumber > 0) {
          if (this.access === 5 && ttn === void 0) {
            buttons.push({
              text: 'Запросить',
              "class": 'button_yes_or_no',
              click: function() {
                return _this.queryNewTtn(obj, InvoiceRowData);
              }
            });
          }
        }
      }
      return buttons;
    };

    return ttnWindow;

  })();


  /*
   * прототип окна счёта
   * некоторые пользователи емеют право редактировать номер счёта и дату
   */

  invoiceWindow = (function() {
    invoiceWindow.prototype.saveObj = {};

    invoiceWindow.prototype.posNum = 1;

    invoiceWindow.prototype.defaults = {
      id: 0,
      number: '0000',
      type: "new"
    };

    function invoiceWindow(obj, InvoiceRowData, data, accces) {
      this.access = accces;
      this.options = InvoiceRowData;
      this.init(obj, InvoiceRowData, data, accces);
    }

    invoiceWindow.prototype.init = function(obj, InvoiceRowData, responseData, accces) {

      /*
       * создание контейнера
       */
      var main_div;
      main_div = $('<div/>');

      /*
       * создание окна
       */
      this.myObj = new modalWindow({
        html: main_div,
        width: '1000px',
        maxHeight: '100%',
        height: $(window).height() - 60,
        title: 'Счёт',
        buttons: this.getBillButtons(obj, InvoiceRowData)
      }, {
        closeOnEscape: true
      });
      this.$el = this.myObj.options.html[0];

      /*
       * добавляем таблицу
       */
      main_div.append(this.createTable(responseData));

      /*
       * добавление шапки окна
       */
      return main_div.prepend(this.createHead(InvoiceRowData));
    };

    invoiceWindow.prototype.createTable = function(responseData) {
      var _this, border, i, j, len1, main_price, nds, position, pr_out, table, td, tr;
      _this = this;
      table = $('<table/>', {
        'id': 'js-invoice--window--ttn-table'
      });
      table.append(tr = $('<tr/>'));
      td = $('<th/>', {
        'text': '№'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': 'Наименование и <br>описание продукции'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': 'Количество<br>продукции'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': 'стоимость<br>за штуку'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': 'Общая<br>стоимость'
      });
      tr.append(td);
      main_price = 0;
      nds = 0;
      i = 1;
      this.checkNumber = 0;
      for (j = 0, len1 = responseData.length; j < len1; j++) {
        position = responseData[j];
        tr = $('<tr/>').data(position).attr('data-id', position.id);
        td = $('<td/>');
        td = $('<td/>').append(i);
        tr.append(td);
        border = '1px solid green';
        td = _this.createTS_copyContent(position, 'name', table);
        tr.append(td);
        td = _this.createTS_copyContent(position, 'quantity', table);
        tr.append(td);
        pr_out = calc_price_with_discount(position.price, position.discount);
        position.pr_out = round_money(pr_out) + ' р.';
        td = _this.createTS_copyContent(position, 'pr_out', table);
        tr.append(td);
        if (position.quantity === 0) {
          position.quantity = 1;
        }
        main_price += pr_out * position.quantity;
        console.warn(" --- 1 >>> ", Number(pr_out * position.quantity), main_price);
        nds += Number(round_money(pr_out * position.quantity / 118 * 18));
        position.main_price = round_money(pr_out * position.quantity) + ' р.';
        td = _this.createTS_copyContent(position, 'main_price', table);
        tr.append(td);
        i++;
        table.append(tr);
      }
      table.append(tr = $('<tr/>'));
      td = $('<th/>');
      td = $('<th/>', {
        'colspan': '4',
        'html': 'Итоговая сумма по данной спецификации (договору)'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': round_money(main_price) + ' р.'
      });
      tr.append(td);
      table.append(tr);
      table.append(tr = $('<tr/>'));
      td = $('<th/>');
      td = $('<th/>', {
        'colspan': '4',
        'html': 'В т.ч. НДС 18%'
      });
      tr.append(td);
      td = $('<th/>', {
        'html': round_money(nds) + ' р.'
      });
      tr.append(td);
      table.append(tr);
      return table;
    };


    /*
     * возвращает <td> с textarea и кнопкой копировать,
     * изменения в поле textarea не редактируют информацию,
     * textarea служит только для того, чтобы программно скопировать информацию из его тела
     */

    invoiceWindow.prototype.createTS_copyContent = function(position, key, table) {
      var _this, td;
      _this = this;
      td = $('<td/>', {
        'class': 'myyClass1',
        on: {
          click: function() {
            var div, name, textarea;
            _this.updateTableTextarea($(this).parent().parent());
            $(this).css('padding', '0').html(textarea);
            name = $(this).data().val;
            textarea = $('<textarea/>', {
              'val': name,
              'click': function(event) {
                event.preventDefault();
                event.stopPropagation();
                return false;
              }
            });
            $(this).html(textarea).focus();
            div = $('<div/>', {
              'class': 'myBlockBefore',
              'html': 'Копировать',
              click: function(event) {
                var error, msg, successful;
                $(this).parent().find('textarea').select();
                try {
                  successful = document.execCommand('copy');
                  msg = successful != null ? successful : {
                    'successful': 'unsuccessful'
                  };
                  return console.log('Copy email command was ' + msg);
                } catch (_error) {
                  error = _error;
                  return console.log(error);
                }
              }
            }).css({
              'marginLeft': $(this).innerWidth() - 159,
              'marginTop': -2
            });
            return $(this).append(div);
          },
          mouseleave: function() {
            return _this.updateTableTextarea($(this).parent().parent());
          }
        }
      }).append($('<div/>', {
        'class': 'mmmmm',
        'html': position[key]
      })).data('val', position[key]);
      return td;
    };

    invoiceWindow.prototype.updateTableTextarea = function(table) {
      table.find('textarea').each(function() {
        var name;
        name = $(this).parent().data().val;
        return $(this).parent().attr('style', '').html($('<div/>', {
          'class': 'mmmmm',
          'html': name
        }));
      });
    };

    invoiceWindow.prototype.createHead = function(InvoiceRowData) {
      var _this, head_info, input, input_date, span_invoice, table, td, tr;
      _this = this;

      /*
       * контейнер шапки окна ТТН
       */
      head_info = $('<div>', {
        id: 'ttn_head_info'
      });

      /*
       * сборка таблицы с общей информации по ТТН
       */
      table = $('<table>', {
        id: 'ttn_head_info-table'
      });

      /*
       * строка с информацией по клиенту
       */
      tr = $('<tr/>');
      tr.append($('<td/>', {
        'html': this.options.client_name,
        'class': 'ttn_client_name'
      }));
      tr.append($('<td/>', {
        'html': this.options.client_requisit_name,
        'class': 'ttn_requisits',
        click: function() {
          return new sendAjax('show_requesit', {
            'id': _this.options.client_requisit_id
          }, function(response) {
            return new modalWindow({
              html: new requesitContent(response.data),
              maxHeight: '100%',
              width: '650px',
              title: 'Реквизиты'
            }, {
              closeOnEscape: true,
              single: false
            });
          });
        }
      }));
      table.append(tr);

      /*
       * если номер к данной ТТН не назначен - выводим строку
       * с формой назначения номера ТТН и даты от которой эта ТТН выставлена
       */
      td = $('<td/>', {
        'colspan': '2'
      });
      input_date = $('<input/>', {
        'val': this.options.invoice_create_date,
        'id': 'insert_invoice_date',
        blur: function() {
          var number;
          console.log(" >>> ");
          number = $(_this.$el).find('#insert_invoice_number');
          if ((Number(number.val()) !== 0 || number.length > 1) && $(this).val() !== '00.00.0000') {
            console.log(_this.myObj.buttonDiv);
            $(_this.myObj.buttonDiv).find('#create_bill_button').removeClass('no');
            return _this.editSaveObj('date', $(this).val(), _this.options.invoice_create_date);
          }
        }
      }).datetimepicker({
        minDate: new Date(),
        timepicker: false,
        dayOfWeekStart: 1,
        onSelectDate: function(ct, $i) {
          return $i.blur();
        },
        onGenerate: function(ct) {
          $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
          return $(this).find('.xdsoft_date');
        },
        closeOnDateSelect: true,
        format: 'd.m.Y'
      });
      if ((Number(this.options.invoice_num) === 0 || this.options.invoice_create_date === '00.00.0000') && this.access === 2) {
        input = $('<input/>', {
          'val': this.options.invoice_num,
          'data-val': this.options.invoice_num,
          'class': 'ttn_number_input',
          'id': 'insert_invoice_number',
          focus: function() {
            if (Number($(this).val()) === 0 && $(this).length <= 1) {
              $(this).val('');
              return $(_this.myObj.buttonDiv).find('#create_bill_button').addClass('no');
            }
          },
          blur: function() {
            if (Number($(this).val()) === 0 && $(this).length <= 1) {
              $(this).val($(this).attr('data-val'));
              return $(_this.myObj.buttonDiv).find('#create_bill_button').addClass('no');
            }
          },
          keyup: function() {
            if ((Number($(this).val()) !== 0 || $(this).length > 1) && input_date.val() !== '00.00.0000') {
              $(_this.myObj.buttonDiv).find('#create_bill_button').removeClass('no');
            } else {
              $(_this.myObj.buttonDiv).find('#create_bill_button').addClass('no');
            }
            return _this.editSaveObj('number', $(this).val(), _this.options.invoice_num);
          }
        });
        td.append('№ Счёта ').append($('<span/>').append(input));
        td.append($('<span/>').append(input_date));
      } else {
        span_invoice = $('<span/>', {
          'html': "№ Счёта " + this.options.invoice_num + " от " + this.options.invoice_create_date
        });
        td.append(span_invoice);
      }
      tr = $('<tr/>').append(td);
      table.append(tr);

      /*
       * добавляем всё в контейнер и возвращаем
       */
      return head_info.append(table);
    };

    invoiceWindow.prototype.getBillButtons = function(obj, InvoiceRowData) {
      var _this, buttons;
      _this = this;
      this.saveObj = {};
      buttons = [];
      if (Number(InvoiceRowData.invoice_num) <= 0 || InvoiceRowData.invoice_create_date === '00.00.0000') {
        buttons.push({
          text: 'Отмена',
          "class": 'button_yes_or_no no',
          click: function() {
            return _this.destroy();
          }
        });
        buttons.push({
          text: 'Создать',
          "class": 'button_yes_or_no no',
          id: 'create_bill_button',
          click: function() {
            return _this.confirmAndCreateBill(obj, InvoiceRowData);
          }
        });
      }
      return buttons;
    };

    invoiceWindow.prototype.editSaveObj = function(key, value, old_value) {
      if (old_value === value) {
        delete this.saveObj[key];
        this.saveObj[key] = void 0;
      } else {
        this.saveObj[key] = value;
      }
    };

    invoiceWindow.prototype.confirmAndCreateBill = function(obj, InvoiceRowData) {
      var _this, date, number, reload;
      _this = this;
      console.log(InvoiceRowData);
      this.saveObj.id = InvoiceRowData.id;
      reload = 0;
      console.log(this.saveObj);
      number = $(this.$el).find('#insert_invoice_number');
      if (number.length && (Number(number.val()) !== 0 && number.val() !== '')) {
        reload++;
        InvoiceRowData.invoice_num = number.val();
      } else {
        echo_message_js('Вы не указали номер счёта', 'error_message');
      }
      date = $(this.$el).find('#insert_invoice_date');
      if (date.length && date.val() !== '00.00.0000') {
        reload++;
        InvoiceRowData.invoice_create_date = date.val();
      } else {
        echo_message_js('Вы не указали дату', 'error_message');
      }
      if (reload === 2) {
        obj.parent().data({}).data(InvoiceRowData);
        $('#js-main-invoice-table').invoice('reflesh', InvoiceRowData);
        this.saveObj['doc_type'] = InvoiceRowData.doc_type;
        this.saveObj['doc_id'] = InvoiceRowData.doc_id;
        this.saveObj['manager_id'] = InvoiceRowData.manager_id;
        this.saveObj['manager_name'] = InvoiceRowData.manager_name;
        this.saveObj['client_name'] = InvoiceRowData.client_name;
        this.saveObj['client_id'] = InvoiceRowData.client_id;
        return new sendAjax('confirm_create_bill', this.saveObj, function() {
          return _this.destroy();
        });
      }
    };

    invoiceWindow.prototype.destroy = function() {
      return $(this.$el).parent().dialog('close').dialog('destroy').remove();
    };

    return invoiceWindow;

  })();


  /*
   * jQuery plagin Invoice
   *
   * @see       invoise table
   * @author    Alexey Kapitonov
   * @email     kapitonoval2012@gmail.com
   * @version   13.04.2016 16:26:46
   */

  (function($, window) {

    /*
     * Define the plugin class Invoice
     */
    var invoice;
    invoice = (function() {
      invoice.prototype.defaults = {
        start: false
      };

      invoice.prototype.showMore = [];

      invoice.prototype.Prange = 50;

      invoice.prototype.PminStart = 0;

      invoice.prototype.Pmin = 0;

      invoice.prototype.Pmax = 0;

      invoice.prototype.tabMenu = [];

      invoice.prototype.access_def = 0;

      invoice.prototype.response_def = {};

      function invoice(el, options) {
        var self;
        self = this;
        new sendAjax('get_data', {}, function(response) {
          self.options = $.extend({}, self.defaults, response);
          self.access = response.access;
          self.$el = $(el);

          /*
           * добавление меню
           */
          self.addMenu();
          self.init();
          self.quick_button_div = $('#quick_button_div');
          if (self.access === 2 || self.access === 1) {
            self.quick_button_div.append($('<span/>', {
              'html': 'приходы',
              'class': 'button',
              click: function(e) {
                return new paymentWindow(new paymentObj(), {}, self.access);
              }
            }));
            self.quick_button_div.append($('<apsn/>', {
              'html': 'расходы',
              'class': 'button',
              click: function(e) {
                return new costsWindow(new paymentObj(), {}, self.access);
              }
            }));
          }
          return $('#js-main-invoice-div').append($('<button/>', {
            id: 'button_send_error_message',
            html: 'Нашли ошибку?',
            css: {
              'top': '33px',
              'right': '0',
              'position': 'fixed',
              'color': '#7a7a7a',
              'border': '1px solid #f3f1f1',
              'background': '#ffc3b5',
              'padding': '10px 15px'
            },
            click: function() {
              return window.open('https://docs.google.com/forms/d/1TFOEjiuwPpiCRrnqY6Jp5CSiPqC-3rEId6-xUNKcUCM/viewform?c=0&w=1', '_blank');
            }
          }));
        });
      }

      invoice.prototype.reflesh = function(id) {
        var data;
        if (typeof id === 'string') {
          if ($(this.$el).find('#tt_' + id).length > 0) {
            data = $(this.$el).find('#tt_' + id).data();
            return $(this.$el).find('#tt_' + id).replaceWith(this.createRow(data));
          }
        } else {
          if ($(this.$el).find('#tt_' + id.id).length > 0) {
            data = $(this.$el).find('#tt_' + id.id).data(id);
            return $(this.$el).find('#tt_' + id.id).replaceWith(this.createRow(id));
          }
        }
      };

      invoice.prototype.addMenu = function() {
        var _this, i, j, len1, li, n, results, section, span, tabs;
        _this = this;
        this.tabMenu = $('#js-menu-invoice ul');
        section = Number($.urlVar('section'));
        tabs = [
          {
            index: 0,
            name: 'Все'
          }, {
            index: 1,
            name: 'Запрос'
          }, {
            index: 2,
            name: 'Готовые'
          }, {
            index: 3,
            name: 'Част. оплаченные'
          }, {
            index: 4,
            name: 'Оплаченные'
          }, {
            index: 5,
            name: 'Запрос ТТН'
          }, {
            index: 6,
            name: 'Готовые ТТН'
          }, {
            index: 7,
            name: 'Част. отгрузка'
          }, {
            index: 8,
            name: 'Отгрузка'
          }, {
            index: 9,
            name: 'Закрытые'
          }, {
            index: 14,
            name: 'Аннулированные'
          }
        ];
        if (Number(_this.access) === 1) {
          tabs.push({
            index: 15,
            name: 'Удаленные'
          });
        }
        results = [];
        for (i = j = 0, len1 = tabs.length; j < len1; i = ++j) {
          n = tabs[i];
          this.tabMenu.append(li = $('<li/>', {
            click: function(e) {
              $.urlVar('section', $(this).data('index'));
              _this.tabMenu.find('.selected').removeClass('selected');
              $(this).addClass('selected');
              return _this.updateTable();
            }
          }));
          li.append(span = $('<span/>'));
          span.append($('<div/>', {
            'class': 'border',
            'html': tabs[i].name
          }));
          li.data('index', tabs[i].index);
          if (tabs[i].index === 0) {
            li.css({
              'float': 'right'
            });
          }
          if (tabs[i].index === section) {
            results.push(li.addClass('selected'));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };

      invoice.prototype.updateTable = function() {
        var _this;
        _this = this;
        window_preload_add();
        return new sendAjax('get_data', {}, function(response) {
          _this.options = $.extend({}, _this.defaults, response);
          _this.init();
          return window_preload_del();
        });
      };

      invoice.prototype.greateHead = function() {
        var thead, tr;
        thead = $('<thead/>');
        tr = $('<tr/>');
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': '№, дата'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': '1C'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': 'приходы по счету'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': 'заказ,<br>менеджер'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'class': 'flag'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': 'клиент: название и юр. лицо'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': 'расходы по счету'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'class': 'ice'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': 'прибыль'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'class': 'calculator'
        }));
        tr.append($('<th/>', {
          'colspan': 3,
          'html': 'ТТН',
          css: {
            'minWidth': 150
          }
        }));
        tr.append($('<th/>', {
          'colspan': 2,
          'html': 'СПФ'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': 'статус заказа'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'class': 'dindin'
        }));
        thead.append(tr);
        tr = $('<tr/>');
        tr.append($('<th/>', {
          'id': 'defttn1',
          'html': '№'
        }));
        tr.append($('<th/>', {
          'id': 'defttn2',
          'html': 'дата'
        }));
        tr.append($('<th/>', {
          'id': 'defttn3',
          'html': 'в-т'
        }));
        tr.append($('<th/>', {
          'html': '№'
        }));
        tr.append($('<th/>', {
          'html': 'в-т'
        }));
        return thead.append(tr);
      };

      invoice.prototype.updateHead = function() {
        return this.$el.find('thead').replaceWith(this.greateHead);
      };

      invoice.prototype.init = function() {
        var _this, i, j, len, ref, ref1;
        _this = this;
        this.updateHead();
        this.$el.find('tbody').html('');

        /*
         * выгрузка первой страницы
         */
        len = Number(this.options.data.length);
        this.Pmax = this.Prange;
        this.Pmin = this.PminStart;
        if (len < this.Pmax) {
          this.Pmax = len;
        }
        for (i = j = ref = this.Pmin, ref1 = this.Pmax; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
          this.$el.find('tbody').append(this.createRow(this.options.data[i]));
        }

        /*
         * кнопка показать ещё
         */
        if ($('#js-main-invoice-show-rows').length > 0) {
          $('#js-main-invoice-show-rows').remove();
        }
        $('#js-main-invoice-div').append(this.showMore = $('<div/>', {
          'id': 'js-main-invoice-show-rows',
          'html': 'Показать ещё ' + this.Pmax + '/' + len,
          'data-c': len
        }));
        return this.showMore.click(function() {
          return _this.addMoreRows();
        });
      };

      invoice.prototype.addMoreRows = function() {
        var Pmin, i, j, ref, ref1, t, text;
        text = 'Показать еще ' + this.Pmax + '/' + this.showMore.data().c;
        Pmin = this.Pmax;
        this.Pmin = this.Pmax + 1;
        this.Pmax = this.Pmax + this.Prange;
        if (Number(this.showMore.data().c) < this.Pmax) {
          this.Pmax = Number(this.showMore.data().c);
          text = 'Показано строк ' + this.Pmax + '/' + this.showMore.data().c;
        }
        if (Pmin === this.Pmax) {
          return echo_message_js("На страницу уже выгружены все счета " + Pmin + " / " + this.Pmax);
        }
        for (i = j = ref = this.Pmin, ref1 = this.Pmax; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
          this.$el.find('tbody').append(this.createRow(this.options.data[i]));
        }
        this.showMore.html(text);
        t = $(window).scrollTop() + $(window).height() - 100;
        if (t > 0) {
          return $("html, body").animate({
            scrollTop: t
          }, 600);
        }
      };

      invoice.prototype.printOptions = function() {
        console.info(this.options.access);
        return console.info(this.options.data);
      };

      invoice.prototype.updateRows = function() {
        this.$el.find('tbody').html('');
        return this.init();
      };

      invoice.prototype.getTtnRow = function(row, ttn, i) {
        var _this, check, d, div22, divw, number, tr;
        _this = this;
        tr = $('<div/>', {
          'id': ttn.id,
          'class': 'row'
        }).data(ttn);
        if (ttn.ttn_bgcolor_class !== void 0) {
          tr.addClass(ttn.ttn_bgcolor_class);
        }
        if (ttn.number <= 0) {
          number = 'запрос';
        } else {
          number = ttn.number;
        }
        tr.append(d = $('<div/>', {
          'class': 'defttn1 cell',
          'html': number,
          click: function() {
            var t;
            t = $(this);
            if (Number(ttn.ttn_lok) === 0) {
              return false;
            }
            return new sendAjax('get_ttn', {
              'id': row.id
            }, function(response) {
              if (response.data !== void 0) {
                return new ttnWindow(t, row, response.data, _this.options.access, ttn);
              }
            });
          }
        }).width(_this.defttn[0]));
        if (ttn.number <= 0) {
          d.addClass('redTD');
        }
        tr.append($('<div/>', {
          'class': 'defttn2 cell',
          'html': ttn.date,
          click: function() {
            var t;
            t = $(this);
            if (Number(ttn.ttn_lok) === 1) {
              return false;
            }
            return new sendAjax('get_ttn', {
              'id': row.id
            }, function(response) {
              if (response.data !== void 0) {
                return new ttnWindow(t, row, response.data, _this.options.access, ttn);
              }
            });
          }
        }).width(_this.defttn[1]));
        if (ttn["return"] !== null && Number(ttn["return"]) === 1) {
          check = ' checked';
        } else {
          check = '';
        }
        div22 = $('<div/>');
        divw = $('<div/>', {
          'html': div22,
          'class': 'defttn3 cell invoice-row--ttn--vt invoice-row--checkboxtd' + check,
          'data-id': ttn.id,
          click: function() {
            var t;
            if (_this.options.access !== 2) {
              $(this).prev().click();
              return false;
            }
            t = $(this);
            if (Number(ttn["return"]) === 0) {
              ttn["return"] = 1;
              ttn.date_return = getDateNow();
              t.addClass('checked');
              return new sendAjax('ttn_was_returned', {
                id: row.ttn[i].id,
                val: ttn["return"]
              });
            } else {
              return new modalConfirm({
                html: "Данное действие отмечено системой как не логичное. <br>Вы уверены?"
              }, function() {
                ttn["return"] = 0;
                ttn.date_return = getDateNow();
                t.removeClass('checked');
                return new sendAjax('ttn_was_returned', {
                  id: row.ttn[i].id,
                  val: ttn["return"]
                });
              });
            }
          },
          on: {
            mouseenter: function() {
              $(this).css({
                'cursor': 'posinter'
              });
              if (!div22.hasClass('notify')) {
                div22.addClass('notify');
                return setTimeout(function() {
                  if (div22.hasClass('notify') && Number(ttn["return"]) > 0) {
                    return div22.notify($('<div/>', {
                      'css': {
                        'textAlign': 'left'
                      },
                      'html': 'дата возврата:<br>' + ttn.date_return
                    }), {
                      position: "right",
                      className: 'invoice_12px',
                      autoHide: false
                    });
                  }
                }, 1);
              }
            },
            mouseleave: function() {
              $(this).find('div.notifyjs-wrapper').remove();
              $(this).attr('style', '').width(_this.defttn[2]);
              return div22.removeClass('notify');
            }
          }
        }).width(_this.defttn[2]);
        if (Number(ttn.shipment_status) === 1 && Number(ttn.number) > 0) {
          divw.addClass('redTD');
        }
        tr.append(divw).data(ttn);
        return tr;
      };


      /*
       * создание TD ттн
       */

      invoice.prototype.getTdTtn = function(row) {
        var _this, i, j, len1, ref, table, td, ttn, windowClick;
        windowClick = function(event) {};
        if (this.defttn === void 0) {
          this.defttn = {
            0: $('#defttn1').width(),
            1: $('#defttn2').width(),
            2: $('#defttn3').width()
          };
        }
        _this = this;
        table = $('<div/>', {
          'class': 'table',
          'style': 'width:100%'
        });
        ref = row.ttn;
        for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
          ttn = ref[i];
          table.prepend(this.getTtnRow(row, ttn, i));
        }
        if (row.ttn.length <= 0) {
          td = $('<td/>', {
            'colspan': '3',
            'class': 'js-query-ttn'
          });
        } else {
          td = $('<td/>', {
            'colspan': '3',
            'class': 'js-query-ttn-rows'
          }).append(table);
        }
        if (_this.options.access === 5) {
          console.log(row);
          console.log(row.positions_num, row.positions_in_ttn);
          if (Number(row.positions_num) > Number(row.positions_in_ttn) && Number(row.positions_in_ttn) > 0) {
            td.append($('<div/>', {
              'html': 'Запросить',
              'class': 'js-query-ttn-div mayBeEdit',
              click: function() {
                var t;
                t = $(this);
                if (Number(row.invoice_num) === 0 && row.invoice_create_date === '00.00.0000') {
                  new warnNotCreateInvoice();
                  return false;
                }
                return new sendAjax('get_ttn', {
                  'id': row.id
                }, function(response) {
                  if (response.data !== void 0) {
                    return new ttnWindow(t, row, response.data, _this.options.access);
                  }
                });
              }
            }));
          } else if (Number(row.positions_num) > Number(row.positions_in_ttn)) {
            console.log(654);
            td = $('<td/>', {
              'colspan': '3',
              'class': 'js-query-ttn',
              'html': 'Запросить',
              click: function(e) {
                var t;
                t = $(this);
                if (Number(row.invoice_num) === 0 && row.invoice_create_date === '00.00.0000') {
                  new warnNotCreateInvoice();
                  return false;
                }
                return new sendAjax('get_ttn', {
                  'id': row.id
                }, function(response) {
                  if (response.data !== void 0) {
                    return new ttnWindow(t, row, response.data, _this.options.access);
                  }
                });
              }
            });
          }
        }
        return td;
      };


      /*
       * create tr
       */

      invoice.prototype.createRow = function(row) {
        return new invoiceRow(row, this.access, this.getTdTtn(row));
      };

      return invoice;

    })();
    return $.fn.extend({
      invoice: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('invoice');
          if (!data) {
            $this.data('invoice', (data = new invoice(this, option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);


  /*
   * метод отправки запроса AJAX
   */

  warnNotCreateInvoice = (function() {
    function warnNotCreateInvoice(mess) {
      if (mess == null) {
        mess = "Внесите дату и номер счёта";
      }
      return new modalWindow({
        html: mess,
        title: 'Внимание'
      }, {
        single: false,
        closeOnEscape: true
      });
    }

    return warnNotCreateInvoice;

  })();


  /*
   * прототип html строки таблицы счета
   */

  invoiceRow = (function() {
    invoiceRow.prototype.enterObj = {};

    invoiceRow.prototype.options = {};

    invoiceRow.prototype.access = 0;

    function invoiceRow(data, access, ttn) {
      this.access = access;
      this.options = data;
      return this.init(ttn);
    }

    invoiceRow.prototype.init = function(ttn) {
      var _this, btn1, btn2, btn3, btn4, btn5, button, commentDiv, d, div1, div2, div22, div3, div31, doc_type, pr, td, tr;
      _this = this;
      tr = $('<tr/>', {
        id: 'tt_' + this.options.id
      }).data(this.options);
      if (this.options.doc_type === 'spec') {
        this.options.spf_num = this.options.doc_num;
        doc_type = 'счёт';
      } else {
        this.options.spf_num = 'оф';
        doc_type = 'счёт - оферта';
      }
      td = $('<td/>', {
        'class': 'invoice-row--fist-td',
        click: function() {
          var t;
          t = $(this);
          return new sendAjax('get_ttn', {
            'id': _this.options.id
          }, function(response) {
            return new invoiceWindow(t, _this.options, response.data, _this.access);
          });
        }
      }).append(d = $('<div/>', {
        'class': 'invoice-row--number'
      })).append($('<div/>', {
        'class': 'invoice-row--type',
        'html': doc_type
      }));
      d.append($('<span/>', {
        'html': this.options.invoice_num,
        'css': {
          'paddingRight': '10px',
          'fontSize': '14px'
        }
      })).append(this.options.invoice_create_date);
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--checkboxtd'
      }).append($('<div/>', {
        'class': 'invoice-row--checkboxtd-div'
      }));
      td.click(function() {
        var t;
        if (_this.access === 2) {
          if (Number(_this.options.invoice_num) === 0 && _this.options.invoice_create_date === '00.00.0000') {
            new warnNotCreateInvoice();
            return false;
          }
          if ($(this).hasClass('checked')) {
            _this.options.flag_1c = 0;
            $('#js-main-invoice-table').invoice('reflesh', _this.options);
          } else {
            if (Number(_this.options.invoice_num) === 0 || _this.options.invoice_create_date === '00.00.0000') {
              echo_message_js("введите номер счёта и дату");
              t = $(this);
              new sendAjax('get_ttn', {
                'id': _this.options.id
              }, function(response) {
                return new invoiceWindow(t, _this.options, response.data, _this.access);
              });
            } else {
              _this.options.flag_1c = 1;
              $('#js-main-invoice-table').invoice('reflesh', _this.options);
            }
          }
          new sendAjax('edit_flag_1c', {
            id: _this.options.id,
            val: _this.options.flag_1c
          });
        }
      });
      if (Number(this.options.flag_1c > 0)) {
        td.addClass('checked');
      }
      if (Number(this.options.flag_1c) === 0 && (Number(this.options.invoice_num) > 0 && this.options.invoice_create_date !== '00.00.0000')) {
        td.addClass('red1c');
      }
      tr.append(td);
      div1 = $('<div/>', {
        'class': 'invoice-row--price-profit',
        'html': round_money(this.options.price_out)
      });
      div2 = $('<div/>', {
        'class': 'invoice-row--price-payment',
        'html': round_money(this.options.price_out_payment)
      });
      if (Number(this.options.price_out) !== Number(this.options.price_out_payment)) {
        div2.addClass('redText');
      }
      td = $('<td/>', {
        'data-id': this.options.id,
        click: function(e) {
          var t;
          if (Number(_this.options.invoice_num) === 0 && _this.options.invoice_create_date === '00.00.0000') {
            new warnNotCreateInvoice();
            return false;
          }
          t = $(this);
          return new sendAjax('get_payment', {
            'id': _this.options.id
          }, function(response) {
            console.log(_this.access);
            return new paymentWindow(_this.options, response.data, _this.access);
          });
        },
        on: {
          mouseenter: function() {
            $(this).css({
              'backgroundColor': '#f1f1f1',
              'cursor': 'pointer'
            });
            if (!div2.hasClass('notify')) {
              div2.addClass('notify');
              return setTimeout(function() {
                if (div2.hasClass('notify')) {
                  return new sendAjax('get_payment', {
                    'id': _this.options.id,
                    'not_deleted_row': 1
                  }, function(response) {
                    var dopText, i, j, len1, notifyContent, ptr, ref, row, tbl;
                    if (response.data.length > 0) {
                      div2.notify(notifyContent = $('<div/>'), {
                        position: "right",
                        className: 'invoice_12px',
                        autoHide: false
                      });
                      tbl = $('<table/>', {
                        'class': 'notify-table',
                        'id': 'invoice-row--price-payment-table'
                      });
                      tbl.append(ptr = $('<tr/>'));
                      ptr.append($('<td/>', {
                        'html': 'сумма'
                      }));
                      ptr.append($('<td/>', {
                        'html': '%'
                      }));
                      ptr.append($('<td/>', {
                        'html': '№'
                      }));
                      ptr.append($('<td/>', {
                        'html': 'дата'
                      }));
                      ref = response.data;
                      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
                        row = ref[i];
                        tbl.append(ptr = $('<tr/>'));
                        ptr.append($('<td/>', {
                          'html': round_money(response.data[i].price)
                        }));
                        ptr.append($('<td/>', {
                          'html': round_percent(response.data[i].percent)
                        }).append('%'));
                        ptr.append($('<td/>', {
                          'html': response.data[i].number
                        }));
                        ptr.append($('<td/>', {
                          'html': response.data[i].date
                        }));
                      }
                      notifyContent.html(tbl);
                      if (Number(_this.options.conditions) > Number(_this.options.percent_payment)) {
                        dopText = $('<div/>', {
                          'class': 'invoice-row--price-payment-dopText'
                        });
                        dopText.append($('<div/>', {
                          'style': 'text-align:left;color:red;',
                          'html': 'Внимание!'
                        }));
                        dopText.append($('<div/>', {
                          'style': 'text-align:left;',
                          'html': 'Не выполнены условия договора:'
                        }));
                        dopText.append($('<div/>', {
                          'style': 'text-align:left;',
                          'html': 'график оплаты: ' + round_money(_this.options.conditions) + '-' + round_money(100 - Number(_this.options.conditions)) + '%'
                        }));
                        notifyContent.append(dopText);
                      }
                      if (Number(_this.options.price_out) !== Number(_this.options.price_out_payment)) {
                        dopText = $('<div/>', {
                          'class': 'invoice-row--price-payment-dopText'
                        });
                        dopText.append($('<div/>', {
                          'style': 'text-align:left;color:red;',
                          'html': 'Внимание!'
                        }));
                        dopText.append($('<div/>', {
                          'style': 'text-align:left;',
                          'html': 'Сумма по счёту не соответствует сумме оплаты'
                        }));
                        return notifyContent.append(dopText);
                      }
                    } else if (Number(_this.options.price_out_payment) === 0) {
                      return div2.notify(notifyContent = $('<div/>', {
                        'html': 'нет оплаты'
                      }), {
                        position: "right",
                        className: 'invoice_12px',
                        autoHide: true
                      });
                    }
                  });
                }
              }, 100);
            }
          },
          mouseleave: function() {
            $(this).find('div.notifyjs-wrapper').remove();
            $(this).attr('style', '');
            return div2.removeClass('notify');
          }
        }
      }).css('cursor', 'pointer');
      td.append(div1);
      td.append(div2);
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--order-number',
        'html': this.options.invoice_num
      })).append($('<div/>', {
        'class': 'invoice-row--meneger--full-name',
        'html': this.options.manager_name
      }));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--icons-flag'
      }).append($('<div/>', {
        'class': 'invoice-row--checkboxtd-div'
      }));
      td.click(function() {
        var t;
        if (Number(_this.options.invoice_num) === 0 && _this.options.invoice_create_date === '00.00.0000') {
          new warnNotCreateInvoice();
          return false;
        }
        if ($(this).hasClass('checked')) {
          if (Number(_this.access) !== 1) {
            console.log(_this.access);
            echo_message_js('Снять рекламацию может только администратор', 'error_message');
            return false;
          }
          _this.options.flag_flag = 0;
          $(this).removeClass('checked');
          new sendAjax('edit_flag_flag', {
            id: _this.options.id,
            val: _this.options.flag_flag
          });
        } else {
          if (Number(_this.access) !== 5 && Number(_this.access) !== 1) {
            echo_message_js('Рекламацию устанавливает только менеджер', 'error_message');
            return false;
          }
          t = $(this);
          new modalConfirm({
            html: 'Вы уверены, что хотите установить флаг рекламации?'
          }, function() {
            _this.options.flag_flag = 1;
            t.addClass('checked');
            return new sendAjax('edit_flag_flag', {
              id: _this.options.id,
              val: _this.options.flag_flag
            });
          });
        }
      });
      if (Number(this.options.flag_flag > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--client--name',
        'html': this.options.client_name,
        click: function() {
          return window.open('http://' + location.hostname + '/os/?page=clients&section=client_folder&subsection=client_card_table&client_id=' + _this.options.client_id, '_blank');
        }
      })).append($('<div/>', {
        'class': 'invoice-row--client--requsits',
        'data-id': this.options.client_requisit_id,
        'html': this.options.client_requisit_name
      }));
      tr.append(td);
      div31 = $('<div/>', {
        'class': 'invoice-row--price-start',
        'html': _this.options.costs_supplier_bill
      });
      div3 = $('<div/>', {
        'class': 'invoice-row--price-our-pyment',
        'html': _this.options.costs
      });
      td = $('<td/>', {
        'class': 'mayBeEdit',
        click: function(e) {
          if (Number(_this.options.invoice_num) === 0 && _this.options.invoice_create_date === '00.00.0000') {
            new warnNotCreateInvoice();
            return false;
          }
          return new sendAjax('get_costs', {
            'id': _this.options.id
          }, function(response) {
            return new costsWindow(_this.options, response.data, _this.access);
          });
        },
        on: {
          mouseenter: function() {
            var t;
            t = $(this);
            $(this).css({
              'backgroundColor': '#f1f1f1',
              'cursor': 'posinter'
            });
            if (!div3.hasClass('notify')) {
              div3.addClass('notify');
              return setTimeout(function() {
                if (div3.hasClass('notify')) {
                  return new sendAjax('get_costs_qtip', {
                    'id': _this.options.id,
                    'not_deleted_row': 1
                  }, function(response) {
                    var dopText, i, j, len1, notifyContent, ptr, ref, row, tbl;
                    if (response.data.length > 0) {
                      div3.notify(notifyContent = $('<div/>'), {
                        position: "right",
                        className: 'invoice_12px',
                        autoHide: false
                      });
                      tbl = $('<table/>', {
                        'class': 'notify-table',
                        'id': 'invoice-row--price-payment-table'
                      });
                      tbl.append(ptr = $('<tr/>'));
                      ptr.append($('<td/>', {
                        'html': 'Поставщик'
                      }));
                      ptr.append($('<td/>', {
                        'html': 'Сумма долга'
                      }));
                      ref = response.data;
                      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
                        row = ref[i];
                        tbl.append(ptr = $('<tr/>'));
                        ptr.append($('<td/>', {
                          'html': response.data[i].supplier_name
                        }));
                        ptr.append($('<td/>', {
                          'html': round_money(response.data[i].price)
                        }));
                      }
                      notifyContent.html(tbl);
                    }
                    if (Number(_this.options.costs) !== Number(_this.options.costs_supplier_bill)) {
                      dopText = $('<div/>', {
                        'class': 'invoice-row--price-payment-dopText'
                      });
                      dopText.append($('<div/>', {
                        'style': 'text-align:left;color:red;',
                        'html': 'Внимание!'
                      }));
                      dopText.append($('<div/>', {
                        'style': 'text-align:left;',
                        'html': 'Сумма по счёту не соответствует сумме оплаты'
                      }));
                      return notifyContent.append(dopText);
                    } else if (Number(_this.options.costs) === 0) {
                      return div3.notify(notifyContent = $('<div/>', {
                        'html': 'нет оплаты'
                      }), {
                        position: "right",
                        className: 'invoice_12px',
                        autoHide: true
                      });
                    }
                  });
                }
              }, 100);
            }
          },
          mouseleave: function() {
            $(this).find('div.notifyjs-wrapper').remove();
            $(this).attr('style', '');
            return div3.removeClass('notify');
          }
        }
      }).css('cursor', 'pointer');
      td.append(div31);
      td.append(div3);
      if (Number(this.options.costs) !== Number(this.options.costs_supplier_bill)) {
        div3.addClass('redText');
      }
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--ice mayBeEdit',
        click: function(e) {
          if (Number(_this.options.invoice_num) === 0 && _this.options.invoice_create_date === '00.00.0000') {
            new warnNotCreateInvoice();
            return false;
          }
          return new sendAjax('get_costs', {
            'id': _this.options.id
          }, function(response) {
            return new costsWindow(_this.options, response.data, _this.access);
          });
        }
      });
      if (Number(this.options.flag_ice > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      pr = round_money(((Number(this.options.price_out_payment) - Number(this.options.costs)) / Number(this.options.price_out_payment) * 100).toString());
      if (Number(this.options.price_out_payment) === 0) {
        pr = '0.00';
      }
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--price-our-profit',
        'html': round_money(Number(this.options.price_out_payment) - Number(this.options.costs))
      })).append($('<div/>', {
        'class': 'invoice-row--price-our-profit-percent',
        'html': pr + '%'
      }));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--icons-calculator mayBeEdit',
        click: function(e) {
          if (Number(_this.options.invoice_num) === 0 && _this.options.invoice_create_date === '00.00.0000') {
            new warnNotCreateInvoice();
            return false;
          }
          return new sendAjax('get_costs', {
            'id': _this.options.id
          }, function(response) {
            return new costsWindow(_this.options, response.data, _this.access);
          });
        }
      });
      if (Number(this.options.flag_calc > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      tr.append(ttn);
      td = $('<td/>', {
        'class': 'tdLink mayBeEdit',
        click: function() {
          if (_this.options.doc_type === 'spec') {
            return window.open('http://' + location.hostname + '/os/?page=agreement&section=agreement_editor&client_id=' + _this.options.client_id + '&agreement_id=' + _this.options.doc_id + '&agreement_type=long_term&open=specification&specification_num=' + _this.options.doc_num + '&dateDataObj={"doc_type":"spec"}', '_blank');
          } else {
            return window.open('http://' + location.hostname + '/os/?page=agreement&section=agreement_editor&client_id=' + _this.options.client_id + '&oferta_id=' + _this.options.doc_id + '&dateDataObj={"doc_type":"oferta"}', '_blank');
          }
        }
      }).append($('<div/>').html(this.options.spf_num));
      tr.append(td);
      div22 = $('<div/>');
      td = $('<td/>', {
        'class': 'invoice-row--ttn--vt invoice-row--checkboxtd',
        click: function() {
          if ($(this).hasClass('checked')) {
            _this.options.flag_spf_return = 0;
            _this.options.spf_return_date = '';
            $(this).removeClass('checked');
          } else {
            _this.options.flag_spf_return = 1;
            _this.options.spf_return_date = getDateNow();
            $(this).addClass('checked');
          }
          return new sendAjax('edit_flag_spf_return', {
            id: _this.options.id,
            val: _this.options.flag_spf_return
          });
        },
        on: {
          mouseenter: function() {
            var t;
            t = $(this);
            $(this).css({
              'backgroundColor': '#f1f1f1',
              'cursor': 'posinter'
            });
            if (!div22.hasClass('notify')) {
              div22.addClass('notify');
              return setTimeout(function() {
                var notifyContent;
                if (div22.hasClass('notify') && _this.options.spf_return_date && _this.options.spf_return_date !== '') {
                  return div22.notify(notifyContent = $('<div/>', {
                    'css': {
                      'textAlign': 'left'
                    },
                    'html': 'дата возврата:<br>' + _this.options.spf_return_date
                  }), {
                    position: "right",
                    className: 'invoice_12px',
                    autoHide: false
                  });
                }
              }, 100);
            }
          },
          mouseleave: function() {
            $(this).find('div.notifyjs-wrapper').remove();
            $(this).attr('style', '');
            return div22.removeClass('notify');
          }
        }
      });
      td.append(div22);
      if (Number(this.options.flag_spf_return > 0)) {
        td.addClass('checked');
      }
      if (this.options.spf_num !== 'оф') {
        tr.append(td);
      } else {
        tr.append($('<td/>'));
      }
      td = $('<td/>', {
        'html': this.options.status
      });
      button = [];
      btn1 = {
        'name': 'Аннулировать',
        'class': '',
        click: function(e) {
          var message;
          message = "Счёт будет аннулирован. <br><br>Продолжить?";
          return new modalConfirm({
            html: message
          }, function() {
            return new getStatisticForm("invoice_repealed", {
              dialogMessage: 'Пажалуйста, выберите нужный пункт и напишите пару строк для статистики. '
            }, function() {
              return new sendAjax('repeal_invoice', {
                id: _this.options.id
              }, function() {
                return tr.remove();
              });
            }, function() {
              return echo_message_js("Ответы на данные вопросы обязательны");
            });
          });
        }
      };
      btn2 = {
        'name': 'Удалить',
        'class': '',
        click: function(e) {
          var message;
          if (_this.access === 2) {
            message = "Счёт будет полностью удален из системы. <br><br>Продолжить?";
            return new modalConfirm({
              html: message
            }, function() {
              return new getStatisticForm("invoice_basket", {
                dialogMessage: 'Пажалуйста, выберите нужный пункт и напишите пару строк для статистики. '
              }, function() {
                new sendAjax('delete_to_basket_invoice', {
                  id: _this.options.id
                }, function() {
                  return tr.remove();
                });
                return function() {
                  return echo_message_js("Ответы на данные вопросы обязательны");
                };
              });
            });
          } else {
            return new sendAjax('delete_to_basket_invoice', {
              id: _this.options.id
            }, function() {
              return tr.remove();
            });
          }
        }
      };
      btn3 = {
        'name': 'Удалить навсегда',
        'class': '',
        click: function(e) {
          var message;
          message = "Счёт и все связанные с ним данные будут полностью удалены из системы.<br> Восстановить информацию по счёту после данной операции будет невозможно!!!<br><br>Продолжить?";
          return new modalConfirm({
            html: message
          }, function() {
            return new sendAjax('delete_invoice_row', {
              id: _this.options.id
            }, function() {
              return tr.remove();
            });
          });
        }
      };
      btn4 = {
        'name': 'Вернуть в работу',
        'class': '',
        click: function(e) {
          return new sendAjax("remove_from_closed", {
            id: _this.options.id
          }, function() {
            return tr.remove();
          });
        }
      };
      btn5 = {
        'name': 'Закрыть счёт',
        'class': '',
        click: function(e) {
          var content, date, wDate;
          content = $('<div/>').append($('<div/>', {
            'html': 'Укажите дату закрытия'
          })).append($('<div/>', {
            'css': {
              'padding': '5px',
              'margin': '10px 0 0 0'
            }
          }).append(date = $('<input/>', {
            'val': getDateNow(),
            'css': {
              'padding': '5px'
            }
          })));
          date.datetimepicker({
            timepicker: false,
            dayOfWeekStart: 1,
            onSelectDate: function(ct, $i) {
              return $i.blur();
            },
            onGenerate: function(ct) {
              $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
              return $(this).find('.xdsoft_date');
            },
            closeOnDateSelect: true,
            format: 'd.m.Y'
          }).blur();
          return wDate = new modalWindow({
            html: content,
            title: 'Укажите дату',
            buttons: [
              {
                text: 'Отмена',
                "class": 'button_yes_or_no no',
                click: function() {
                  return $(wDate.winDiv).dialog('close').dialog('destroy').remove();
                }
              }, {
                text: 'OK',
                "class": 'button_yes_or_no yes',
                click: function() {
                  $(wDate.winDiv).dialog('close').dialog('destroy').remove();
                  return new sendAjax('closed_invoice_row', {
                    id: _this.options.id,
                    date: date.val()
                  }, function(response) {
                    return tr.remove();
                  });
                }
              }
            ]
          }, {
            single: false
          });
        }
      };
      this.options.closed = Number(this.options.closed);
      if (this.access === 1) {
        if (this.options.closed !== 2 && this.options.closed !== 3) {
          button.push(btn1);
        }
        if (this.options.closed !== 3) {
          button.push(btn2);
        }
        button.push(btn3);
        if (this.options.closed !== 0) {
          button.push(btn4);
        }
        if (this.options.closed !== 1) {
          button.push(btn5);
        }
      }
      if (this.access === 2) {
        if (this.options.closed !== 2 && this.options.closed !== 3) {
          button.push(btn1);
        }
        if (this.options.closed !== 3) {
          button.push(btn2);
        }
      }
      if (this.access === 5) {
        if (this.options.closed === 0) {
          button.push(btn1);
        }
      }
      console.log(this.options.closed);
      if (button.length > 0) {
        td.menuRightClick({
          'buttons': button
        });
      }
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      td.append(commentDiv = $('<div/>', {
        'class': 'invoice-row-icon invoice-row--comment',
        click: function() {
          return new sendAjax('get_comments_module', {
            invoice_id: _this.options.id
          }, function(response) {
            return new commentsWindow(_this.options, response.data, _this.access);
          });
        }
      }));
      if (Number(this.options.comments_num) > 0) {
        commentDiv.addClass('isfull');
      }
      return tr;
    };

    return invoiceRow;

  })();


  /*
   * jQuery plagin Sklad
   *
   * @see       sklad table
   * @author    Alexey Kapitonov
   * @email     kapitonoval2012@gmail.com
   * @version   17.05.2016 16:44:46
   */

  (function($, window) {

    /*
     * Define the plugin class sklad
     */
    var sklad;
    sklad = (function() {
      sklad.prototype.defaults = {
        start: false
      };

      sklad.prototype.showMore = [];

      sklad.prototype.Prange = 50;

      sklad.prototype.PminStart = 0;

      sklad.prototype.Pmin = 0;

      sklad.prototype.Pmax = 0;

      sklad.prototype.tabMenu = [];

      sklad.prototype.access_def = 0;

      sklad.prototype.response_def = {};

      function sklad(el, options) {
        var self;
        self = this;
        new sendAjax('get_data_sklad', {
          url: window.location.href
        }, function(response) {
          self.options = $.extend({}, self.defaults, response);
          self.access = response.access;
          self.$el = $(el);

          /*
           * добавление меню
           */
          self.addMenu();
          return self.init();
        });
      }

      sklad.prototype.reflesh = function(id) {
        var data, rowspan;
        if (id.ttn_id !== void 0) {
          data = id;
          id = data.ttn_id;
          console.log("принят объект ", data.shipment_status);
        } else {
          console.log("принят id ");
          data = $(this.$el).find('#sklad_row_' + id).data();
        }
        if ($(this.$el).find('#sklad_row_' + id).length > 0) {
          if ($(this.$el).find('#sklad_row_' + id).hasClass('subRow')) {
            rowspan = 0;
          } else {
            rowspan = Number($(this.$el).find('#sklad_row_' + id + ' td').eq(1).attr('rowspan'));
          }
          console.log("Новая информация по строке: ->>  ", data);
          $(this.$el).find('#sklad_row_' + id).replaceWith(new skladRow(data, this.aceess, rowspan));
          return this.checkGlobalStatus(data);
        }
      };

      sklad.prototype.checkGlobalStatus = function(data) {
        var dataFirstRow, firstRow, number_positions, rData, row, rowspan, shipment_status;
        if ($(this.$el).find('#sklad_row_' + data.ttn_id).length > 0) {
          row = $(this.$el).find('#sklad_row_' + data.ttn_id);
          while (row.hasClass('subRow')) {
            row = row.prev();
          }
          firstRow = row;
          dataFirstRow = firstRow.data();
          rowspan = 1;
          shipment_status = Number(dataFirstRow.shipment_status);
          number_positions = dataFirstRow.positions_num.split(',').length;
          while (row.next() !== void 0 && row.next().hasClass('subRow')) {
            row = row.next();
            rData = row.data();
            number_positions += rData.positions_num.split(',').length;
            shipment_status += Number(rData.shipment_status);
            rowspan++;
          }
          return new sendAjax('check_shipment_global_status', {
            invoice_id: dataFirstRow.id,
            positions_num: Number(dataFirstRow.invoice_positions_num),
            positions_in_ttn: Number(dataFirstRow.positions_in_ttn)
          }, function(response) {
            var rowNew;
            if (dataFirstRow.status !== response.data.status) {
              dataFirstRow.status = response.data.status;
              rowNew = new skladRow(dataFirstRow, this.aceess, rowspan);
              return firstRow.replaceWith(rowNew);
            }
          });
        }
      };

      sklad.prototype.getData = function(id) {
        var data;
        data = [];
        if (typeof id === 'string') {
          if ($(this.$el).find('#sklad_row_' + id).length > 0) {
            data = $(this.$el).find('#sklad_row_' + id).data();
          }
        } else {
          if ($(this.$el).find('#sklad_row_' + id.id).length > 0) {
            data = $(this.$el).find('#sklad_row_' + id.id).data(id);
          }
        }
        return data;
      };

      sklad.prototype.addMenu = function() {
        var _this, i, j, len1, li, n, results, section, span, tabs;
        _this = this;
        this.tabMenu = $('#js-menu-invoice ul');
        section = Number($.urlVar('section'));
        tabs = [
          {
            index: 0,
            name: 'Все'
          }, {
            index: 11,
            name: 'На отгрузку самовывоз'
          }, {
            index: 12,
            name: 'На отгрузку доставка'
          }, {
            index: 7,
            name: 'Частично отгруженные'
          }, {
            index: 8,
            name: 'Полностью отгруженные'
          }
        ];
        results = [];
        for (i = j = 0, len1 = tabs.length; j < len1; i = ++j) {
          n = tabs[i];
          this.tabMenu.append(li = $('<li/>', {
            click: function(e) {
              $.urlVar('section', $(this).data('index'));
              _this.tabMenu.find('.selected').removeClass('selected');
              $(this).addClass('selected');
              return _this.updateTable();
            }
          }));
          li.append(span = $('<span/>'));
          span.append($('<div/>', {
            'class': 'border',
            'html': tabs[i].name
          }));
          li.data('index', tabs[i].index);
          if (tabs[i].index === 0) {
            li.css({
              'float': 'right'
            });
          }
          if (tabs[i].index === section) {
            results.push(li.addClass('selected'));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };

      sklad.prototype.updateTable = function() {
        var _this;
        _this = this;
        window_preload_add();
        return new sendAjax('get_data_sklad', {
          url: window.location.href
        }, function(response) {
          _this.options = $.extend({}, _this.defaults, response);
          _this.init();
          return window_preload_del();
        });
      };

      sklad.prototype.greateHead = function() {
        var _this, btn1, btn2, btn3, btn4, button2, thDate, thead, tr;
        _this = this;
        thead = $('<thead/>');
        tr = $('<tr/>');
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': '№ счёта, дата'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': 'заказ,<br>менеджер'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': 'клиент: название и юр. лицо'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': 'отгрузка'
        }));
        tr.append(thDate = $('<th/>', {
          'rowspan': 2,
          'class': 'mayBeClick',
          'html': 'дата'
        }));
        button2 = [];
        btn1 = {
          'name': 'Сегодня',
          'class': '',
          click: function(e) {
            var today;
            today = getDateNow();
            $.urlVar('date_start', today);
            $.urlVar('date_end', today);
            return $('#js-main-invoice-table').sklad('updateTable');
          }
        };
        btn2 = {
          'name': 'Завтра',
          'class': '',
          click: function(e) {
            var today;
            today = getDateTomorrow();
            $.urlVar('date_start', today);
            $.urlVar('date_end', today);
            return $('#js-main-invoice-table').sklad('updateTable');
          }
        };
        btn3 = {
          'name': 'Календарь',
          'class': 'js--get-calendar-filter',
          click: function(e) {
            var inp;
            thDate.append(inp = $('<input/>', {
              'css': {
                'opacity': 0,
                'float': 'left',
                'width': '0px',
                'height': '0px',
                'padding': '0'
              }
            }));
            inp.daterangepicker({
              timePicker: false,
              locale: {
                format: 'MM.DD.YYYY'
              }
            }, function(start, end, label) {
              $.urlVar('date_start', start.format('DD.MM.YYYY'));
              $.urlVar('date_end', end.format('DD.MM.YYYY'));
              $('#js-main-invoice-table').sklad('updateTable');
              return inp.remove();
            });
            return inp.focus();
          }
        };
        btn4 = {
          'name': 'Сбросить',
          'class': '',
          click: function(e) {
            var today;
            today = getDateNow();
            $.delUrlVal('date_start');
            $.delUrlVal('date_end');
            return $('#js-main-invoice-table').sklad('updateTable');
          }
        };
        button2.push(btn4);
        button2.push(btn1);
        button2.push(btn2);
        button2.push(btn3);
        thDate.menuRightClick({
          'buttons': button2
        });
        tr.append($('<th/>', {
          'colspan': 4,
          'html': 'Товарно-транспортные накладные'
        }));
        tr.append($('<th/>', {
          'rowspan': 2,
          'html': 'статус заказа'
        }));
        thead.append(tr);
        tr = $('<tr/>');
        tr.append($('<th/>', {
          'id': 'defttn1',
          'html': '№'
        }));
        tr.append($('<th/>', {
          'id': 'defttn2',
          'html': 'дата'
        }));
        tr.append($('<th/>', {
          'id': 'defttn3',
          'html': 'статус'
        }));
        tr.append($('<th/>', {
          'html': 'кем, когда'
        }));
        return thead.append(tr);
      };

      sklad.prototype.updateHead = function() {
        return this.$el.find('thead').replaceWith(this.greateHead);
      };

      sklad.prototype.init = function() {
        var _this, i, id, j, k, len, ref, ref1, rowspan;
        _this = this;
        this.$el.addClass('sklad');
        this.updateHead();
        _this = this;
        this.$el.find('tbody').html('');

        /*
         * выгрузка первой страницы
         */
        len = Number(this.options.data.length);
        this.Pmax = this.Prange;
        this.Pmin = this.PminStart;
        if (len < this.Pmax) {
          this.Pmax = len;
        }
        id = 0;
        for (i = j = ref = this.Pmin, ref1 = this.Pmax; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
          rowspan = 0;
          if (id !== this.options.data[i].invoice_id) {
            rowspan = 1;
            id = this.options.data[i].invoice_id;
            k = i + 1;
            while (this.options.data[k] !== void 0 && this.options.data[k].invoice_id === id) {
              rowspan++;
              k++;
            }
          }
          this.$el.find('tbody').append(new skladRow(this.options.data[i], this.access, rowspan));
        }

        /*
         * кнопка показать ещё
         */
        if ($('#js-main-invoice-show-rows').length > 0) {
          $('#js-main-invoice-show-rows').remove();
        }
        $('#js-main-invoice-div').append(this.showMore = $('<div/>', {
          'id': 'js-main-invoice-show-rows',
          'html': 'Показать ещё ' + this.Pmax + '/' + len,
          'data-c': len
        }));
        return this.showMore.click(function() {
          return _this.addMoreRows();
        });
      };

      sklad.prototype.addMoreRows = function() {
        var Pmin, i, j, ref, ref1, t, text;
        text = 'Показать еще ' + this.Pmax + '/' + this.showMore.data().c;
        Pmin = this.Pmax;
        this.Pmin = this.Pmax + 1;
        this.Pmax = this.Pmax + this.Prange;
        if (Number(this.showMore.data().c) < this.Pmax) {
          this.Pmax = Number(this.showMore.data().c);
          text = 'Показано строк ' + this.Pmax + '/' + this.showMore.data().c;
        }
        if (Pmin === this.Pmax) {
          return echo_message_js("На страницу уже выгружены все счета " + Pmin + " / " + this.Pmax);
        }
        for (i = j = ref = this.Pmin, ref1 = this.Pmax; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
          this.$el.find('tbody').append(this.createRow(this.options.data[i]));
        }
        this.showMore.html(text);
        t = $(window).scrollTop() + $(window).height() - 100;
        if (t > 0) {
          return $("html, body").animate({
            scrollTop: t
          }, 600);
        }
      };

      sklad.prototype.updateRows = function() {
        this.$el.find('tbody').html('');
        return this.init();
      };

      sklad.prototype.getTtnRow = function(row, ttn, i) {
        var _this, check, d, divw, number, tr;
        _this = this;
        tr = $('<div/>', {
          'id': ttn.id,
          'class': 'row'
        }).data(ttn);
        if (ttn.number <= 0) {
          number = 'запрос';
        } else {
          number = ttn.number;
        }
        tr.append(d = $('<div/>', {
          'class': 'defttn1 cell',
          'html': number,
          click: function() {
            var t;
            t = $(this);
            return new sendAjax('get_ttn', {
              'id': row.id
            }, function(response) {
              if (response.data !== void 0) {
                return new ttnWindow(t, row, response.data, _this.options.access, ttn);
              }
            });
          }
        }).width(_this.defttn[0]));
        if (ttn.number <= 0) {
          d.addClass('redTD');
        }
        tr.append($('<div/>', {
          'class': 'defttn2 cell',
          'html': ttn.date,
          click: function() {
            var t;
            t = $(this);
            return new sendAjax('get_ttn', {
              'id': row.id
            }, function(response) {
              if (response.data !== void 0) {
                return new ttnWindow(t, row, response.data, _this.options.access, ttn);
              }
            });
          }
        }).width(_this.defttn[1]));
        if (ttn["return"] !== null && Number(ttn["return"]) === 1) {
          check = ' checked';
        } else {
          check = '';
        }
        divw = $('<div/>', {
          html: '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',
          'class': 'defttn3 cell invoice-row--ttn--vt invoice-row--checkboxtd' + check,
          'data-id': ttn.id,
          click: function() {
            var t;
            if (_this.options.access !== 2) {
              $(this).prev().click();
              return false;
            }
            console.log;
            if (Number(ttn["return"]) === 0) {
              t = $(this);
              ttn["return"] = ++ttn["return"] & 1;
              t.addClass('checked');
              new sendAjax('ttn_was_returned', {
                id: row.ttn[i].id,
                val: ttn["return"]
              });
              return console.log;
            } else {
              ttn["return"] = ++ttn["return"] & 1;
              $(this).removeClass('checked');
              return new sendAjax('ttn_was_returned', {
                id: row.ttn[i].id,
                val: ttn["return"]
              });
            }
          }
        }).width(_this.defttn[2]);
        tr.append(divw).data(ttn);
        return tr;
      };

      return sklad;

    })();
    return $.fn.extend({
      sklad: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('sklad');
          if (!data) {
            $this.data('sklad', (data = new sklad(this, option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);


  /*
   * прототип html строки прихода
   */

  skladRow = (function() {
    skladRow.prototype.defaults = {
      id: 0,
      invoice_id: 0,
      invoice_number: 0,
      number: 0,
      date: getDateNow(),
      price: 0,
      percent: 0,
      create: getDateNow(),
      buch_id: 0,
      buch_name: 'Default Name',
      edit: 0,
      del: 0
    };

    skladRow.prototype.enterObj = {};

    skladRow.prototype.options = {};

    skladRow.prototype.access = 0;

    function skladRow(data, access, rowspan) {
      var el, key;
      if (rowspan == null) {
        rowspan = 1;
      }
      if (data.edit === void 0) {
        data.edit = 1;
      }
      this.access = access;
      for (key in data) {
        el = data[key];
        this.options[key] = el;
      }
      this.options = data;
      return this.init(rowspan);
    }

    skladRow.prototype.firstRow = function(rowspan) {
      var doc_type, self, td, tr;
      self = this;
      tr = $('<tr/>', {
        'class': 'firstRow',
        id: 'sklad_row_' + self.options.ttn_id
      }).data(self.options);
      if (self.options.doc_type === 'spec') {
        self.options.spf_num = self.options.doc_num;
        doc_type = 'счёт';
      } else {
        self.options.spf_num = 'оф';
        doc_type = 'счёт - оферта';
      }
      td = $('<td/>', {
        'rowspan': rowspan,
        'class': 'invoice-row--fist-td',
        click: function() {
          var t;
          t = $(this);
          return new sendAjax('get_ttn', {
            'id': self.options.id
          }, function(response) {
            return new invoiceWindow(t, self.options, response.data, self.access);
          });
        }
      });
      td.append($('<div/>', {
        'class': 'invoice-row--number',
        'html': '<span>' + self.options.invoice_num + '</span>  ' + self.options.invoice_create_date
      }));
      tr.append(td);
      tr.append($('<td/>', {
        'rowspan': rowspan
      }).append($('<div/>', {
        'class': 'invoice-row--order-number',
        'html': self.options.invoice_num
      })).append($('<div/>', {
        'class': 'invoice-row--meneger--full-name',
        'html': self.options.manager_name
      })));
      td = $('<td/>', {
        'rowspan': rowspan
      }).append($('<div/>', {
        'class': 'invoice-row--client--name',
        'html': self.options.client_name
      })).append($('<div/>', {
        'class': 'invoice-row--client--requsits',
        'data-id': self.options.client_requisit_id,
        'html': self.options.client_requisit_name
      }));
      tr.append(td);
      tr.append(self.subRow(rowspan));
      return tr.append($('<td/>', {
        'rowspan': rowspan,
        'html': self.options.status
      }));
    };

    skladRow.prototype.subRow = function(rowspan) {
      var btn1, btn2, button2, delivery_td, self, status_shipment, status_str, td_date, tr, when_ho;
      self = this;
      tr = [];
      tr.push(delivery_td = $('<td/>'));
      if (self.options.delivery === 'no_delivery') {
        delivery_td.html('Самовывоз');
      } else {
        delivery_td.html('Доставка');
      }
      console.log(self.options.ttn_shipment_date_color, self.options.ttn_id);
      tr.push(td_date = $('<td/>', {
        'html': self.options.date_shipment
      }));
      if (self.options.ttn_shipment_date_color !== void 0) {
        td_date.css({
          'background': self.options.ttn_shipment_date_color
        });
      }
      tr.push($('<td/>', {
        'html': self.options.number,
        'class': 'mayBeClick',
        click: function() {
          var t;
          t = $(this);
          return new sendAjax('get_ttn', {
            'id': self.options.id
          }, function(response) {
            if (response.data !== void 0) {
              return new ttnWindow(t, self.options, response.data, self.access, self.options);
            }
          });
        }
      }));
      tr.push($('<td/>', {
        'html': self.options.ttn_date
      }));
      status_str = 'Отгружено';
      if (Number(self.options.shipment_status) === 0) {
        status_str = 'Не отгружено';
      }
      tr.push(status_shipment = $('<td/>', {
        'html': status_str,
        'class': 'mayBeClick'
      }));
      tr.push(when_ho = $('<td/>'));
      if (Number(self.options.shipment_employee_id) > 0) {
        when_ho.html(self.options.shipment_employee + '; ' + self.options.shipment_status_last_edit);
      }
      button2 = [];
      btn1 = {
        'name': 'Отгружено',
        'class': '',
        click: function(e) {
          self.options.shipment_status = 1;
          status_shipment.html($(this).html());
          console.log(rowspan, self.options);
          return new sendAjax('edit_ttn_status', {
            'id': self.options.ttn_id,
            'invoice_num': self.options.invoice_num,
            'manager_name': self.options.manager_name,
            'manager_id': self.options.manager_id,
            'client_name': self.options.client_name,
            'client_id': self.options.client_id,
            'number': self.options.number,
            shipment_status: self.options.shipment_status
          }, function(response) {
            when_ho.html(response.data.when_ho);
            console.log("отправлен объект ", self.options.shipment_status);
            return $('#js-main-invoice-table').sklad('reflesh', self.options);
          });
        }
      };
      btn2 = {
        'name': 'Не отгружено',
        'class': '',
        click: function(e) {
          console.log(rowspan, self.options);
          return new modalConfirm({
            html: 'Уверены, что неотгружено?<br>продолжить?'
          }, function() {
            self.options.shipment_status = 0;
            status_shipment.html($(this).html());
            return new sendAjax('edit_ttn_status', {
              'id': self.options.ttn_id,
              'invoice_num': self.options.invoice_num,
              'manager_name': self.options.manager_name,
              'client_name': self.options.client_name,
              'manager_id': self.options.manager_id,
              'client_id': self.options.client_id,
              'number': self.options.number,
              shipment_status: self.options.shipment_status
            }, function(response) {
              when_ho.html(response.data.when_ho);
              return $('#js-main-invoice-table').sklad('reflesh', self.options);
            });
          });
        }
      };
      button2.push(btn1);
      button2.push(btn2);
      if (this.access === 7) {
        status_shipment.menuRightClick({
          'buttons': button2
        });
      }
      if (rowspan === 0) {
        tr = $('<tr/>', {
          'class': 'subRow',
          id: 'sklad_row_' + self.options.ttn_id
        }).data(self.options).append(tr);
      }
      return tr;
    };

    skladRow.prototype.init = function(rowspan) {
      if (rowspan >= 1) {
        return this.firstRow(rowspan);
      } else {
        return this.subRow(rowspan);
      }
    };

    return skladRow;

  })();


  /*
   * cloned the head table and fixed this head on top in user window
   *
   * @see       top header
   * @author    Alexey Kapitonov
   * @email     kapitonoval2012@gmail.com
   * @version   13.04.2016 16:24:30
   */

  $(window).scroll(function() {
    var div, el_cloned, thead;
    if ($(this).scrollTop() > $('#js-main-invoice-table').offset().top) {
      if ($(this).scrollTop() === $(document).height() - $(window).height()) {
        if ($('#js-main-invoice-show-rows').length > 0) {
          $('#js-main-invoice-show-rows').stop().animate({
            'bottom': '15px'
          }, 100);
        }
      } else {
        if ($('#js-main-invoice-show-rows').length > 0) {
          $('#js-main-invoice-show-rows').stop().animate({
            'bottom': '-45px'
          }, 100);
        }
      }
      if ($('#js-main-invoice-table-clone').length === 0) {
        el_cloned = $('#js-main-invoice-table thead');
        thead = el_cloned.clone();
        thead.find('tr').each(function(index) {
          thead.find('tr').eq(index).find('th').each(function(ind) {
            thead.find('tr').eq(index).find('th').eq(ind).width(el_cloned.find('tr').eq(index).find('th').eq(ind).width() + 1);
          });
        });
        div = $('<div/>', {
          'id': 'js-main-invoice-table-clone'
        }).append($('<table/>').append(thead)).css({
          'position': 'fixed',
          'top': '0',
          'left': '0',
          'width': '100%'
        });
        div.appendTo('body');
        if ($('#js-main-invoice-table').hasClass('sklad')) {
          div.addClass('sklad');
        }
      } else {
        $('#js-main-invoice-table-clone').css({
          'display': 'block'
        });
      }
      return $('#invoice-button-top').stop().animate({
        right: '15px',
        bottom: '15px',
        width: '40px',
        height: '40px',
        'opacity': 0.6
      }, 100);
    } else {
      if ($('#js-main-invoice-table-clone').length > 0) {
        $('#js-main-invoice-table-clone').css({
          'display': 'none'
        });
      }
      return $('#invoice-button-top').stop().animate({
        right: '35px',
        bottom: '35px',
        width: '0px',
        height: '0px',
        'opacity': 0
      }, 100);
    }
  });

  $(document).on('click', '#invoice-button-top', function(event) {
    return $("html, body").animate({
      scrollTop: 0
    }, 600);
  });

}).call(this);

//# sourceMappingURL=invoice.js.map
