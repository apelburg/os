// Generated by CoffeeScript 1.10.0
var calc_price_width_discount, getInvoiceData, round_money,
  slice = [].slice;

getInvoiceData = function(type) {
  if (type == null) {
    type = "new";
  }
  $.ajax({
    url: "",
    type: "POST",
    data: {
      AJAX: 'get_data'
    },
    dataType: "json",
    error: function(jqXHR, textStatus, errorThrown) {
      echo_message_js("AJAX Error: " + textStatus);
    },
    success: function(data, textStatus, jqXHR) {
      standard_response_handler(jqXHR.responseJSON);
      $('#invoceData').html(jqXHR.responseText);
      if (type === 'new') {
        return $('#js-main-invoice-table').invoice();
      }
    }
  });
  return true;
};

$(document).ready(function() {
  return getInvoiceData();
});

round_money = function(num) {
  var new_num;
  num = Number(num);
  new_num = Math.ceil(num * 100) / 100;
  return num.toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1");
};

calc_price_width_discount = function(price_out, discount) {
  return Number(price_out / 100) * (100 + Number(discount));
};


/*
 * jQuery plagin Invoice
 *
 * @see       invoise table
 * @author    Alexey Kapitonov
 * @email     kapitonoval2012@gmail.com
 * @version   13.04.2016 16:26:46
 */

(function($, window) {

  /*
   * Define the plugin class ttn
   */
  var invoice, ttn;
  ttn = (function() {
    var class1;

    function ttn() {
      return class1.apply(this, arguments);
    }

    ttn.prototype.defaults = {
      number: 0
    };

    class1 = {
      constructor: function(el, options) {
        return this.options = $.extend({}, this.defaults, this.options);
      }
    };

    ttn.prototype.init = function() {
      return console.log("init");
    };

    ttn.prototype.show = function() {
      return console.log("show");
    };

    ttn.prototype.destroy = function() {
      return console.log("destroy");
    };

    return ttn;

  })();

  /*
   * Define the plugin class Invoice
   */
  invoice = (function() {
    invoice.prototype.defaults = {
      start: false
    };

    invoice.prototype.access_def = 0;

    invoice.prototype.response_def = {};

    function invoice(el, options) {
      this.options = $.extend({}, this.defaults, jQuery.parseJSON($('#invoceData').html()));
      this.access = $.extend({}, this.access_def, this.options.access);
      this.$el = $(el);
      this.init();
    }

    invoice.prototype.myMethod = function(echo) {
      return this.$el.html(this.options.paramA + ': ' + echo);
    };

    invoice.prototype.init = function(echo) {
      var j, len, n, ref, results;
      ref = this.options.data;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        n = ref[j];
        results.push(this.createRow(n));
      }
      return results;
    };

    invoice.prototype.printOptions = function() {
      console.info(this.options.access);
      return console.info(this.options.data);
    };

    invoice.prototype.updateRows = function() {
      this.destroyRows();
      return this.init();
    };

    invoice.prototype.destroyRows = function() {
      return this.$el.find('tbody').html('');
    };

    invoice.prototype.setData = function(ajax_name, options) {
      var _this, data, k, response, v;
      if (options == null) {
        options = {};
      }
      _this = this;
      data = {
        AJAX: ajax_name
      };
      for (k in options) {
        v = options[k];
        data[k] = v;
      }
      response = {};
      return $.ajax({
        url: "",
        type: "POST",
        data: data,
        dataType: "json",
        error: function(jqXHR, textStatus, errorThrown) {
          echo_message_js("AJAX Error: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
          response = jqXHR.responseJSON;
          return standard_response_handler(response);
        }
      });
    };

    invoice.prototype.updateData = function() {
      console.log("updateData");
      return $('#invoceData').html(JSON.stringify(this.options));
    };


    /*
     * confirm dialog
     */

    invoice.prototype.createSmallDialog = function(html, title, buttons) {
      var button, button_n, buttons_html, i, j, len;
      if (html == null) {
        html = 'текст не был передан';
      }
      if (title == null) {
        title = 'имя окна не было передано';
      }
      if (buttons == null) {
        buttons = {};
      }
      if ($('#js-alert_union').length > 0) {
        $('#js-alert_union').remove();
      }
      $('body').append($('<div/>', {
        "id": 'js-alert_union',
        "style": "height:45px;",
        'html': html
      }));
      $('#js-alert_union').dialog({
        width: 'auto',
        height: 'auto',
        modal: true,
        title: title,
        autoOpen: true,
        closeOnEscape: false
      }).parent();
      buttons_html = $('<table></table>');
      for (i = j = 0, len = buttons.length; j < len; i = ++j) {
        button_n = buttons[i];
        button = $('<button/>', {
          text: button_n['text'],
          click: button_n['click']
        });
        if (button_n['class']) {
          button.attr('class', button_n['class']);
        }
        if (button_n['id']) {
          button.attr('id', button_n['id']);
        }
        buttons_html.append($('<td/>').append(button));
      }
      return $('#js-alert_union').after($('<div/>', {
        'id': 'js-alert_union_buttons',
        'class': 'ui-dialog-buttonpane ui-widget-content ui-helper-clearfix'
      }).append(buttons_html));
    };


    /*
     * get data
     */

    invoice.prototype.getData = function(ajax_name, options, func) {
      var _this, data, k, response, v;
      if (options == null) {
        options = {};
      }
      if (func == null) {
        func = function() {};
      }
      _this = this;
      data = {
        AJAX: ajax_name
      };
      for (k in options) {
        v = options[k];
        data[k] = v;
      }
      response = {};
      $.ajax({
        url: "",
        type: "POST",
        data: data,
        dataType: "json",
        error: function(jqXHR, textStatus, errorThrown) {
          echo_message_js("AJAX Error: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
          response = jqXHR.responseJSON;
          _this.response = $.extend({}, _this.response_def, response);
          standard_response_handler(response);
          return func();
        }
      });
    };


    /*
     * create ttn
     */

    invoice.prototype.createTTN = function(row) {
      var _this, buttons;
      _this = this;
      buttons = [
        {
          text: 'Отмена',
          "class": 'button_yes_or_no no',
          click: function() {
            return $('#js-alert_union').dialog('destroy').remove();
          }
        }, {
          text: 'Запросить',
          "class": 'button_yes_or_no',
          click: function() {
            return $('#js-alert_union').dialog('destroy').remove();
          }
        }
      ];
      return this.getData('get_ttn', {
        'id': row.id
      }, function() {
        var check, i, j, len, main_price, message, nds, position, pr_out, responseData, table, td, tr;
        responseData = _this.response.data;
        table = $('<table/>', {
          'id': 'js-invoice--window--ttn-table'
        });
        i = 1;
        if (responseData !== void 0) {
          table.append(tr = $('<tr/>'));
          check = $('<input/>', {
            'type': 'checkbox'
          });
          td = $('<th/>').append(check);
          tr.append(td);
          td = $('<th/>', {
            'text': '№'
          });
          tr.append(td);
          td = $('<th/>', {
            'html': 'Наименование и <br>описание продукции'
          });
          tr.append(td);
          td = $('<th/>', {
            'html': 'Количество<br>продукции'
          });
          tr.append(td);
          td = $('<th/>', {
            'html': 'стоимость<br>за штуку'
          });
          tr.append(td);
          td = $('<th/>', {
            'html': 'Общая<br>стоимость'
          });
          tr.append(td);
          main_price = 0;
          nds = 0;
          for (j = 0, len = responseData.length; j < len; j++) {
            position = responseData[j];
            tr = $('<tr/>').data(position);
            check = $('<input/>', {
              'type': 'checkbox'
            });
            td = $('<td/>').append(check);
            tr.append(td);
            td = $('<td/>').append(i);
            tr.append(td);
            td = $('<td/>').append(position.name);
            tr.append(td);
            td = $('<td/>').append(position.quantity);
            tr.append(td);
            pr_out = calc_price_width_discount(position.price, position.discount);
            td = $('<td/>').append(round_money(pr_out) + ' р.');
            tr.append(td);
            main_price += pr_out * position.quantity;
            nds += Number(round_money(pr_out * position.quantity / 118 * 18));
            td = $('<td/>').append(round_money(pr_out * position.quantity) + ' р.');
            tr.append(td);
            i++;
            table.append(tr);
          }
          table.append(tr = $('<tr/>'));
          td = $('<th/>');
          tr.append(td);
          td = $('<th/>', {
            'colspan': '4',
            'html': 'Итоговая сумма по данной спецификации (договору)'
          });
          tr.append(td);
          td = $('<th/>', {
            'html': round_money(main_price) + ' р.'
          });
          tr.append(td);
          table.append(tr);
          table.append(tr = $('<tr/>'));
          td = $('<th/>');
          tr.append(td);
          td = $('<th/>', {
            'colspan': '4',
            'html': 'В т.ч. НДС 18%'
          });
          tr.append(td);
          td = $('<th/>', {
            'html': round_money(nds) + ' р.'
          });
          tr.append(td);
          table.append(tr);
          message = $('<div/>').append(table);
          return _this.createSmallDialog(message, 'Запрос ТТН', buttons);
        }
      });
    };


    /*
     * create tr
     */

    invoice.prototype.createRow = function(row) {
      var _this, doc_type, td, tr;
      _this = this;
      console.log(654);
      tr = $('<tr/>', {
        id: 'tt_' + row.id
      }).data(row);
      if (row.doc_type === 'spec') {
        row.spf_num = row.doc_num;
        doc_type = 'счёт';
      } else {
        row.spf_num = 'оф';
        doc_type = 'счёт - оферта';
      }
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--number',
        'html': '<span>' + row.invoice_num + '</span>  ' + row.invoice_create_date
      })).append($('<div/>', {
        'class': 'invoice-row--checkboxtd checked',
        'html': doc_type
      }));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--checkboxtd'
      }).append($('<div/>', {
        'class': 'invoice-row--checkboxtd-div'
      }));
      td.click(function() {
        if ($(this).hasClass('checked')) {
          row.flag_1c = 0;
          $(this).removeClass('checked');
        } else {
          row.flag_1c = 1;
          $(this).addClass('checked');
        }
        _this.setData('edit_flag_1c', {
          id: row.id,
          val: row.flag_1c
        });
      });
      if (Number(row.flag_1c > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--price-profit',
        'html': round_money(row.price_out)
      })).append($('<div/>', {
        'class': 'invoice-row--price-payment',
        'html': round_money(row.price_out_payment)
      }));
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--order-number',
        'html': row.invoice_num
      })).append($('<div/>', {
        'class': 'invoice-row--meneger--full-name',
        'html': row.manager_name
      }));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--icons-flag'
      }).append($('<div/>', {
        'class': 'invoice-row--checkboxtd-div'
      }));
      td.click(function() {
        var buttons, message, t;
        if ($(this).hasClass('checked')) {
          if (Number(_this.options.access) !== 1) {
            console.log(_this.options.access);
            echo_message_js('Снять рекламацию может только администратор', 'error_message');
            return false;
          }
          row.flag_flag = 0;
          $(this).removeClass('checked');
          _this.setData('edit_flag_flag', {
            id: row.id,
            val: row.flag_flag
          });
        } else {
          if (Number(_this.options.access) !== 5 && Number(_this.options.access) !== 1) {
            echo_message_js('Рекламацию устанавливает только менеджер', 'error_message');
            return false;
          }
          t = $(this);
          buttons = [
            {
              text: 'Да',
              "class": 'button_yes_or_no',
              click: function() {
                row.flag_flag = 1;
                t.addClass('checked');
                _this.setData('edit_flag_flag', {
                  id: row.id,
                  val: row.flag_flag
                });
                return $('#js-alert_union').dialog('destroy').remove();
              }
            }, {
              text: 'Нет',
              "class": 'button_yes_or_no yes',
              click: function() {
                return $('#js-alert_union').dialog('destroy').remove();
              }
            }
          ];
          message = 'Вы уверены, что хотите установить флаг рекламации?';
          _this.createSmallDialog(message, 'Подтверждение действия', buttons);
        }
      });
      if (Number(row.flag_flag > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--client--name',
        'html': row.client_name
      })).append($('<div/>', {
        'class': 'invoice-row--client--requsits',
        'data-id': row.client_requisit_id,
        'html': row.client_requisit_name
      }));
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--price-start',
        'html': row.price_in
      })).append($('<div/>', {
        'class': 'invoice-row--price-our-pyment',
        'html': row.client_requisit_name
      }));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--ice'
      });
      td.click(function() {
        if ($(this).hasClass('checked')) {
          row.flag_ice = 0;
          $(this).removeClass('checked');
        } else {
          row.flag_ice = 1;
          $(this).addClass('checked');
        }
        _this.setData('edit_flag_ice', {
          id: row.id,
          val: row.flag_ice
        });
      });
      if (Number(row.flag_ice > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--price-our-profit',
        'html': round_money(row.price_out - row.price_in)
      })).append($('<div/>', {
        'class': 'invoice-row--price-our-profit-percent',
        'html': round_money(((row.price_out - row.price_in) / row.price_out * 100).toString()) + '%'
      }));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--icons-calculator'
      });
      td.click(function() {
        if ($(this).hasClass('checked')) {
          row.flag_calc = 0;
          $(this).removeClass('checked');
        } else {
          row.flag_calc = 1;
          $(this).addClass('checked');
        }
        _this.setData('edit_flag_calc', {
          id: row.id,
          val: row.flag_calc
        });
      });
      if (Number(row.flag_calc > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      if (row.ttn.length === 0 && this.options.access !== 2) {
        td = $('<td/>', {
          'colspan': '3',
          'html': "Запросить",
          'class': 'js-query-ttn',
          click: function() {
            return _this.createTTN(row);
          }
        });
      } else {
        td = $('<td/>', {
          'colspan': '3'
        });
      }
      tr.append(td);
      td = $('<td/>').append($('<div/>').html(row.spf_num));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--ttn--vt invoice-row--checkboxtd'
      });
      td.click(function() {
        if ($(this).hasClass('checked')) {
          row.flag_spf_return = 0;
          $(this).removeClass('checked');
        } else {
          row.flag_spf_return = 1;
          $(this).addClass('checked');
        }
        _this.setData('edit_flag_spf_return', {
          id: row.id,
          val: row.flag_spf_return
        });
      });
      if (Number(row.flag_spf_return > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      return this.$el.find('tbody').append(tr);
    };

    return invoice;

  })();
  return $.fn.extend({
    invoice: function() {
      var args, option;
      option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data('invoice');
        if (!data) {
          $this.data('invoice', (data = new invoice(this, option)));
        }
        if (typeof option === 'string') {
          return data[option].apply(data, args);
        }
      });
    }
  });
})(window.jQuery, window);


/*
 * cloned the head table and fixed this head on top in user window
 *
 * @see       top header
 * @author    Alexey Kapitonov
 * @email     kapitonoval2012@gmail.com
 * @version   13.04.2016 16:24:30
 */

$(window).scroll(function() {
  var div, el_cloned, thead;
  if ($(this).scrollTop() > $('#js-main-invoice-table').offset().top) {
    if ($('#js-main-invoice-table-clone').length === 0) {
      el_cloned = $('#js-main-invoice-table thead');
      thead = el_cloned.clone();
      thead.find('tr').each(function(index) {
        thead.find('tr').eq(index).find('th').each(function(ind) {
          thead.find('tr').eq(index).find('th').eq(ind).width(el_cloned.find('tr').eq(index).find('th').eq(ind).width() + 1);
        });
      });
      div = $('<div/>', {
        'id': 'js-main-invoice-table-clone'
      }).append($('<table/>').append(thead)).css({
        'position': 'fixed',
        'top': '0',
        'left': '0',
        'width': '100%'
      });
      div.appendTo('body');
    } else {
      $('#js-main-invoice-table-clone').css({
        'display': 'block'
      });
    }
    return $('#invoice-button-top').show();
  } else {
    if ($('#js-main-invoice-table-clone').length > 0) {
      $('#js-main-invoice-table-clone').css({
        'display': 'none'
      });
    }
    return $('#invoice-button-top').hide();
  }
});

$(document).on('click', '#invoice-button-top', function(event) {
  return $("html, body").animate({
    scrollTop: 0
  }, 600);
});
