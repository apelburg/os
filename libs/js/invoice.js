// Generated by CoffeeScript 1.10.0
var getInvoiceData,
  slice = [].slice;

getInvoiceData = function(type) {
  if (type == null) {
    type = "new";
  }
  $.ajax({
    url: "",
    type: "POST",
    data: {
      AJAX: 'get_data'
    },
    dataType: "json",
    error: function(jqXHR, textStatus, errorThrown) {
      echo_message_js("AJAX Error: " + textStatus);
    },
    success: function(data, textStatus, jqXHR) {
      standard_response_handler(jqXHR.responseJSON);
      $('#invoceData').html(jqXHR.responseText);
      if (type === 'new') {
        return $('#js-main-invoice-table').invoice();
      }
    }
  });
  return true;
};

$(document).ready(function() {
  return getInvoiceData();
});

(function($, window) {
  var invoice;
  invoice = (function() {
    invoice.prototype.defaults = {
      start: false
    };

    invoice.prototype.access_def = 0;

    function invoice(el, options) {
      console.log(this.options);
      this.options = $.extend({}, this.defaults, jQuery.parseJSON($('#invoceData').html()));
      this.access = $.extend({}, this.access_def, this.options.access);
      this.$el = $(el);
      this.init();
    }

    invoice.prototype.myMethod = function(echo) {
      return this.$el.html(this.options.paramA + ': ' + echo);
    };

    invoice.prototype.init = function(echo) {
      var i, len, n, ref, results;
      ref = this.options.data;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        n = ref[i];
        results.push(this.createRow(n));
      }
      return results;
    };

    invoice.prototype.printOptions = function() {
      return console.log(this.options.data);
    };

    invoice.prototype.updateRows = function() {
      this.destroyRows();
      return this.init();
    };

    invoice.prototype.destroyRows = function() {
      return this.$el.find('tbody').html('');
    };

    invoice.prototype.setData = function(ajax_name, options) {
      var _this, data, k, response, v;
      if (options == null) {
        options = {};
      }
      _this = this;
      data = {
        AJAX: ajax_name
      };
      for (k in options) {
        v = options[k];
        data[k] = v;
      }
      console.log(data);
      response = {};
      return $.ajax({
        url: "",
        type: "POST",
        data: data,
        dataType: "json",
        error: function(jqXHR, textStatus, errorThrown) {
          echo_message_js("AJAX Error: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
          response = jqXHR.responseJSON;
          standard_response_handler(response);
          return _this.updateData();
        }
      });
    };

    invoice.prototype.updateData = function() {
      console.log("updateData");
      return $('#invoceData').html(JSON.stringify(this.options));
    };

    invoice.prototype.createRow = function(row) {
      var _this, doc_type, td, tr;
      _this = this;
      console.log(654);
      tr = $('<tr/>');
      if (row.doc_type === 'spec') {
        doc_type = 'счёт';
      } else {
        doc_type = 'счёт - оферта';
      }
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--number',
        'html': '<span>' + row.invoice_num + '</span>  ' + row.invoice_create_date
      })).append($('<div/>', {
        'class': 'invoice-row--checkboxtd checked',
        'html': doc_type
      }));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--checkboxtd'
      }).append($('<div/>', {
        'class': 'invoice-row--checkboxtd-div'
      }));
      td.click(function() {
        if ($(this).hasClass('checked')) {
          row.flag_1c = 0;
          $(this).removeClass('checked');
        } else {
          row.flag_1c = 1;
          $(this).addClass('checked');
        }
        _this.setData('edit_flag_1c', {
          id: row.id,
          val: row.flag_1c
        });
      });
      if (Number(row.flag_1c > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--price-profit',
        'html': row.price_out
      })).append($('<div/>', {
        'class': 'invoice-row--price-payment',
        'html': row.price_out_payment
      }));
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--order-number'
      }).append($('<input/>', {
        'value': row.invoice_num,
        'keyup': function(e) {
          row.invoice_num = Number($(this).val());
          return t.updateData();
        }
      }))).append($('<div/>', {
        'class': 'invoice-row--meneger--full-name',
        'html': row.manager_name
      }));
      tr.append(td);
      td = $('<td/>', {
        'class': 'invoice-row--icons-flag'
      }).append($('<div/>', {
        'class': 'invoice-row--checkboxtd-div'
      }));
      td.click(function() {
        if ($(this).hasClass('checked')) {
          row.flag_flag = 0;
          $(this).removeClass('checked');
        } else {
          row.flag_flag = 1;
          $(this).addClass('checked');
        }
        _this.setData('edit_flag_flag', {
          id: row.id,
          val: row.flag_flag
        });
      });
      if (Number(row.flag_flag > 0)) {
        td.addClass('checked');
      }
      tr.append(td);
      td = $('<td/>').append($('<div/>', {
        'class': 'invoice-row--client--name',
        'html': row.client_name
      })).append($('<div/>', {
        'class': 'invoice-row--client--requsits',
        'data-id': row.client_requisit_id,
        'html': row.client_requisit_name
      }));
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      td = $('<td/>');
      tr.append(td);
      return this.$el.find('tbody').append(tr);
    };

    return invoice;

  })();
  return $.fn.extend({
    invoice: function() {
      var args, option;
      option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data('invoice');
        if (!data) {
          $this.data('invoice', (data = new invoice(this, option)));
        }
        if (typeof option === 'string') {
          return data[option].apply(data, args);
        }
      });
    }
  });
})(window.jQuery, window);
