// Generated by CoffeeScript 1.9.3

/*
 *
 * right contexts menu
 *
 * @author    Alexey Kapitonov
 * @version   13.05.2016 14:20
 */

(function() {
  var slice = [].slice;

  (function($, window) {
    var menuClick;
    menuClick = (function() {
      menuClick.prototype.defaults = {
        buttons: [
          {
            'name': 'тестовый пункт по умолчанию',
            'class': '',
            click: function(e) {
              return echo_message_js(this.name);
            }
          }
        ],
        click: 'rightClick'
      };

      function menuClick(el, options) {
        var self;
        this.options = $.extend({}, this.defaults, options);
        this.$el = $(el);
        self = this;
        this.$el.on('contextmenu click', function(e) {
          return self[self.options.click](e);
        });
      }

      menuClick.prototype.rightClick = function(event) {
        event.preventDefault();
        console.log(event.button);
        if (event.button === 2) {
          this.initMenu(event);
        }
      };

      menuClick.prototype.leftClick = function(event) {
        event.preventDefault();
        if (event.button === 0) {
          this.initMenu(event);
        }
      };

      menuClick.prototype.getLiObj = function(list_item) {
        var func, self;
        self = this;
        func = list_item.click;
        return $('<li/>', {
          'class': list_item["class"],
          'html': list_item.name,
          click: function() {
            func();
            return self.context.remove();
          }
        });
      };

      menuClick.prototype.initMenu = function(event) {
        var i, len, list_item, menu, ref, self;
        self = this;
        if ($("#context-menu").length > 0) {
          $("#context-menu").remove();
        }
        this.context = $('<div/>', {
          'class': 'context-menu',
          'id': 'context-menu',
          click: function(e) {
            return e.stopPropagation();
          }
        }).css({
          left: event.pageX + 'px',
          top: (event.pageY - 15) + 'px'
        });
        menu = $('<ul/>');
        ref = this.options.buttons;
        for (i = 0, len = ref.length; i < len; i++) {
          list_item = ref[i];
          this.getLiObj(list_item).appendTo(menu);
        }
        $(document).mouseup(function(e) {
          if (!self.context.is(e.target) && self.context.has(e.target).length === 0) {
            return self.context.remove();
          }
        });
        return this.context.append(menu).appendTo('body').show('fast').css('marginLeft', '-20px');
      };

      return menuClick;

    })();
    return $.fn.extend({
      menuClick: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('menuClick');
          if (!data) {
            $this.data('menuClick', (data = new menuClick(this, option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);

}).call(this);

//# sourceMappingURL=menuClick.js.map
