// Generated by CoffeeScript 1.10.0

/*
 * class Invoice
 *
 * @author    Alexey Kapitonov
 * @email     kapitonoval2012@gmail.com
 * @version   06.06.2016 11:03
 */


/*
 * возвращяет текущую дату в читабельном формате
 */

(function() {
  var calc_price_with_discount, cyrill_to_latin, getDateNow, getDateTomorrow, modalConfirm, modalWindow, round_money, sendAjax,
    slice = [].slice;

  getDateNow = function() {
    var d, dd, mm, yy;
    d = new Date();
    dd = d.getDate();
    if (dd < 10) {
      dd = '0' + dd;
    }
    mm = d.getMonth() + 1;
    if (mm < 10) {
      mm = '0' + mm;
    }
    yy = d.getFullYear();
    return dd + '.' + mm + '.' + yy;
  };


  /*
   * возвращяет текущую дату в читабельном формате
   */

  getDateTomorrow = function() {
    var d, dd, mm, yy;
    d = new Date();
    d.setDate(d.getDate() + 1);
    dd = d.getDate();
    if (dd < 10) {
      dd = '0' + dd;
    }
    mm = d.getMonth() + 1;
    if (mm < 10) {
      mm = '0' + mm;
    }
    yy = d.getFullYear();
    return dd + '.' + mm + '.' + yy;
  };


  /*
   * округляет и приводит числа к денежному формату
   * строку преобразует в число
   */

  round_money = function(num) {
    var new_num;
    num = Number(num);
    new_num = Math.ceil(num * 100) / 100;
    return num.toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1");
  };


  /*
   * подсчет скидки
   * @param      price_out - входящая цена
   * @discount   discount - скидка
   */

  calc_price_with_discount = function(price_out, discount) {
    return Number(price_out / 100) * (100 + Number(discount));
  };


  /*
   * транслитерация
   */

  cyrill_to_latin = function(text) {
    var arren, arrru, i, itm, j, len1, reg;
    arrru = ['Я', 'я', 'Ю', 'ю', 'Ч', 'ч', 'Ш', 'ш', 'Щ', 'щ', 'Ж', 'ж', 'А', 'а', 'Б', 'б', 'В', 'в', 'Г', 'г', 'Д', 'д', 'Е', 'е', 'Ё', 'ё', 'З', 'з', 'И', 'и', 'Й', 'й', 'К', 'к', 'Л', 'л', 'М', 'м', 'Н', 'н', 'О', 'о', 'П', 'п', 'Р', 'р', 'С', 'с', 'Т', 'т', 'У', 'у', 'Ф', 'ф', 'Х', 'х', 'Ц', 'ц', 'Ы', 'ы', 'Ь', 'ь', 'Ъ', 'ъ', 'Э', 'э', ' '];
    arren = ['Ya', 'ya', 'Yu', 'yu', 'Ch', 'ch', 'Sh', 'sh', 'Sh', 'sh', 'Zh', 'zh', 'A', 'a', 'B', 'b', 'V', 'v', 'G', 'g', 'D', 'd', 'E', 'e', 'E', 'e', 'Z', 'z', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'R', 'r', 'S', 's', 'T', 't', 'U', 'u', 'F', 'f', 'H', 'h', 'C', 'c', 'Y', 'y', '`', '`', '\'', '\'', 'E', 'e', '_'];
    for (i = j = 0, len1 = arrru.length; j < len1; i = ++j) {
      itm = arrru[i];
      reg = new RegExp(arrru[i], "g");
      text = text.replace(reg, arren[i]);
    }
    return text;
  };


  /*
   * метод отправки запроса AJAX
   */

  sendAjax = (function() {
    sendAjax.prototype.defaults = {
      AJAX: 'test',
      options: {}
    };

    sendAjax.prototype.func = function() {
      return true;
    };

    sendAjax.prototype.response = {};

    function sendAjax(ajaxName, options, func) {
      var opt;
      if (options == null) {
        options = {};
      }
      if (func == null) {
        func = function() {
          return true;
        };
      }
      this.href = window.location.href;
      if (options.url) {
        this.href = options.url;
        options.url = void 0;
      }
      opt = {
        AJAX: ajaxName,
        options: options
      };
      this.func = func;
      this.options = $.extend({}, this.defaults, opt);
      this.sendAjax();
    }

    sendAjax.prototype.sendAjax = function() {
      var _this, data, k, ref, v;
      _this = this;
      data = {
        AJAX: this.options.AJAX
      };
      ref = this.options.options;
      for (k in ref) {
        v = ref[k];
        data[k] = v;
      }
      return $.ajax({
        url: this.href,
        type: "POST",
        data: data,
        dataType: "json",
        error: function(jqXHR, textStatus, errorThrown) {
          echo_message_js("AJAX Error: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
          _this.response = $.extend({}, _this.response, jqXHR.responseJSON);
          standard_response_handler(_this.response);
          return _this.func(_this.response);
        }
      });
    };

    return sendAjax;

  })();


  /*
   * прототип окна Confirm
   *
   * @version   21.04.2016 11:20:30
   */

  modalConfirm = (function() {
    modalConfirm.prototype.defaults = {
      title: 'Подтвердите действие',
      html: 'Вы уверены'
    };

    function modalConfirm(data, func, func2) {
      var _this;
      if (data == null) {
        data = {};
      }
      if (func == null) {
        func = function() {};
      }
      if (func2 == null) {
        func2 = function() {};
      }
      _this = this;
      this.options = $.extend({}, this.defaults, data);
      this.options.buttons = [
        {
          text: 'Да',
          "class": 'button_yes_or_no no',
          style: 'float:right;',
          click: function() {
            func();
            return $(_this.selfObj.winDiv).dialog('close').dialog('destroy').remove();
          }
        }, {
          text: 'Нет, Спасибо.',
          "class": 'button_yes_or_no no',
          style: 'float:right;',
          click: function() {
            func2();
            return $(_this.selfObj.winDiv).dialog('close').dialog('destroy').remove();
          }
        }
      ];
      this.selfObj = new modalWindow(this.options, {
        single: false
      });
    }

    return modalConfirm;

  })();


  /*
   * прототип окна
   *
   * @param     data = {html='текст не был передан', title='имя окна не было передано', buttons={}}
   * @version   18.04.2016 12:53:01
   */

  modalWindow = (function() {
    modalWindow.prototype.sittings = {
      modal: true,
      autoOpen: true,
      closeOnEscape: false,
      single: true,
      close: function(event, ui) {
        return true;
      },
      beforeClose: function(event, ui) {
        return true;
      }
    };

    modalWindow.prototype.defaults = {
      id: 'js-alert_union',
      title: '*** Название окна ***',
      width: 'auto',
      height: 'auto',
      html: 'Текст в окне',
      buttons: []
    };

    function modalWindow(data, sittings) {
      if (data == null) {
        data = {};
      }
      if (sittings == null) {
        sittings = {};
      }
      this.options = $.extend({}, this.defaults, data);
      this.sittings = $.extend({}, this.sittings, sittings);
      if (this.options.maxWidth && this.options.maxWidth.indexOf('%') + 1) {
        this.options.maxWidth = $(window).width() / 100 * Number(this.options.maxWidth.substring(this.options.maxWidth.length - 1, 0));
      }
      if (this.options.maxHeight && this.options.maxHeight.indexOf('%') + 1) {
        this.options.maxHeight = $(window).height() / 100 * Number(this.options.maxHeight.substring(this.options.maxHeight.length - 1, 0));
      }
      this.init();
    }

    modalWindow.prototype.destroy = function() {
      return this.winDiv.dialog('close').dialog('destroy').remove();
    };

    modalWindow.prototype.init = function() {
      var _this, button, button_n, buttons_html, i, j, len, len1, ref, self, td, tr;
      _this = this;
      if (this.sittings.single) {
        if ($('#js-alert_union').length > 0) {
          $('#js-alert_union').remove();
        }
        $('body').append(this.winDiv = $('<div/>', {
          "id": this.defaults.id,
          "style": "height:45px;",
          'html': this.options.html,
          "class": "js-alert_union"
        }));
      } else {
        len = $('.js-alert_union').length;
        this.defaults.id = this.defaults.id + len;
        $('body').append(this.winDiv = $('<div/>', {
          "id": this.defaults.id,
          "style": "height:45px;",
          'html': this.options.html,
          "class": "js-alert_union"
        }));
      }
      self = this.winDiv.dialog({
        width: this.options.width,
        height: this.options.height,
        modal: this.sittings.modal,
        title: this.options.title,
        autoOpen: this.sittings.autoOpen,
        closeOnEscape: this.sittings.closeOnEscape,
        beforeClose: function(event, ui) {
          return _this.sittings.beforeClose(event, ui);
        },
        close: function(event, ui) {
          return _this.sittings.close(event, ui);
        }
      }).parent();
      if (this.options.buttons.length === 0) {
        this.options.buttons.push({
          text: 'Закрыть',
          "class": 'button_yes_or_no no',
          style: 'float:right;',
          click: function() {
            return $('#' + _this.defaults.id).dialog('close').dialog('destroy').remove();
          }
        });
      }
      this.winDiv.dialog("option", "buttons", {
        buttons: {
          text: 'Закрыть',
          "class": 'button_yes_or_no no',
          style: 'float:right;',
          click: function() {
            return $('#' + _this.defaults.id).dialog('close').dialog('destroy').remove();
          }
        }
      });
      if (this.options.maxHeight) {
        this.winDiv.dialog("option", "maxHeight", this.options.maxHeight);
      }
      if (this.options.maxWidth) {
        this.winDiv.dialog("option", "maxWidth", this.options.maxWidth);
      }
      buttons_html = $('<table/>').append(tr = $('<tr/>'));
      ref = this.options.buttons;
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        button_n = ref[i];
        button = $('<button/>', {
          html: button_n['text'],
          click: button_n['click']
        });
        if (button_n['class']) {
          button.attr('class', button_n['class']);
        }
        if (button_n['style']) {
          button.attr('style', button_n['style']);
        }
        if (button_n['id']) {
          button.attr('id', button_n['id']);
        }
        tr.append(td = $('<td/>').append(button));
        if (button_n.data !== void 0) {
          button.data(button_n.data);
        }
        if (i > 0) {
          td.css('textAlign', 'right');
        }
      }
      return self.find('.ui-dialog-buttonpane').html(this.buttonDiv = $('<div/>', {
        'class': 'js-alert_union_buttons ui-dialog-buttonpane ui-widget-content ui-helper-clearfix'
      }).append(buttons_html));
    };

    return modalWindow;

  })();


  /*
   * Модуль учёт -> настройки
   */

  (function($, window) {
    var userOptions;
    userOptions = (function() {
      userOptions.prototype.defaults = {
        date: '00.00.0000'
      };

      function userOptions(el, options) {
        var self;
        this.$el = $(el);
        this.elID = this.$el.attr('id');
        options = jQuery.parseJSON(this.$el.find('#edit_new_os_dop_param_json').html());
        if (options === null) {
          $(el).html($('<span/>', {
            css: {
              'color': 'rgb(255, 130, 130);'
            },
            html: 'блок редактирования доп. инфо учёта не доступен в режиме создания пользователей'
          }));
          return;
        } else {
          $(el).html($('<div/>', {
            id: 'preloader_block'
          }));
        }
        this.options = $.extend({}, this.defaults, options);
        console.log(this.options);

        /*
         * добавление полей
         */
        self = this;
        new sendAjax('get_compensations_row', {
          user_id: self.options.id,
          url: 'http://' + window.location.hostname + '/os/?page=user_api'
        }, function(response) {
          self.compensation = response.data;
          return self.init();
        });
      }

      userOptions.prototype.init = function() {
        var tbl;
        $('#' + this.elID).html('');
        $('#' + this.elID).append(tbl = $('<table/>', {
          'id': 'userOptionsModule'
        }));
        tbl.append(this.general_tbl());
        tbl.append(this.salary_tbl());
        return tbl.append(this.compensation_tbl());
      };

      userOptions.prototype.create_compensation_row = function(data) {
        var tr;
        tr = $('<tr/>').data(data);
        tr.append($('<td/>', {
          html: data.name
        }));
        tr.append($('<td/>', {
          html: data.val
        }));
        tr.append($('<td/>', {
          "class": 'delete_td',
          'html': 'x',
          click: function() {
            return new sendAjax('delete_compensation_row', {
              id: data.id,
              url: 'http://' + window.location.hostname + '/os/?page=user_api'
            }, function() {
              return tr.remove();
            });
          }
        }));
        return tr;
      };

      userOptions.prototype.compensation_tbl = function() {
        var data, i, j, len1, ref, rowData, self, tbl, tr;
        self = this;
        tbl = [];
        tbl.push(tr = $('<tr/>'));
        tr.append($('<td/>', {
          html: 'Ежемесячные компенсации '
        }));
        tr.append($('<td/>'));
        tr.append($('<td/>'));
        data = [
          {
            id: 0,
            name: 'Телефон',
            val: 850.00
          }, {
            id: 1,
            name: 'Прожёр',
            val: 600.00
          }, {
            id: 2,
            name: 'Проезд',
            val: 575.50
          }
        ];
        console.log(this.compensation);
        ref = this.compensation;
        for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
          rowData = ref[i];
          tbl.push(this.create_compensation_row(rowData));
        }
        tbl.push(tr = $('<tr/>'));
        tr.append($('<td/>').append($('<button/>', {
          'html': "Добавить",
          click: function() {
            var html, win_inp_name, win_inp_val;
            html = $('<div/>', {
              id: 'user_window_compensations_form'
            });
            html.append($('<div/>').append(win_inp_name = $('<input/>', {
              placeholder: 'название'
            })));
            html.append($('<div/>').append(win_inp_val = $('<input/>', {
              placeholder: 'стоимость',
              val: round_money(0),
              focus: function() {
                var t;
                if (Number($(this).val()) === 0) {
                  return $(this).val('');
                } else {
                  t = $(this);
                  return setTimeout(function() {
                    return t.select();
                  }, 50);
                }
              },
              blur: function() {
                return $(this).val(round_money(Number($(this).val())));
              }
            })));
            return self.win_window = new modalWindow({
              html: html,
              maxHeight: '100%',
              maxWidth: '90%',
              title: 'Завести строку компенсации',
              buttons: [
                {
                  text: 'Закрыть',
                  "class": 'button_yes_or_no no',
                  click: function() {
                    console.log(self.win_window.winDiv[0]);
                    return $(self.win_window.winDiv[0]).dialog('close').dialog('destroy').remove();
                  }
                }, {
                  text: 'Создать',
                  "class": 'button_yes_or_no',
                  click: function() {
                    return new sendAjax('create_compensation_row', {
                      user_id: self.options.id,
                      name: win_inp_name.val(),
                      val: win_inp_val.val(),
                      url: 'http://' + window.location.hostname + '/os/?page=user_api'
                    }, function(response) {
                      tr.before(self.create_compensation_row(response.data));
                      return $(self.win_window.winDiv[0]).dialog('close').dialog('destroy').remove();
                    });
                  }
                }
              ]
            }, {
              closeOnEscape: true,
              single: true,
              close: function(event, ui) {
                return $('#quick_button_div .button').eq(1).removeClass('checked');
              }
            });
          }
        })));
        tr.append($('<td/>'));
        return tbl;
      };

      userOptions.prototype.salary_tbl = function() {
        var inp, self, tbl, tr;
        self = this;
        tbl = [];
        tbl.push(tr = $('<tr/>'));
        tr.append($('<td/>', {
          html: 'Выплаты на карту'
        }));
        tr.append($('<td/>'));
        tr.append($('<td/>'));
        tbl.push(tr = $('<tr/>'));
        tr.append($('<td/>', {
          html: 'Аванс'
        }));
        tr.append($('<td/>').append(inp = $('<input/>', {
          val: round_money(this.options.avans),
          focus: function() {
            var t;
            t = $(this);
            if (Number($(this).val()) === 0) {
              return $(this).val('');
            } else {
              return setTimeout(function() {
                return t.select();
              }, 50);
            }
          },
          blur: function() {
            if (Number($(this).val()) !== Number(self.options.avans)) {
              self.options.avans = round_money($(this).val());
              new sendAjax('save_avans', {
                id: self.options.id,
                val: self.options.avans,
                url: 'http://' + window.location.hostname + '/os/?page=user_api'
              });
              return $(this).val(self.options.avans);
            } else {
              return $(this).val(self.options.avans);
            }
          }
        })));
        tr.append($('<td/>'));
        tbl.push(tr = $('<tr/>'));
        tr.append($('<td/>', {
          html: 'ЗП'
        }));
        tr.append($('<td/>').append($('<input/>', {
          val: round_money(this.options.salary),
          focus: function() {
            var t;
            t = $(this);
            if (Number($(this).val()) === 0) {
              return $(this).val('');
            } else {
              return setTimeout(function() {
                return t.select();
              }, 50);
            }
          },
          blur: function() {
            if (Number($(this).val()) !== Number(self.options.salary)) {
              self.options.salary = round_money($(this).val());
              $(this).val(self.options.salary);
              return new sendAjax('save_salary', {
                id: self.options.id,
                val: self.options.salary,
                url: 'http://' + window.location.hostname + '/os/?page=user_api'
              });
            } else {
              return $(this).val(self.options.salary);
            }
          }
        })));
        tr.append($('<td/>'));
        return tbl;
      };

      userOptions.prototype.general_tbl = function() {
        var inp, opt, sel, self, tbl, tr;
        self = this;
        tbl = [];
        tbl.push(tr = $('<tr/>'));
        tr.append($('<td/>', {
          html: 'Общие данные'
        }));
        tr.append($('<td/>'));
        tr.append($('<td/>'));
        tbl.push(tr = $('<tr/>'));
        tr.append($('<td/>', {
          html: 'Дата приёма на работу'
        }));
        tr.append($('<td/>').append(inp = $('<input/>', {
          type: 'text',
          val: this.options.date_start_wock,
          blur: function() {
            return new sendAjax('save_date_work_start', {
              id: self.options.id,
              date: $(this).val(),
              url: 'http://' + window.location.hostname + '/os/?page=user_api'
            });
          }
        })));
        inp.datetimepicker({
          timepicker: false,
          dayOfWeekStart: 1,
          onSelectDate: function(ct, $i) {
            return $i.blur();
          },
          onGenerate: function(ct) {
            $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
            return $(this).find('.xdsoft_date');
          },
          closeOnDateSelect: true,
          format: 'd.m.Y'
        });
        tr.append($('<td/>'));
        tbl.push(tr = $('<tr/>'));
        tr.append($('<td/>', {
          html: 'Статус'
        }));
        tr.append($('<td/>').append(sel = $('<select/>')));
        sel.change(function() {
          return new sendAjax('save_status', {
            id: self.options.id,
            val: $(this).val(),
            url: 'http://' + window.location.hostname + '/os/?page=user_api'
          });
        });
        tr.append($('<td/>'));
        sel.append(opt = $('<option/>', {
          'value': '1',
          'html': 'Работает'
        }));
        if (Number(this.options.status) === 1) {
          opt.attr('selected', 'true');
        }
        sel.append(opt = $('<option/>', {
          'value': '0',
          'html': 'Уволен'
        }));
        if (Number(this.options.status) === 0) {
          opt.attr('selected', 'true');
        }
        tr.append($('<td/>'));
        tbl.push(tr = $('<tr/>'));
        tr.append($('<td/>', {
          html: 'Менеджер'
        }));
        tr.append($('<td/>').append(sel = $('<select/>')));
        sel.change(function() {
          return new sendAjax('save_manager_type', {
            id: self.options.id,
            val: $(this).val(),
            url: 'http://' + window.location.hostname + '/os/?page=user_api'
          });
        });
        sel.append(opt = $('<option/>', {
          'value': '1',
          'html': 'Рекламных агенств'
        }));
        if (Number(this.options.manager) === 1) {
          opt.attr('selected', 'true');
        }
        sel.append(opt = $('<option/>', {
          'value': '2',
          'html': 'конечных клиентов'
        }));
        if (Number(this.options.manager) === 2) {
          opt.attr('selected', 'true');
        }
        sel.append(opt = $('<option/>', {
          'value': '3',
          'html': 'бюджетник (исп/ср)'
        }));
        if (Number(this.options.manager) === 3) {
          opt.attr('selected', 'true');
        }
        tr.append($('<td/>'));
        return tbl;
      };

      return userOptions;

    })();
    return $.fn.extend({
      userOptions: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('userOptions');
          if (!data) {
            $this.data('userOptions', (data = new userOptions(this, option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);

}).call(this);

//# sourceMappingURL=userCard.js.map
